MIGRATING SIMULATION MODELS FROM OMNeT++ 3.x TO 4.0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Simulation models written for OMNeT++ 3.x cannot be used directly with
OMNeT++ 4.0 or later, due to changes in the C++ API, NED, ini and msg
files. This readme provides a brief overview of the porting process.

   This is just a QUICK GUIDE -- for more background and details
   see the Migration Document under doc/Migration.pdf!

You would port your simulation model in two stages: (1) get it working
with 4.0; then (2) improve it by making use of new OMNeT++ features.


Getting your simulation model working.

  PREREQUISITES: Have OMNeT++ 4.0 installed and working, and familiarize
  yourself with the IDE.

  1. Make a backup of your simulation model. Be prepared to delete
     everything and start over with the migration several times,
     until you get it right.

  2. Change into the directory of your simulation model, and run
     all scripts in the <omnetpp>/migrate subdirectory from there.

       $ cd MyModel
       $ ../omnetpp-4.0/migrate/migratened
       $ ../omnetpp-4.0/migrate/migrateini
       $ ../omnetpp-4.0/migrate/migratemsg
       $ ../omnetpp-4.0/migrate/migratecpp | tee migratecpp.out

     The scripts convert NED, ini, msg and C++ files to 4.0 format.
     The result will need some manual post-processing, because not
     everything can be converted automatically. The scripts will print
     some hints on what you'll need to do manually -- please make note
     of these printouts. Especially, migratecpp is going to print a
     number of notes, warnings and hints -- read them carefully.

  3. If your simulation model is based on the INET Framework, have the
     new INET installed, and similarly run the scripts in the migrate/
     subdirectory of INET. They will update your source files according
     to changes in the INET Framework.

       $ cd MyModel
       $ ../INET/migrate/migratened
       $ ../INET/migrate/migrateini
       $ ../INET/migrate/migratemsg
       $ ../INET/migrate/migratecpp | tee migratecpp.out

  4. You can do the rest of the migration either on the command line,
     or in the OMNeT++ IDE. We recommend the latter. To use the IDE,
     you need to create a project for your simulation model. Select

       File | New | OMNeT++ Project...

     from the menu. A wizard comes up. On the first page, uncheck
     "Use default location" and specify the name and the directory
     of your simulation model, then go through the other wizard pages
     and hit Finish at the end. You should see the new project appear
     in the Project Explorer (left), and it should contain your files.

     If something goes wrong, remove the project by selecting it and
     hitting DEL. It will ask whether you also want to delete the
     files from the disk -- answer NO! Then start over with project
     creation.

  5. NED in 4.0 has a package system, similar to Java. If your model
     contains NED files in several subdirectories, these subdirectories
     now mean packages, and the NED files will need package declarations
     and imports to be added. This can be done automatically in the IDE.
     Have your project created and open in the IDE (see previous step),
     then choose

       Navigate | Clean up NED files...

     from the menu. Select your project and click OK. The IDE will then fix
     all package declarations and imports in your NED files.

  6. Revise NED files. A brief checklist:
       (1) Revise "volatile" parameters if they really need to be volatile.
           As a rule of thumb, a parameter needs to be volatile if it is 
           being read *during* simulation, not only in the initialization
           phase. If it is only read from initialize(), remove the volatile
           keyword.
           
       (2) Revise "double" parameters if they should rather be "int".
           Before, NED only supported a "numeric" type, and the migration
           script, for lack of a better heuristics, turns all such parameters 
           into "double". You need to check each, and change it to "int" if 
           needed.

       (3) "somepar = input;" lines became just "somepar;" -- you probably 
           want to remove them, as they are completely redundant.

       (4) Remove extra "network bla extends Bla {}".  Background: a 3.x-style 
           network declaration denotes a compound module as network. In 4.0,
           a compound module may be directly declared to be a network, so the
           extra step is not needed. Example: the 3.x network declaration
               network cqn : CQN 
               endmodule
           is converted by the migration script into an inheritance:
               network cqn extends CQN {
               }
           However, you can remove that altogether, if you change the CQN 
           module's declaration to use the "network" keyword (like: 
           network CQN {...}), and replace network=cqn with network=CQN
           in the ini files.

       (5) "like" module types should be changed into interfaces, and actual 
           types declared to be "like" them.

  7. Compile your simulation model (right-click on the project and
     select Build from the context menu, or close all other projects
     and hit Ctrl+B.) The most frequent compile errors and their fixes:

     "Cannot convert SimTime to double"
       simtime_t now maps to the int64-based SimTime class and not double.
       Wherever a simtime_t is assigned to a variable of type double,
       consider changing that variable to simtime_t as well.

       Where still needed, use SIMTIME_DBL(t) to convert a simtime_t to
       double. In printf's, use "%s" and SIMTIME_STR(t). The advantage of
       using these macros instead of SimTime methods is that your model will
       also compile with simtime_t=double (a compatibility mode).

     "No such method setBitLength/getBitLength/encapsulate/decapsulate"
       Length and encapsulation have been moved to cPacket, a subclass of
       cMessage. You likely need to change the "message" keyword in
       .msg files with "packet", which will cause the generated class
       to have cPacket as base class.

       	 message ABCPacket {...} ==> packet ABCPacket {...}

       Inside handleMessage() and other functions, cast the cMessage*
       pointer to cPacket:

         cPacket *pkt = check_and_cast<cPacket *>(msg);

     "Cannot open file csimul.h" (or any other header)
       Only <omnetpp.h> is public API. Other OMNeT++ header files should
       not be included directly, as they may be renamed or removed in
       any future version.

     "sendDirect() does not take 3 (or 4) arguments"
       sendDirect()'s signature has changed. It used to take a delay
       as second argument; now it has two variants, one which takes
       no delay argument (i.e. if you have 0.0 in your simulation,
       just remove it), and another one that takes a propagation delay
       and a transmission duration. If you use the second one,
       you'll probably want to call setDeliverOnReceptionStart(true)
       on the receiver gate in the target module's initialize() method
       as well.

  8. Run your simulation model. The most frequent runtime errors and
     their fixes:

     "Cannot convert unit 'none' to 'seconds'"
       Physical units now have to be written out in expressions, so you
       need to change 5 into 5s, and exponential(1) into exponential(1s).

     "Cannot convert unit 'none' to 'bps'"
       The datarate channel parameter now has unit bps (bit/sec), and
       this unit must be written out. Kbps, Mbps, Gbps are also accepted.

     "No such module type 'X'"
       If your model creates modules dynamically, module types need to be
       looked up by fully qualified name (like "some.package.X").

Making use of new OMNeT++ features.

  1. NED files
       (5) make use of default icons: migrate "i=" tags from submodule display string to the simple module type
       (7) parameter values assigned in ini files could be put into the corresponding NED file as default values
       (8) possibly make use of @properties as "marker interfaces", like @host(true)
       default icons
       parameter default values
       @unit
       inheritance
       ...

  2. ini files
      configs
      experiment syntax (${})

  3. C++
      output vectors: interpolation mode, enum etc
      gate->setDeliverOnReceptionStart(true)

Other sources of information
  doc/Migration.pdf
  include/ChangeLog
  src/*/ChangeLog
  doc/API-changes
  doc/api
  doc/manual
  opp_run -h all

