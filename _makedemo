#
# make OMNeT++ demo package
#

DIR=../demo
TCLTK_DIR=e:/tcl

if [ ! -f configure.in ]; then
    echo Must be called in top-level omnetpp dir!!!
    exit
fi

if [ -d $DIR ]; then
    echo Target directory $DIR already exists - delete it or move it away!!!
    exit
fi

# copy stuff
echo 'Copying binaries...'
mkdir $DIR
cp bin/gned.exe $DIR
cp samples/demo/demo.exe $DIR/opp_demo.exe

echo 'Copying Tcl/Tk stuff...'
cp $TCLTK_DIR/bin/*.dll $DIR
cp -r $TCLTK_DIR/lib $DIR
rm -rf $DIR/lib/*.lib

echo 'Checking out samples & bitmaps...'
(cd $DIR; cvs co samples > /dev/null)
(cd $DIR; cvs co bitmaps > /dev/null)

# clean samples
echo 'Cleaning...'
rm -rf `find $DIR -name CVS`
rm -rf $DIR/samples/demo
rm -rf $DIR/samples/pvmex
rm -f $DIR/samples/cc2cpp.bat
rm -f $DIR/samples/*/*.dep
rm -f $DIR/samples/*/*.dsw
rm -f $DIR/samples/*/*.dsp
rm -f $DIR/samples/*/*.mak
rm -f $DIR/samples/*/*.in
rm -f $DIR/samples/*/*.vc
rm -f $DIR/samples/*/*.ide
rm -f $DIR/samples/*/*.exe
rm -f $DIR/samples/*/*.pdb
rm -f $DIR/samples/*/*.ilk

# produce individual bat files
echo 'Generating batch files...'
for i in Nim Token FDDI FIFO1 FIFO2 Hist HCube Dyna; do
   ii=`echo $i | tr 'A-Z' 'a-z'`
   echo "@call rundemo.bat $i" > $DIR/$ii.bat
done

# produce rundemo.bat
cat >$DIR/rundemo.bat <<__END__
@echo off
if not "x%1"=="x" goto okay
echo Usage: %0 demoname
echo where demoname is one of: Nim, Token, FDDI, FIFO1, FIFO2, Hist, HCube, Dyna
goto end

:okay
echo.
echo ***************************************************************************
echo %1 -- an OMNeT++ demo simulation
echo.
echo Note: all source and data files that belong to the simulation are in the
echo       samples/%1 directory. This is also the place for the output files.
echo       The actual code of the simulation is linked into opp_demo.exe.
echo.
echo Running the simulation...
echo ***************************************************************************
echo.
set OMNETPP_BITMAP_PATH=..\..\bitmaps
set TCL_LIBRARY=..\..\lib\tcl8.2
cd samples\%1
..\..\opp_demo
cd ..\..

:end
__END__


cat >$DIR/README.txt <<__END__
OMNeT++ Demo Simulations
========================

This package contains a demo for the OMNeT++ Discrete Event Simulation System.

Here you'll find the following demos:
  Nim     a simple two-player game
  FIFO1   single-server queue
  FIFO2   another version of fifo, now with handleMessage() and FSM
  Token   Token-Ring network
  Hist    demo of the histogram classes
  HCube   hypercube network with deflection routing
  FDDI    an accurate FDDI MAC simulation
  Dyna    dynamic module creation (client-server network)
You can start them with the respective .bat files.

What is OMNeT++?
~~~~~~~~~~~~~~~~
OMNeT++ is an object-oriented modular discrete event simulator.
An OMNeT++ model consists of hierarchically nested modules which
communicate though gates and connections. The user defines the
module structure in the NED language.

The modules on the lowest level (termed "simple modules") contain
the algorithms. Those are written in C++ and use the simulation
object library. Simple modules appear to execute as something like
threads within a simulation. (In fact they use non-preemptive
scheduling; they are implemented as coroutines).

OMNeT++ is written in C++ and it is portable: it runs on any platform
where there's a C++ compiler. It has a Tcl/Tk user interface which is
supported on under Unix/X and Win32 platforms. There's also a platform-
independent command-line user interface for batch execution.

OMNeT++ has a graphical topology editor called GNED and also a tool
called Plove for analyzing and plotting simulation output. Both tools
are written using Tcl/Tk.

We have extended OMNeT++ to execute in parallel using the popular
PVM library (Parallel Virtual Machine), for studying different
synchronisation methods.

OMNeT++ Home Page: http://www.hit.bme.hu/phd/vargaa/omnetpp.htm


Enjoy!

Andras Varga
andras@whale.hit.bme.hu
__END__

echo 'THE README.TXT MUST BE MANUALLY CONVERTED TO DOS FORMAT!'
