%description:
check the distributions are properly accessible from NED

related test: inifile_distrib_1.test

FIXME: These tests are very fragile. They depend on the floating-point
arithmetic and the default printing of doubles being EXACTLY THE SAME
on all machines. They also break if anything changes in the underlying
RNGs.

%file: {}.ned

simple {Simple}
    parameters:
        uniform_par,
        exponential_par,
        normal_par,
        truncnormal_par,
        gamma_d_par,
        beta_par,
        erlang_k_par,
        chi_square_par,
        student_t_par,
        cauchy_par,
        triang_par,
        lognormal_par,
        weibull_par,
        pareto_shifted_par,

        intuniform_par,
        bernoulli_par,
        binomial_par,
        geometric_par,
        negbinomial_par,
        // hypergeometric_par,
        poisson_par;
endsimple

network {Net}: {Simple}
    parameters:
        uniform_par =         uniform(1.0, 2.0),
        exponential_par =     exponential(1.0),
        normal_par =          normal(1.0, 1.0),
        truncnormal_par =     truncnormal(1.0, 1.0),
        gamma_d_par =         gamma_d(2.0, 2.0),
        beta_par =            beta(1.0, 1.0),
        erlang_k_par =        erlang_k(1, 1.0),
        chi_square_par =      chi_square(2),
        student_t_par =       student_t(1),
        cauchy_par =          cauchy(1.0, 2.0),
        triang_par =          triang(1.0, 2.0, 3.0),
        lognormal_par =       lognormal(1.0, 1.0),
        weibull_par =         weibull(1.0, 2.0),
        pareto_shifted_par =  pareto_shifted(1.0, 2.0, 3.0),

        intuniform_par =      intuniform(0, 10),
        bernoulli_par =       bernoulli(0.3),
        binomial_par =        binomial(10, 0.3),
        geometric_par =       geometric(0.3),
        negbinomial_par =     negbinomial(10, 0.3),
        // hypergeometric_par =  hypergeometric(1, 2, 2),
        poisson_par =         poisson(1.0);
endnetwork

%file: {}.cc

#include "omnetpp.h"

class {Simple} : public cSimpleModule
{
    Module_Class_Members({Simple},cSimpleModule,16384)
    virtual void activity();
};

Define_Module({Simple});

#define PAR_MEAN_AND_VARIANCE(PARNAME) \
 {\
   cPar& PARNAME = par(#PARNAME); cStdDev s; \
   for (int i=0; i<numrepl; i++) s.collect((double)PARNAME); \
   ev.printf("%s: m=%lg v=%lg\n", #PARNAME, s.mean(), s.variance()); \
 }

void {Simple}::activity()
{
    int numrepl=100000;

    PAR_MEAN_AND_VARIANCE(uniform_par);
    PAR_MEAN_AND_VARIANCE(exponential_par);
    PAR_MEAN_AND_VARIANCE(normal_par);
    PAR_MEAN_AND_VARIANCE(truncnormal_par);
    PAR_MEAN_AND_VARIANCE(gamma_d_par);
    PAR_MEAN_AND_VARIANCE(gamma_d_par);
    PAR_MEAN_AND_VARIANCE(beta_par);
    PAR_MEAN_AND_VARIANCE(erlang_k_par);
    PAR_MEAN_AND_VARIANCE(chi_square_par);
    PAR_MEAN_AND_VARIANCE(chi_square_par);
    PAR_MEAN_AND_VARIANCE(student_t_par);
    PAR_MEAN_AND_VARIANCE(cauchy_par);
    PAR_MEAN_AND_VARIANCE(triang_par);
    PAR_MEAN_AND_VARIANCE(lognormal_par);
    PAR_MEAN_AND_VARIANCE(weibull_par);
    PAR_MEAN_AND_VARIANCE(pareto_shifted_par);

    PAR_MEAN_AND_VARIANCE(intuniform_par);
    PAR_MEAN_AND_VARIANCE(bernoulli_par);
    PAR_MEAN_AND_VARIANCE(binomial_par);
    PAR_MEAN_AND_VARIANCE(geometric_par);
    PAR_MEAN_AND_VARIANCE(negbinomial_par);
    // PAR_MEAN_AND_VARIANCE(hypergeometric_par);
    PAR_MEAN_AND_VARIANCE(poisson_par);
}

%inifile: {}.ini
[General]
network={Net}

%contains: stdout
uniform_par: m=1.49972 v=0.0836221
exponential_par: m=0.994976 v=0.985019
normal_par: m=0.997956 v=1.00876
truncnormal_par: m=1.28485 v=0.629235
gamma_d_par: m=2.00716 v=2.01591
gamma_d_par: m=1.99478 v=1.98186
beta_par: m=0.387542 v=0.0782216
erlang_k_par: m=0.997879 v=0.993821
chi_square_par: m=2.00162 v=3.97089
chi_square_par: m=1.99571 v=3.98491
student_t_par: m=-384.669 v=1.44891e+010
cauchy_par: m=2.23985 v=117117
triang_par: m=1.99843 v=0.166742
lognormal_par: m=4.50659 v=34.5979
weibull_par: m=0.889651 v=0.216247
pareto_shifted_par: m=43.6112 v=3.83752e+007
intuniform_par: m=4.99985 v=10.0411
bernoulli_par: m=0.30054 v=0.210218
binomial_par: m=2.99924 v=2.09004
geometric_par: m=2.32843 v=7.71662
negbinomial_par: m=23.3364 v=77.2412
poisson_par: m=1.00124 v=0.998668




