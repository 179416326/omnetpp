%description:
Tests MatchExpression class.

%includes:
#include "matchexpression.h"
#include "matchableobject.h"

%global:

// global vars
static bool dottedpath;
static bool fullstring;
static bool casesensitive;

static void match(const char *pattern, cObject *obj)
{
    ev << pattern << " | (" << obj->getClassName() << ")" << obj->getName() << " --> ";
    try {
        MatchExpression me(pattern, dottedpath, fullstring, casesensitive);
        MatchableObjectAdapter matchobj(MatchableObjectAdapter::FULLNAME, obj);
        bool result = me.matches(&matchobj);
        ev << (result?"true":"false") << "\n";
    } catch (std::exception& e) {
        ev << "ERROR: " << e.what() << "\n";
    }
}


%activity:

dottedpath = true;
fullstring = true;
casesensitive = true;

cMessage *msg = new cMessage("hello");
msg->setKind(42);
msg->setBitLength(999);

match("hello", msg);
match("he* AND *lo", msg);
match("bubu", msg);
match("kind(42)", msg);
match("kind(41)", msg);
match("length({990..1000})", msg);
match("length({980..990})", msg);

ev << "done\n";

%exitcode: 0

%contains: stdout
hello | (cMessage)hello --> true
he* AND *lo | (cMessage)hello --> true
bubu | (cMessage)hello --> false
kind(42) | (cMessage)hello --> true
kind(41) | (cMessage)hello --> false
length({990..1000}) | (cMessage)hello --> true
length({980..990}) | (cMessage)hello --> false
done
