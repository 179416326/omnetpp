%description:
Tests MatchExpression class.

%global:

#include "../../../src/common/matchexpression.h"

// global vars
static bool dottedpath;
static bool fullstring;
static bool casesensitive;

static void match(const char *pattern, const char *line, bool expectedresult)
{
    bool result;
    try {
        MatchExpression me(pattern, dottedpath, fullstring, casesensitive);
        MatchableString lineObject(line);
        result = me.matches(&lineObject);
    } catch (Exception *e) {
        ev.printf("`%s' matches `%s' : EXCEPTION: %s\n", pattern, line, e->message());
        return;
    }
    ev.printf("`%s' matches `%s' : %s %s\n", pattern, line, (result?"true":"false"), (result==expectedresult?"ok":"FAIL"));
}


%activity:

dottedpath = true;
fullstring = true;
casesensitive = true;

match("a", "a", true);
match("a", "b", false);

match("not a", "a", false);
match("not a", "b", true);

match("a OR b", "a", true);
match("b OR a", "a", true);
match("a OR b", "c", false);

match("{50..120} OR bu*bu", "bu--bu", true);
match("{50..120} OR bu*bu", "73", true);
match("{50..120} OR bu*bu", "120", true);
match("{50..120} OR bu*bu", "50", true);
match("{50..120} OR bu*bu", "500", false);
match("{50..120} OR bu*bu", "bu", false);

match("(*one OR *two) AND twenty*", "twenty-one", true);
match("(*one OR *two) AND twenty*", "twenty-two", true);
match("(*one OR *two) AND twenty*", "twenty-three", false);

match("(*one OR *two) AND twenty*", "twenty-one", true);
match("(*one OR *two) AND twenty*", "thirty-one", false);

match("*one OR (*two AND twenty*)", "twenty-two", true);
match("*one OR (*two AND twenty*)", "thirty-one", true);

match("*one OR *two AND twenty*",   "thirty-one", true);  //AND binds stronger than OR

%exitcode: 0

%contains: stdout
BUBU (remove this!)

%not-contains: stdout
FAIL

%not-contains: stdout
EXCEPTION

