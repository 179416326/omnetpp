%description:
Tests the BigDecimal::BigDecimal(double) method

%global:

#include <iostream>
#include "bigdecimal.h"

static void convertAndPrint(double d)
{
    ev.precision(16);
    ev << d;
    ev << " ==> ";
    try {
        BigDecimal bd(d);
        ev << "intVal=" << bd.getIntValue() << ", scale=" << bd.getScale() <<"\n";
    } catch (std::exception& e) {
        ev << "ERROR: " << e.what() << "\n";
    }
}

%activity:

#define T(x) convertAndPrint(x)

ev << "\n";

// positive cases
T(0);
T(1);
T(-1);
T(1234567890123456);
T(1234567890123.456);
T(1234567890.123456);
T(123456.7890123456);
T(123.4567890123456);
T(0.1234567890123456);
T(-1234567890123456);

// negative cases
T(12345678901234567890); // overflow


ev << ".\n";


%contains: stdout
0 ==> intVal=0, scale=0
1 ==> intVal=1, scale=0
-1 ==> intVal=-1, scale=0
1234567890123456 ==> intVal=1234567890123456, scale=0
1234567890123.456 ==> intVal=1234567890123456053, scale=-6
1234567890.123456 ==> intVal=1234567890123456, scale=-6
123456.7890123456 ==> intVal=1234567890123456015, scale=-13
123.4567890123456 ==> intVal=1234567890123455806, scale=-16
0.1234567890123456 ==> intVal=123456789012345579, scale=-18
-1234567890123456 ==> intVal=-1234567890123456, scale=0
1.234567890123457e+019 ==> ERROR: BigDecimal::normalize(): arithmetic overflow
.
