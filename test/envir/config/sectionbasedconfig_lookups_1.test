%description:
Tests SectionBasedConfiguration's accelerated lookup implementation.

Strategy: generate a long inifile with random contents, and perform
random lookups against it. Accelerated lookups should yield the same
results as naive, linear lookups.

%global:
#include <fstream>
#include "inifilereader.h"
#include "sectionbasedconfig.h"
#include "lcgrandom.h"
#include "patternmatcher.h"

enum State {ALPHA, WILDCARD, DOT};

static std::string generateKey(LCGRandom& rng)
{
    std::string key;
    State state = rng.next01()<0.5 ? ALPHA : WILDCARD;
    while (true)
    {
        if (!key.empty() && state==DOT && rng.next01()<0.2)
            break;
        if (state==DOT) {
            key += ".";
            state = rng.next01()<0.5 ? ALPHA : WILDCARD;
        } else if (state==ALPHA) {
            key += (rng.draw(2) ? "a" : "foo");
            state = rng.next01()<0.5 ? DOT : WILDCARD;
        } else if (state==WILDCARD) {
            key += (rng.draw(2) ? "*" : "**");
            state = rng.next01()<0.5 ? DOT : ALPHA;
        }
    }
    return key;
}

const char *lookupFromInifile(InifileReader& ini, const char *module, const char *parname)
{
    std::string fullpath = std::string(module)+"."+parname;
    int sectionId = 0;  // there's only one section
    int n = ini.getNumEntries(sectionId);
    for (int i=0; i<n; i++)
    {
        const InifileReader::KeyValue& entry = ini.getEntry(sectionId, i);
        PatternMatcher pattern(entry.getKey(), true, true, true);
        if (pattern.matches(fullpath.c_str()))
            return entry.getValue();
    }
    return NULL;
}

%activity:

// write the file
LCGRandom rng;
const char *filename = "{}_test.ini";
std::fstream f(filename, std::ios::out);
f << "[General]\n";
for (int i=0; i<1000; i++)
    f << generateKey(rng) << " = " << i << "\n";
f.close();

// load the file
InifileReader inifile;
inifile.readFile(filename);
SectionBasedConfiguration cfg;
cfg.setConfigurationReader(&inifile);
cfg.activateConfig("General");

// test lookup with random keys
for (int i=0; i<1000; i++)
{
    std::string module = "a.afoo.a"; // XXX for now; generate random!
    std::string parname = "afoo"; // XXX for now; generate random!

    // look up the parameter both ways
    const char *value1 = cfg.getParameterValue(module.c_str(), parname.c_str(), false);
    const char *value2 = lookupFromInifile(inifile, module.c_str(), parname.c_str());

    // and compare them
    if (value1==NULL) value1="";
    if (value2==NULL) value2="";
    if (strcmp(value1, value2)!=0)
        ev << "ERROR\n";
}

ev << ".\n";

%exitcode: 0

%not-contains: stdout
ERROR

%contains: stdout
.

