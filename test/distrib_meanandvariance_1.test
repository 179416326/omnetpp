%description:
Test mean and variance of random variates from different distributions.
This doesn't guarantee that the shape of the distributions is also OK,
but at least it's a guard against simple programming errors.

Test 1: discrete distributions
Test 2: continuous distributions

FIXME: These tests are very fragile. They depend on the floating-point
arithmetic and the default printing of doubles being EXACTLY THE SAME
on all machines. They also break if anything changes in the underlying
RNGs.

%activity:

#define MEAN_AND_VARIANCE(f) \
 {\
   cStdDev s; for (int i=0; i<numrepl; i++) s.collect(f); \
   ev.printf("%s: m=%lg v=%lg\n", #f, s.mean(), s.variance()); \
 }

int rng=1;
int numrepl=100000;

MEAN_AND_VARIANCE(intuniform(1,1,rng));   // m=1
MEAN_AND_VARIANCE(intuniform(0,1,rng));   // m=0.5
MEAN_AND_VARIANCE(intuniform(0,10,rng));  // m=5
MEAN_AND_VARIANCE(intuniform(-5,5,rng));  // m=0
ev << endl;

// bernoulli(p): mean=p
MEAN_AND_VARIANCE(bernoulli(0.0,rng));    // m=0 (always fail)
MEAN_AND_VARIANCE(bernoulli(1.0,rng));    // m=1 (always success)
MEAN_AND_VARIANCE(bernoulli(0.5,rng));    // m=0.5
MEAN_AND_VARIANCE(bernoulli(0.2,rng));    // m=0.2
ev << endl;

// binomial(n,p): mean=n*p
// if (n==1) --> bernoulli(p)
MEAN_AND_VARIANCE(binomial(1, 0.2,rng));  // m=1
MEAN_AND_VARIANCE(binomial(2, 0.2,rng));  // m=0.4
MEAN_AND_VARIANCE(binomial(10,0.2,rng));  // m=2
MEAN_AND_VARIANCE(binomial(10,0,rng));    // m=0 (always fail)
MEAN_AND_VARIANCE(binomial(10,1.0,rng));  // m=10 (always success)
ev << endl;

MEAN_AND_VARIANCE(geometric(1.0,rng));    // m=0 (1st is always success)
MEAN_AND_VARIANCE(geometric(0.5,rng));    // m=1
MEAN_AND_VARIANCE(geometric(0.9,rng));
MEAN_AND_VARIANCE(geometric(0.1,rng));
ev << endl;

// negbinomial(n,p)
// if (n==1) --> geometric(p)
// if (p==1.0) --> always 0
MEAN_AND_VARIANCE(negbinomial(0,1.0,rng));   // m=0, v=0 (because p=1)
MEAN_AND_VARIANCE(negbinomial(10,1.0,rng));  // m=0, v=0 (because p=1)
MEAN_AND_VARIANCE(negbinomial(1,0.5,rng));   // same as geom()
MEAN_AND_VARIANCE(negbinomial(1,0.1,rng));   // same as geom()
MEAN_AND_VARIANCE(negbinomial(5,0.1,rng));
ev << endl;

// hypergeometric (a,b,n)
MEAN_AND_VARIANCE(hypergeometric(5,5,1,rng));
MEAN_AND_VARIANCE(hypergeometric(5,5,2,rng));
MEAN_AND_VARIANCE(hypergeometric(0,10,1,rng));
//MEAN_AND_VARIANCE(hypergeometric(10,0,1,rng));
//MEAN_AND_VARIANCE(hypergeometric(5,5,9,rng));
ev << endl;

// poisson(lambda): both mean and variance equal to lambda
MEAN_AND_VARIANCE(poisson(1,rng));
MEAN_AND_VARIANCE(poisson(0.01,rng));
MEAN_AND_VARIANCE(poisson(25,rng));
MEAN_AND_VARIANCE(poisson(50,rng));
MEAN_AND_VARIANCE(poisson(1000,rng));
ev << endl;

%contains: stdout
intuniform(1,1,rng): m=1 v=0
intuniform(0,1,rng): m=0.50335 v=0.249991
intuniform(0,10,rng): m=5.00965 v=9.94388
intuniform(-5,5,rng): m=-0.00185 v=9.94317

bernoulli(0.0,rng): m=0 v=0
bernoulli(1.0,rng): m=1 v=0
bernoulli(0.5,rng): m=0.49898 v=0.250001
bernoulli(0.2,rng): m=0.19948 v=0.159689

binomial(1, 0.2,rng): m=0.19817 v=0.1589
binomial(2, 0.2,rng): m=0.39834 v=0.320528
binomial(10,0.2,rng): m=1.99921 v=1.59285
binomial(10,0,rng): m=0 v=0
binomial(10,1.0,rng): m=10 v=0

geometric(1.0,rng): m=0 v=0
geometric(0.5,rng): m=1.00007 v=1.99147
geometric(0.9,rng): m=0.11108 v=0.123122
geometric(0.1,rng): m=8.99622 v=89.9752

negbinomial(0,1.0,rng): m=0 v=0
negbinomial(10,1.0,rng): m=0 v=0
negbinomial(1,0.5,rng): m=0.99601 v=1.99521
negbinomial(1,0.1,rng): m=8.96287 v=88.8396
negbinomial(5,0.1,rng): m=45.0324 v=451.319

hypergeometric(5,5,1,rng): m=0 v=0
hypergeometric(5,5,2,rng): m=0 v=0
hypergeometric(0,10,1,rng): m=0 v=0

poisson(1,rng): m=0.9945 v=0.9951
poisson(0.01,rng): m=0.01008 v=0.0100585
poisson(25,rng): m=25.0102 v=25.0132
poisson(50,rng): m=50.0198 v=49.5805
poisson(1000,rng): m=999.982 v=998.567


