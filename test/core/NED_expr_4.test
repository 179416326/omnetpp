%description:
Test NED index and sizeof() operators in:
 - submodule non-const parameters
 - module vector sizes

%file: {}.ned

module {Foo}
endmodule

simple {Simple}
   parameters:
      p0, p1, p2, p3, p4, p5, p6, p7, p8, p9;
endsimple

module {Compound}
    parameters:
        a: numeric;
    gates:
        in: in[];
    submodules:
        foo : {Foo}[5];
        dum1 : {Foo}[sizeof(foo)];
        dum2 : {Foo}[sizeof(in)];
        dum3 : {Foo}[a+sizeof(foo)];
        dum4 : {Foo}[a+sizeof(in)];

        sub : {Simple}[3];
            parameters:
                p0 = index,
                p1 = sizeof(foo),
                p2 = sizeof(in),
                p3 = a+index,
                p4 = a+sizeof(foo),
                p5 = a+sizeof(in),
                // print out sizeof dum1/dum2/dum3/dum4:
                p6 = sizeof(dum1),
                p7 = sizeof(dum2),
                p8 = sizeof(dum3),
                p9 = sizeof(dum4);
endmodule

// we need this only because the top-level module cannot
// have gates, and we want to test sizeof(gatevector) as well
module {Wrapper}
    submodules:
        c: {Compound};
            parameters: a=100;
            gatesizes: in[8];
    connections nocheck:
endmodule

network {network}: {Wrapper}
endnetwork

%file: {}.cc

#include <omnetpp.h>

class {Simple} : public cSimpleModule
{
    Module_Class_Members({Simple},cSimpleModule,16384)
    virtual void activity();
};

Define_Module({Simple});

void {Simple}::activity()
{
    for (int i=0; i<params(); i++)
        ev << par(i).name() << "=" << (double)par(i) << endl;
}

%contains-regex: stdout
p00=-3
p01=-5
p02=0
p03=1
p04=1
p05=0
p06=[0-9eE+.]+
p07=1728
p08=36
p09=4
p10=2
p11=15
p12=9
p13=40
p14=2
p15=2
p16=11
p17=9
p18=0
p19=1
p20=1
p21=0
p22=1
p23=0
p24=0
p25=1
p26=0
p27=1
p28=0
p29=1
p30=0
p31=0
p32=1
p33=1
p34=1
p35=0
p36=0
p37=0
p38=1
p39=1
p40=1
p41=0
p42=0
p43=1
p44=1
p45=0
p46=5
p47=2
