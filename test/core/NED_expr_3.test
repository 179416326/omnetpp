%description:
Test operators in NED, with const parameters.

%file: {}.ned

simple {Simple}
   parameters:
      p00:const, p01:const, p02:const, p03:const, p06:const, p07:const, p08:const, p09:const,
      p10:const, p11:const, p12:const, p13:const, p14:const, p15:const, p16:const, p17:const, p18:const, p19:const,
      p20:const, p21:const, p22:const, p23:const, p24:const, p25:const, p26:const, p27:const, p28:const, p29:const,
      p30:const, p31:const, p32:const, p33:const, p34:const, p35:const, p36:const, p37:const, p38:const, p39:const,
      p40:const, p41:const, p42:const, p43:const, p44:const, p45:const, p46:const, p47:const;
endsimple

network {network}: {Simple}
   parameters:
      p00 = -3,      // unary minus or negative constant
      p01 = -(4+1),  // unary minus

      p02 = bool2int(!true),  // negation
      p03 = bool2int(!false), // negation

      p06 = ~3,      // bitwise complement (FIXME compiled and dynamic NED differ in the sign of the result...)
      p07 = 12 ^ 3,  // power of
      p08 = 12 * 3,  // multiply
      p09 = 12 / 3,  // divide
      p10 = 12 % 5,  // modulus
      p11 = 12 + 3,  // add
      p12 = 12 - 3,  // subtract

      p13 = 10 << 2, // bitwise shifting
      p14 = 10 >> 2, // bitwise shifting

      p15 = 10 & 3,  // bitwise and
      p16 = 10 | 3,  // bitwise or
      p17 = 10 # 3,  // bitwise xor

      p18 = bool2int(8 == 3), // equal
      p19 = bool2int(8 == 8), // equal

      p20 = bool2int(8 != 3), // not equal
      p21 = bool2int(8 != 8), // not equal

      p22 = bool2int(8 > 3),  // greater
      p23 = bool2int(3 > 8),  // greater
      p24 = bool2int(8 > 8),  // greater

      p25 = bool2int(8 >= 3), // greater or equal
      p26 = bool2int(3 >= 8), // greater or equal
      p27 = bool2int(8 >= 8), // greater or equal

      p28 = bool2int(8 < 3),  // less
      p29 = bool2int(3 < 8),  // less
      p30 = bool2int(8 < 8),  // less

      p31 = bool2int(8 <= 3), // less or equal
      p32 = bool2int(3 <= 8), // less or equal
      p33 = bool2int(8 <= 8), // less or equal

      p34 = bool2int(true && true),   // logical and
      p35 = bool2int(true && false),  // logical and
      p36 = bool2int(false && true),  // logical and
      p37 = bool2int(false && false), // logical and

      p38 = bool2int(true || true),   // logical or
      p39 = bool2int(true || false),  // logical or
      p40 = bool2int(false || true),  // logical or
      p41 = bool2int(false || false), // logical or

      p42 = bool2int(true ## true),   // logical xor
      p43 = bool2int(true ## false),  // logical xor
      p44 = bool2int(false ## true),  // logical xor
      p45 = bool2int(false ## false), // logical xor

      p46 = true ? 5 : 2,  // the C/C++ ``inline if''
      p47 = false ? 5 : 2; // the C/C++ ``inline if''

endnetwork

%file: {}.cc

#include <omnetpp.h>

typedef cDynamicExpression::StkValue Value;

Value bool2int(cComponent *context, Value args[], int numargs) {
    return args[0].bl ? 1L : 0L;
}
Define_NED_Function(bool2int, "B", "L");


class {Simple} : public cSimpleModule
{
    Module_Class_Members({Simple},cSimpleModule,16384)
    virtual void activity();
};

Define_Module({Simple});

void {Simple}::activity()
{
    for (int i=0; i<params(); i++)
        ev << par(i).name() << "=" << par(i).doubleValue() << endl;
    ev << ".\n";
}

%contains-regex: stdout
p00=-3
p01=-5
p02=0
p03=1
p06=[-]?[0-9eE+.]+
p07=1728
p08=36
p09=4
p10=2
p11=15
p12=9
p13=40
p14=2
p15=2
p16=11
p17=9
p18=0
p19=1
p20=1
p21=0
p22=1
p23=0
p24=0
p25=1
p26=0
p27=1
p28=0
p29=1
p30=0
p31=0
p32=1
p33=1
p34=1
p35=0
p36=0
p37=0
p38=1
p39=1
p40=1
p41=0
p42=0
p43=1
p44=1
p45=0
p46=5
p47=2
.
