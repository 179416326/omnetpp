%description:
Test "like" modules with typename given as:
 - volatile parameter (random)
 - various expressions (containing random, index, etc)

%file: test.ned

import testlib.Dump;

moduleinterface IFooModule { }
module Compound1 like IFooModule { }
module Compound2 like IFooModule { }

network Test
{
    parameters:
        volatile string randomTypeName = choose(intuniform(0,1), "Compound1 Compound2");
        volatile int oneOrTwo = intuniform(0,1);
    submodules:
        a: <"Compound1"> like IFooModule;
        b: <"Compo" + "und1"> like IFooModule;
        c[10]: <randomTypeName> like IFooModule;
        d[10]: <"Compound"+string(oneOrTwo)> like IFooModule;
        e[10]: <"Compound"+string(1+intuniform(0,1))> like IFooModule;
        //FIXME f[2]: <"Compound"+string(index)> like IFooModule; ==> "index not allowed here"
        //FIXME g[5]: <index%2==0 ? "Compound1" : "Compound2"> like IFooModule;  ==> "parse error", but with parens it's OK!
        //FIXME h[5]: <(index%2==0 ? "Compound1" : "Compound2")> like IFooModule; ==> "index not allowed here"
        dump: Dump;
}

%exitcode: 0

%contains: stdout
TBD

