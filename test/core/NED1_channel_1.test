%description:
Tests that NED predefined channels really affect connection properties.

%file: test.ned

import ned.*;

channel Conn0 extends cBasicChannel
{
}

channel Conn1 extends cBasicChannel
{
    parameters:
        delay = 0.004;
}

channel Conn2 extends cBasicChannel
{
    parameters:
        error = 0.001;
}

channel Conn3 extends cBasicChannel
{
    parameters:
        datarate = 64000;
}

channel Conn4 extends cBasicChannel
{
    parameters:
        delay = 0.004;
        error = 0.001;
}

channel Conn5 extends cBasicChannel
{
    parameters:
        delay = 0.004;
        datarate = 64000;
}

channel Conn6 extends cBasicChannel
{
    parameters:
        error = 0.001;
        datarate = 64000;
}

channel Conn7 extends cBasicChannel
{
    parameters:
        delay = 0.004;
        error = 0.001;
        datarate = 64000;
}

simple Gen
{
    gates:
        output out[];
}

simple Sink
{
    gates:
        input in[];
}

network Test
{
    submodules:
        gen: Gen {
            gates:
                out[8];
        }
        sink: Sink {
            gates:
                in[8];
        }
    connections:
        gen.out[0] --> Conn0 --> sink.in[0];
        gen.out[1] --> Conn1 --> sink.in[1];
        gen.out[2] --> Conn2 --> sink.in[2];
        gen.out[3] --> Conn3 --> sink.in[3];
        gen.out[4] --> Conn4 --> sink.in[4];
        gen.out[5] --> Conn5 --> sink.in[5];
        gen.out[6] --> Conn6 --> sink.in[6];
        gen.out[7] --> Conn7 --> sink.in[7];
}

%file: test.cc

#include <omnetpp.h>

class Gen : public cSimpleModule
{
  public:
    Gen() : cSimpleModule(16384) { }
    virtual void activity();
};

Define_Module(Gen);

void Gen::activity()
{
    for (int i=0; i<gateSize("out"); i++)
    {
        ev << i << ":";
        cGate *g = gate("out",i);
        cChannel *ch = g->channel();
        if (ch)
        {
            cBasicChannel *sch = check_and_cast<cBasicChannel *>(ch);
            if (sch->delay() != 0)  ev << "delay=" << sch->delay() << ":";
            if (sch->error())  ev << "error=" << sch->error() << ":";
            if (sch->datarate())  ev << "datarate=" << sch->datarate() << ":";
        }
        ev << endl;
    }
}

class Sink : public cSimpleModule
{
  public:
    virtual void handleMessage(cMessage *msg);
};

Define_Module(Sink);

void Sink::handleMessage(cMessage *msg)
{
    delete msg;
}

%contains: stdout
0:
1:delay=0.004:
2:error=0.001:
3:datarate=64000:
4:delay=0.004:error=0.001:
5:delay=0.004:datarate=64000:
6:error=0.001:datarate=64000:
7:delay=0.004:error=0.001:datarate=64000:

