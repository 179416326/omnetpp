%description:
Test literals in NED.

%file: {}.ned

simple {Simple}
   parameters:
      s1:string, s2:string,
      b1:bool, b2:bool,
      n3:numeric, n4:numeric, n5:numeric,
      nc3:numeric const, nc4:numeric const, nc5:numeric const;
endsimple

network {network}: {Simple}
   parameters:
      s1 = "hello",
      s2 = "",

      b1 = true,
      b2 = false,

      n3 = 5,
      n4 = 3.1415,
      n5 = 6.01e23,

      nc3 = 5,
      nc4 = 3.1415,
      nc5 = 6.01e23;

endnetwork

%file: {}.cc

#include <omnetpp.h>

class {Simple} : public cSimpleModule
{
  public:
    {Simple}() : cSimpleModule(16384) { }
    virtual void activity();
};

Define_Module({Simple});

void {Simple}::activity()
{
    for (int i=0; i<params(); i++)
    {
        ev << cPar::typeName(par(i).type()) << " " << par(i).name() << "=";
        switch (par(i).type()) {
          case cPar::STRING: ev << par(i).stringValue(); break;
          case cPar::LONG:   ev << par(i).longValue(); break;
          case cPar::DOUBLE: ev << par(i).doubleValue(); break;
          case cPar::BOOL:   ev << (par(i).boolValue() ? "true" : "false"); break;
        }
        ev << "/" << par(i).toString() << endl;
    }
}

%contains-regex: stdout
string s1=hello/"hello"
string s2=/""
bool b1=true/true
bool b2=false/false
double n3=5/5
double n4=3\.1415/3\.1415
double n5=6\.0?1e\+023/6.01e\+0?23
double nc3=5/5
double nc4=3\.1415/3\.1415
double nc5=6\.01e\+0?23/6\.01e\+0?23

