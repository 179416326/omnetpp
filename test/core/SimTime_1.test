%description:
Tests for SimTime.
XXX split to several tests? to be revised

%activity:
   // check scaling
   for (int i=-18; i<=0; i++)
   {
       SimTime::setScaleExp(i);

       char *u="";
       if (SimTime::scaleExp()==SimTime::SCALEEXP_S)  u =  "s";
       if (SimTime::scaleExp()==SimTime::SCALEEXP_MS) u = "ms";
       if (SimTime::scaleExp()==SimTime::SCALEEXP_US) u = "us";
       if (SimTime::scaleExp()==SimTime::SCALEEXP_NS) u = "ns";
       if (SimTime::scaleExp()==SimTime::SCALEEXP_PS) u = "ps";
       if (SimTime::scaleExp()==SimTime::SCALEEXP_FS) u = "fs";

       ev.printf("%d: scale=%I64d %s\n", i, SimTime::scale(), u);
   }

   SimTime::setScaleExp(SimTime::SCALEEXP_NS);
   ev.printf("using nanosecond precision: scale=%I64d\n", SimTime::scale());

   SimTime t, t2, tmp;

   // see if representation of powers of 10 is accurate
#define P(x) {t=(x); ev << #x << " -> " << t << "\n";}
   P(1e-15); P(1e-14); P(1e-13); P(1e-12); P(1e-11); P(1e-10); P(1e-9);
   P(1e-8); P(1e-7); P(1e-6); P(1e-5); P(1e-4); P(1e-3); P(1e-2); P(1e0);
   P(1e1); P(1e2); P(1e3); P(1e4); P(1e5); P(1e6); P(1e7); P(1e8); P(1e9);
   P(1e10); P(1e11); P(1e12); P(1e13); P(1e14); P(1e15); P(1e16); P(1e17);
   P(1e18); P(1e19); P(1e20);
#undef P

   // basic arithmetic
#define P(x) {ev << #x << " -> " << (x) << "\n";}
   t=1;
   t2=1.0/3.0;
   P(t);
   P(t2);

   P(t+0.1);
   P(t-0.1);
   P(0.1+t);
   P(0.1-t);

   P(t+t2);
   P(t-t2);

   P(t*3);
   P(t/3);
   P(3*t);
#undef P

   // assignments
#define P(x) {t=1; t2=1.0/3.0; tmp=(x); ev << #x << " -> " << tmp << ", t=" << t << "\n";}
   P(t=5);
   P(t=t2);

   P(t+=0.1);
   P(t-=0.1);

   P(t+=t2);
   P(t-=t2);

   P(t*=3);
   P(t/=3);
#undef P

   // comparison
#define P(x) {ev << #x << " -> " << (x) << "\n";}
   t=1;
   t2=1.0/3.0;
   P(t==1);
   P(t!=1);
   P(t==2);
   P(t!=2);
   P(t==t2);
   P(t!=t2);

   P(t<1);
   P(t<=1);
   P(t>1);
   P(t>=1);

   P(t<t);
   P(t<=t);
   P(t>t);
   P(t>=t);

   P(t<t2);
   P(t<=t2);
   P(t>t2);
   P(t>=t2);

   ev << ".\n";
%contains: stdout
-18: scale=1000000000000000000
-17: scale=100000000000000000
-16: scale=10000000000000000
-15: scale=1000000000000000 fs
-14: scale=100000000000000
-13: scale=10000000000000
-12: scale=1000000000000 ps
-11: scale=100000000000
-10: scale=10000000000
-9: scale=1000000000 ns
-8: scale=100000000
-7: scale=10000000
-6: scale=1000000 us
-5: scale=100000
-4: scale=10000
-3: scale=1000 ms
-2: scale=100
-1: scale=10
0: scale=1 s
using nanosecond precision: scale=1000000000
1e-15 -> 0 (raw:0)
1e-14 -> 0 (raw:0)
1e-13 -> 0 (raw:0)
1e-12 -> 0 (raw:0)
1e-11 -> 0 (raw:0)
1e-10 -> 0 (raw:0)
1e-9 -> 1e-009 (raw:1)
1e-8 -> 1e-008 (raw:10)
1e-7 -> 1e-007 (raw:100)
1e-6 -> 1e-006 (raw:1000)
1e-5 -> 1e-005 (raw:10000)
1e-4 -> 0.0001 (raw:100000)
1e-3 -> 0.001 (raw:1000000)
1e-2 -> 0.01 (raw:10000000)
1e0 -> 1 (raw:1000000000)
1e1 -> 10 (raw:10000000000)
1e2 -> 100 (raw:100000000000)
1e3 -> 1000 (raw:1000000000000)
1e4 -> 10000 (raw:10000000000000)
1e5 -> 100000 (raw:100000000000000)
1e6 -> 1e+006 (raw:1000000000000000)
1e7 -> 1e+007 (raw:10000000000000000)
1e8 -> 1e+008 (raw:100000000000000000)
1e9 -> 1e+009 (raw:1000000000000000000)
1e10 -> -9.22337e+009 (raw:-9223372036854775808)
1e11 -> -9.22337e+009 (raw:-9223372036854775808)
1e12 -> -9.22337e+009 (raw:-9223372036854775808)
1e13 -> -9.22337e+009 (raw:-9223372036854775808)
1e14 -> -9.22337e+009 (raw:-9223372036854775808)
1e15 -> -9.22337e+009 (raw:-9223372036854775808)
1e16 -> -9.22337e+009 (raw:-9223372036854775808)
1e17 -> -9.22337e+009 (raw:-9223372036854775808)
1e18 -> -9.22337e+009 (raw:-9223372036854775808)
1e19 -> -9.22337e+009 (raw:-9223372036854775808)
1e20 -> -9.22337e+009 (raw:-9223372036854775808)
t -> 1 (raw:1000000000)
t2 -> 0.333333 (raw:333333333)
t+0.1 -> 1.1 (raw:1100000000)
t-0.1 -> 0.9 (raw:900000000)
0.1+t -> 1.1 (raw:1100000000)
0.1-t -> -0.9 (raw:-900000000)
t+t2 -> 1.33333 (raw:1333333333)
t-t2 -> 0.666667 (raw:666666667)
t*3 -> 3 (raw:3000000000)
t/3 -> 0.333333 (raw:333333333)
3*t -> 3 (raw:3000000000)
t=5 -> 5 (raw:5000000000), t=5 (raw:5000000000)
t=t2 -> 0.333333 (raw:333333333), t=0.333333 (raw:333333333)
t+=0.1 -> 1.1 (raw:1100000000), t=1.1 (raw:1100000000)
t-=0.1 -> 0.9 (raw:900000000), t=0.9 (raw:900000000)
t+=t2 -> 1.33333 (raw:1333333333), t=1.33333 (raw:1333333333)
t-=t2 -> 0.666667 (raw:666666667), t=0.666667 (raw:666666667)
t*=3 -> 3 (raw:3000000000), t=3 (raw:3000000000)
t/=3 -> 0.333333 (raw:333333333), t=0.333333 (raw:333333333)
t==1 -> 1
t!=1 -> 0
t==2 -> 0
t!=2 -> 1
t==t2 -> 0
t!=t2 -> 1
t<1 -> 0
t<=1 -> 1
t>1 -> 0
t>=1 -> 1
t<t -> 0
t<=t -> 1
t>t -> 0
t>=t -> 1
t<t2 -> 0
t<=t2 -> 0
t>t2 -> 1
t>=t2 -> 1
.

