%description:
Test cHasher, the class for calculating simulation fingerprints.

global:

int randint32()
{
    return intuniform(0,65535) | (intuniform(0,65535) << 16);
}

int64 randint64()
{
    return (int64)randint32() | ((int64)randint32() << 32);
}

%activity:
cHasher hasher;

#define HASH(n,type,expr) \
    { \
        cHasher tmp; \
        for (int i=0; i<n; i++) {type x = expr; tmp.add(x); hasher.add(x); } \
        ev << #type << ": " << tmp.str() << "\n"; \
    }

ev << "rng start: " << intrand(1000000) << "\n";

// signed integers
HASH(100, char,  intuniform(-128,127));
HASH(100, short, intuniform(-32768, 32767));
HASH(100, int,   (int)floor(0.9*(dblrand()-0.5)*pow(2.0,32)));
HASH(100, long,  (long)floor(0.9*(dblrand()-0.5)*pow(2.0,32)));
HASH(100, int64, (int64)floor(0.9*(dblrand()-0.5)*pow(2.0,64)));

// unsigned integers
HASH(100, unsigned short, intuniform(-32768, 32767));
HASH(100, unsigned int,   (unsigned int)floor(0.9*dblrand()*pow(2.0,32)));
HASH(100, unsigned long,  (unsigned long)floor(0.9*dblrand()*pow(2.0,32)));
HASH(100, uint64,         (uint64)floor(0.9*dblrand()*pow(2.0,64)));

// double
HASH(100, double, (dblrand()-0.5)*2e100);

// string
HASH(1, const char *, "");
HASH(1, const char *, "H");
HASH(1, const char *, "He");
HASH(1, const char *, "Hel");
HASH(1, const char *, "Hell");
HASH(1, const char *, "Hello");
HASH(1, const char *, "Hello ");
HASH(1, const char *, "Hello W");
HASH(1, const char *, "Hello Wo");
HASH(1, const char *, "Hello Worl");
HASH(1, const char *, "Hello World");
HASH(1, const char *, "\x80\xcc\xff");

//TODO add(const char *s, size_t len)

ev << "cumulative: " << hasher.str() << "\n";

ev << ".\n";

%contains: stdout
rng start: 985772
char: ca08-9f13
short: 4f4f-727f
int: cf06-5fea
long: 0a04-13eb
int64: f300-c996
unsigned short: c853-4518
unsigned int: 236b-c5ca
unsigned long: 25b7-99d4
uint64: b41d-ecb2
double: f7db-bb17
const char *: 0000-0000
const char *: 0000-0048
const char *: 0000-6548
const char *: 006c-6548
const char *: d8d8-ca90
const char *: d8d8-caff
const char *: d8d8-eaff
const char *: d88f-eaff
const char *: 6f1f-d5ff
const char *: 6f1f-b98d
const char *: 6f7b-b98d
const char *: ffff-ff80
cumulative: 3178-a6d0
.

