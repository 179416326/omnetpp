#
# This file is included by all Makefile.vc's. It contains flags and settings
# for compiling with MSVC. You are free to edit the settings in here.
#

#
# Base directories
#
# Edit these variables!
#
# Use forward slashes ('/') in the dir names, not backslashes ('\')!
# Don't use relative directories!
# Directory names with spaces may also cause problems, it's better to use
# short file names (e.g. 'C:/PROGRA~1' instead of 'C:/Program files').
#
OMNETPP_ROOT=$(OMNETPP_ROOT:\=/)

#
# Choose build mode. The default is "debug" for models.
#
#MODE=debug
#MODE=release

#
# If you have the external dependencies (Tcl/Tk, LibXML, MPI, etc) under a
# common Unix-like directory tree (<dir>/include, <dir>/lib, etc.), you
# can specify it here as OPT_DIR, thereby simplifying the rest of this
# config file (i.e. other variables can simply refer to $(OPT_DIR)).
# This is completely optional -- OPT_DIR is not referenced outside this file.
#
OPT_DIR=$(OMNETPP_ROOT:\=/)/msys/usr
#OPT_DIR=$(TOOLS_DIR:\=/)/msys

#
# Directory and version of Tcl/Tk, for example "8.6".
# At least Tcl/Tk 8.5 is required.
#
#TK_DIR=$(TOOLS_DIR:\=/)/Tcl-8.6.0
TK_DIR=$(OPT_DIR:\=/)/../mingw32
TK_VER=8.6

#
# MPI directory. MPI is only needed for parallel distributed execution.
# Leave empty if you don't have MPI. We recommend DeinoMPI
#
#MPI_DIR=$(TOOLS_DIR:\=/)/mpi
#MPI_DIR=$(OPT_DIR:\=/)
MPI_DIR=

#
# Choice of XML parser. Possible choices: libxml, expat or none.
# Preferred one is libxml, at least 2.6.0 (expat cannot perform DTD validation
# and default attribute completion.)
# If set to 'none', nedtool will compile but won't support XML input,
# and NED parameters of type xml cannot be used.
#
XMLPARSER=libxml
#XMLPARSER=expat
#XMLPARSER=none

#
# Location of Expat (only used if XMLPARSER=expat, see above)
#
#EXPAT_DIR=$(TOOLS_DIR:\=/)/expat-1.95.8
EXPAT_DIR=$(OPT_DIR:\=/)

#
# Location of LibXML2 and its supporting library ICONV (only used if XMLPARSER=libxml)
#
#ICONV_DIR=$(TOOLS_DIR:\=/)/iconv-1.9.1.win32
#LIBXML_DIR=$(TOOLS_DIR:\=/)/libxml2-2.6.20.win32
ICONV_DIR=$(OPT_DIR:\=/)/../mingw32
LIBXML_DIR=$(OPT_DIR:\=/)

#
# Directory of various tools
#

# Perl: needed by opp_makedep, opp_msgc, opp_neddoc, opp_test etc.
PERL=perl.exe
DOXYGEN_DIR=$(TOOLS_DIR)/doxygen

#
# GNU Bison and Flex. Bison 2.0+ is required, 1.x versions will not work!
#
#YACC=$(TOOLS_DIR:\=/)/bison-2.1/bin/bison.exe
#LEX=$(TOOLS_DIR:\=/)/UnxUtils/usr/local/wbin/flex.exe
YACC=$(OPT_DIR:\=/)/bin/bison.exe
LEX=$(OPT_DIR:\=/)/bin/flex.exe

#
# WinPCap. For INET framework SCTP module.
#
PCAP_DIR=$(TOOLS_DIR)/WpdPack

#
# Pthreads library; only needed for the UI native library.
#
#PTHREADS_DIR=$(TOOLS_DIR)/pthreads-2.8.0
#USE_PTHREADS_STATIC_LIB=yes

#
# If you don't want to build some of the components below, substitute
# missing-dependency.
#
TKENV_IF_POSSIBLE=tkenv
JNILIBS_IF_POSSIBLE=jnilibs

#
# It is possible to have the Tcl files embedded into the compiled OMNeT++
# libraries and executables. This can be useful if you want to ship
# self-contained standalone executables which do not rely on external
# Tcl scripts.
#
# This option is available at present for Tkenv.
# Set the following variable to "yes" to enable embedding Tcl files.
#
EMBED_TCL_CODE=yes

#
# It is possible to compile Tkenv as a Windows GUI app (as opposed to
# console app). Set the following variable to "yes" to enable that.
#
USE_WINMAIN=yes

#
# Set to "yes" to enable simulation executables to load NED files dynamically.
#
WITH_NETBUILDER=yes

#
# Set to "yes" to enable the parallel distributed simulation feature.
#
WITH_PARSIM=yes

#
# Set to "yes" to enable SystemC support. (Available only in the commecial version (OMNEST))
#
SYSTEMC=yes

#==============================================================================
#======!!!         Try not to change anything below this line       !!!======
#==============================================================================

# check if OMNETPP_ROOT correctly set

!if !exist($(OMNETPP_ROOT)/configuser.vc)
!error OMNETPP_ROOT is not set correctly in configuser.vc
!endif

#
# Make "debug" the default mode
#
!ifndef MODE
MODE=debug
!endif

#
# Choose between debug and release libraries here
#
!if "$(MODE)"=="debug"
CFLAGS=$(CFLAGS_DEBUG)
LDFLAGS=$(LDFLAGS_DEBUG)
D=d
!else
CFLAGS=$(CFLAGS_RELEASE)
LDFLAGS=$(LDFLAGS_RELEASE)
D=
!endif

#
# Control verbosity. Specifiying V=1 will make the build output verbose. You can use:
# $(Q) to hide commands only in quiet mode
# $(qecho) to print out something only in quite mode
# $(vecho) to print out something only in verbose mode
#
!if "$(V)"=="1"
Q=
vecho=@echo
qecho=@true
!else
Q=@
vecho=@true
qecho=@echo
!endif


#
# Other directories & files based on the base dirs
#
OMNETPP_SRC_DIR=$(OMNETPP_ROOT)/src
OMNETPP_UI_DIR=$(OMNETPP_ROOT)/ui
OMNETPP_SAMPLES_DIR=$(OMNETPP_ROOT)/samples
OMNETPP_TEST_DIR=$(OMNETPP_ROOT)/test
OMNETPP_DOC_DIR=$(OMNETPP_ROOT)/doc

OMNETPP_BIN_DIR=$(OMNETPP_ROOT)/bin
OMNETPP_INCL_DIR=$(OMNETPP_ROOT)/include
OMNETPP_LIB_DIR=$(OMNETPP_ROOT)/lib
OMNETPP_OUT_DIR=$(OMNETPP_ROOT)/out

OMNETPP_IMAGE_PATH=./images;./bitmaps;$(OMNETPP_ROOT)/images

OMNETPP_TKENV_DIR=$(OMNETPP_ROOT)/src/tkenv

#
# Libraries
#

TK_INCL_DIR=$(TK_DIR)/include
TK_LIB_DIR=$(TK_DIR)/lib
TCL_LIB=tcl$(TK_VER:.=).lib
TK_LIB=tk$(TK_VER:.=).lib
_TCL_LIBRARY=$(TK_DIR)/lib/tcl$(TK_VER)

!if "$(MPI_DIR)"!=""
HAVE_MPI=yes
!endif

SWIG = "$(TOOLS_DIR)\SWIGWIN-1.3.38\swig.exe"

JAVA_CFLAGS = /I "$(JAVA_HOME)/include" /I "$(JAVA_HOME)/include/win32"
JAVA_LIBS = /libpath:"$(JAVA_HOME)/lib" jvm.lib

EXPAT_CFLAGS=/I "$(EXPAT_DIR)/source/lib"
EXPAT_LIBS=libexpat.lib /libpath:"$(EXPAT_DIR)/libs"

LIBXML_CFLAGS=/I "$(ICONV_DIR)/include" /I "$(LIBXML_DIR)/include/libxml2"
LIBXML_LIBS=libxml2.lib iconv.lib wsock32.lib /libpath:"$(LIBXML_DIR)/lib" /libpath:"$(ICONV_DIR)/lib"

# compiler and linker switches necessary to build an app with Tcl/Tk, MPI, expat, etc.
TK_CFLAGS=/I "$(TK_INCL_DIR)"
TK_LIBS=$(TCL_LIB) $(TK_LIB) /libpath:"$(TK_LIB_DIR)"
MPI_CFLAGS=/I "$(MPI_DIR)/include"
MPI_LIBS=/libpath:"$(MPI_DIR)/lib" mpi.lib

!if "$(XMLPARSER)"=="expat"
XML_CFLAGS=$(EXPAT_CFLAGS)
XML_LIBS=$(EXPAT_LIBS)
!elseif "$(XMLPARSER)"=="libxml"
XML_CFLAGS=$(LIBXML_CFLAGS)
XML_LIBS=$(LIBXML_LIBS)
!elseif "$(XMLPARSER)"!="none"
!error XMLPARSER must be set to "expat", "libxml" or "none" in configuser.vc
!endif

PCAP_CFLAGS=/I "$(PCAP_DIR)/Include"
PCAP_LIBS=wpcap.lib /libpath:"$(PCAP_DIR)/Lib"

!if "$(PTHREADS_DIR)"!=""
PTHREAD_CFLAGS=/I "$(PTHREADS_DIR)/include"
!if "$(USE_PTHREADS_STATIC_LIB)"=="yes"
PTHREAD_LIBS=pthreadVC2static.lib wsock32.lib /libpath:"$(PTHREADS_DIR)/lib"
!else
PTHREAD_LIBS=pthreadVC2.lib wsock32.lib /libpath:"$(PTHREADS_DIR)/lib"
!endif
!endif

#
# Definitions for makemake-generated makefiles
#
CMDENV_LIBS = /include:_cmdenv_lib oppenvir$D.lib oppcmdenv$D.lib
TKENV_LIBS = /include:_tkenv_lib oppenvir$D.lib opptkenv$D.lib opplayout$D.lib
ALL_ENV_LIBS = $(CMDENV_LIBS) $(TKENV_LIBS)

KERNEL_LIBS = oppsim$D.lib

!if "$(WITH_NETBUILDER)"=="yes"
KERNEL_LIBS = $(KERNEL_LIBS) oppnedxml$D.lib
!endif

KERNEL_LIBS = $(KERNEL_LIBS) oppcommon$D.lib

# winsock is needed by libxml as well as the sockets sample simulation
SYS_LIBS = wsock32.lib

#
# Choose whether to build static libs or DLLs
#
!ifndef SHARED_LIBS
SHARED_LIBS=yes
!endif

!if "$(BUILDING_UILIBS)"=="yes"
SHARED_LIBS=no
OUTPUT_PREFIX=ui-
!endif

!if "$(SHARED_LIBS)"=="yes"
LIB_SUFFIX=.dll
!else #SHARED_LIBS=no

LIB_SUFFIX=.lib

TKENV_LIBS = $(TKENV_LIBS) $(TK_LIBS)

!if "$(WITH_NETBUILDER)"=="yes"
KERNEL_LIBS = $(KERNEL_LIBS) $(XML_LIBS)
!endif

!if "$(WITH_PARSIM)"=="yes" && "$(HAVE_MPI)"=="yes"
KERNEL_LIBS = $(KERNEL_LIBS) $(MPI_LIBS)
!endif

!endif #SHARED_LIBS=no

#
# Tools
#

# MSVC programs.
# Note that we use our linkall.cmd which is a wrapper around link.exe; this makes it
# possible to link with static libs containing simple modules and other dynamically
# registered compontents.
#
CXX=cl.exe
LINK=linkall.cmd
AR=lib.exe /nologo
SHLIB_LD=$(LINK) /dll
RC=rc.exe

# general options for the C++ compiler
CXXFLAGS=

# dependency generator (needs Perl!)
MAKEDEPEND=$(PERL) $(OMNETPP_ROOT)/src/utils/opp_makedep -Y --objsuffix .obj --objdirtree

# OMNeT++ tools
MSGC=$(OMNETPP_BIN_DIR)/opp_msgc
REPLACE=$(OMNETPP_SRC_DIR)/utils/opp_replace
WISH=$(TK_DIR)/bin/wish$(TK_VER:.=).exe
DOXYGEN=$(DOXYGEN_DIR)/bin/doxygen

# flex puts an "#include <unistd.h>" line into the generated code, which we have to throw out
FIXFLEX=$(PERL:/=\) -i.bak -pe "s/^.include .unistd.h.*//g"

#
# Configuration
#

# Compiler switches (see MSDN for more info)
#   /MT,/MTd: use multithreaded C library (single-threaded not available on VC8.0+)
#   /MD,/MDd: same as /MT[d], but use DLL-based C libraries not static ones
#   /EHsc: synchronous exception handling, assume extern "C" funcs don't throw exceptions
#   /GR: enable RTTI
#   /FD: generate file dependencies
#   /Zm200: internal compiler memory allocation 200% (needed by some omnetpp lib sources)
#   /Od: disable optimizations (for debug code)
#   /O2: optimize for speed
#   /RTCs: stack frame runtime checking (Note: don't use /RTCu & /RTC1, as they cause a
#          problem in bison's boilerplate code (bison.simple, "uninitialized var 'yyval'")
#   /Zi: build program database (PDB file) which contains debug info
#   /w14996: enable deprecation warnings (_OPPDEPRECATED) by moving C4996 to warning level 1
#   /DNDEBUG: #defines NDEBUG (removes assert() from generated code)
# Linker switches:
#   /debug: build debug executable
#   /subsystem:console: build console-mode application (also works for GUI apps)
#   /opt:noref: keep functions and/or data that is never referenced (DOES NOT WORK!)
#       see http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=144087&SiteID=1&mode=1
#
CFLAGS_DEBUG=/nologo $(MOPTION)d /EHsc /GR /FD /Zm250 /Od /RTCs /Zi /w14996 /D_CRT_SECURE_NO_DEPRECATE
LDFLAGS_DEBUG=/nologo /subsystem:console /opt:noref /debug

CFLAGS_RELEASE=/nologo $(MOPTION) /EHsc /GR /FD /Zm250 /O2 /DNDEBUG /w14996 /D_CRT_SECURE_NO_DEPRECATE
LDFLAGS_RELEASE=/nologo /subsystem:console /opt:noref

!if "$(LIB_SUFFIX)"==".dll"
MOPTION=/MD
!else
MOPTION=/MT
!endif

HAVE_DLOPEN=0
VC_AUX_FILES=*.ilk *.idb *.pdb *.pch *.exp *.suo *.sln

!if "$(LIB_SUFFIX)"==".dll"
CFLAGS=$(CFLAGS) -DOMNETPPLIBS_IMPORT
!endif

!if "$(WITH_PARSIM)"=="yes"
CFLAGS=$(CFLAGS) /DWITH_PARSIM
!endif

!if "$(WITH_NETBUILDER)"=="yes"
CFLAGS=$(CFLAGS) /DWITH_NETBUILDER
!endif

CFLAGS=$(CFLAGS) -DXMLPARSER=$(XMLPARSER)

!if "$(PTHREADS_DIR)"!=""
HAVE_PTHREADS=yes
!if "$(USE_PTHREADS_STATIC_LIB)"=="yes"
PTHREAD_CFLAGS=$(PTHREAD_CFLAGS) /DPTW32_STATIC_LIB
!endif
!endif

#
# The Visual C++ compiler used: "vc71", "vc80", etc. This selects which set of
# libraries simulation models will be linked with: linker path will be set as
# $(OMNETPP_ROOT)/lib/$(TOOLCHAIN_NAME)-debug or -release.
#
# We autodetect the compiler version by running cl.exe and parsing the printed "logo".
# Absolute path to msvcver.pl can be omitted if the script is already in the bin/
# directory.
#

!if exist($(OMNETPP_BIN_DIR)/opp_msvcver.pl)
CLVER_PROG=perl $(OMNETPP_BIN_DIR)/opp_msvcver.pl $(CXX)
!else
CLVER_PROG=perl $(OMNETPP_SRC_DIR)/utils/opp_msvcver.pl $(CXX)
!endif

# !if exist($(OMNETPP_BIN_DIR)/opp_pefileversion.exe)
# CLVER_PROG=$(OMNETPP_BIN_DIR)/opp_pefileversion.exe $(CXX)
# !else
# CLVER_PROG=$(OMNETPP_SRC_DIR)/utils/opp_pefileversion.exe $(CXX)
# !endif

!if "$(TOOLCHAIN_NAME)"!=""
# respect user's setting
!elseif [$(CLVER_PROG)] == 18
TOOLCHAIN_NAME = vc120
!elseif [$(CLVER_PROG)] == 17
TOOLCHAIN_NAME = vc110
!elseif [$(CLVER_PROG)] == 16
TOOLCHAIN_NAME = vc100
!elseif [$(CLVER_PROG)] == -1
!error Visual C++ compiler $(CXX) not found (not in the PATH?)
!else
!error Unsupported Visual C++ compiler version (10.x, 11.x and 12.x supported)
!endif

#
# Configname determines where (in which subdirectory of out/)
# makemake-generated makefiles create object files and other
# build artifacts.
#
# Note: We use msvc-$(MODE) instead of $(TOOLCHAIN_NAME)-$(MODE) to
# be consistent with the IDE's default.
#
!ifndef CONFIGNAME
CONFIGNAME=msvc-$(MODE)
!endif

# Misc settings
#CFLAGS = $(CFLAGS) -DUSE_NAMESPACE
#CFLAGS = $(CFLAGS) -DUSE_DOUBLE_SIMTIME
