//-----------------------------------------
//
// Generated by NEDC version 
// date:	Fri Jun 02 18:59:11 2000
//
// Input file:	$$MODULE_NAME$$.ned
// Output file:	$$MODULE_NAME$$_n.cpp
//-----------------------------------------


#include <math.h>
#include "omnetpp.h"

#define check_error() \
    {if (!simulation.ok()) return;}
#define check_memory() \
    {if (memoryIsLow()) {opp_error(eNOMEM); return;}}
#define check_module_count(num, mod, parentmod) \
    {if ((int)num<0) {opp_error("Negative module vector size %s[%d] in compound module %s", \
                          mod,(int)num,parentmod);return;}}
#define check_gate_count(num, mod, gate, parentmod) \
    {if ((int)num<0) {opp_error("Negative gate vector size %s.%s[%d] in compound module %s", \
                          mod,gate,(int)num,parentmod);return;}}
#define check_loop_bounds(lower, upper, parentmod) \
    {if ((int)lower<0) \
        {opp_error("Bad loop bounds (%d..%d) in compound module %s", \
                 (int)lower,(int)upper,parentmod);return;}}
#define check_module_index(index,modvar,modname,parentmod) \
    {if (index<0 || index>=modvar[0]->size()) {opp_error("Bad submodule index %s[%d] in compound module %s", \
          modname,(int)index,parentmod);return;}}
#define check_channel_params(delay, err, channel) \
    {if ((double)delay<0.0) \
        {opp_error("Negative delay value %lf in channel %s",(double)delay,channel);return;} \
     if ((double)err<0.0 || (double)err>1.0) \
        {opp_error("Incorrect error value %lf in channel %s",(double)err,channel);return;}}
#define check_modtype(modtype, modname) \
    {if ((modtype)==NULL) {opp_error("Simple module type definition %s not found", \
                                     modname);return;}}
#define check_function(funcptr, funcname) \
    {if ((funcptr)==NULL) {opp_error("Function %s not found", \
                                     funcname);return;}}
#define check_gate(gateindex, modname, gatename) \
    {if ((int)gateindex==-1) {opp_error("Gate %s.%s not found",modname,gatename);return;}}
#define check_anc_param(ptr,parname,compoundmod) \
    {if ((ptr)==NULL) {opp_error("Unknown ancestor parameter named %s in compound module %s", \
                                parname,compoundmod);return;}}
#define check_param(ptr,parname) \
    {if ((ptr)==NULL) {opp_error("Unknown parameter named %s", \
                                parname);return;}}
#ifndef __cplusplus
#  error Compile as C++!
#endif
#ifdef __BORLANDC__
#  if !defined(__FLAT__) && !defined(__LARGE__)
#    error Compile as 16-bit LARGE model or 32-bit DPMI!
#  endif
#endif

// Disable warnings about unused variables:
#ifdef _MSC_VER
#  pragma warning(disable:4101)
#endif
#ifdef __BORLANDC__
#  pragma warn -waus
#  pragma warn -wuse
#endif
// for GCC, seemingly there's no way to emulate the -Wunused command-line
// flag from a source file...

//--------------------------------------------
// Following code generated from: $$MODULE_NAME$$.ned
//--------------------------------------------

