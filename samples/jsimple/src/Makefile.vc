#
# OMNeT++/OMNEST Makefile for jsimple.exe
#
# This file was generated with the command:
#  opp_makemake -f --nmake --deep -O out -IC:\Workspace\Tools\jdk1.5.0_06/include
#

# Name of target to be created (-o option)
TARGET = jsimple.exe

# User interface (uncomment one) (-u option)
USERIF_LIBS = $(ALL_ENV_LIBS) # that is, $(TKENV_LIBS) $(CMDENV_LIBS)
#USERIF_LIBS = $(CMDENV_LIBS)
#USERIF_LIBS = $(TKENV_LIBS)

# C++ include paths (with -I)
INCLUDE_PATH = -IC:/Workspace/Tools/jdk1.5.0_06/include -I.

# Additional object and library files to link with
EXTRA_OBJS =

# Additional libraries (-L, -l options)
LIBS =

# Output directory
O = ../out/$(CONFIGNAME)/src

# Object files for local .cc and .msg files
OBJS = $O/JMessage.obj $O/JSimpleModule.obj $O/JUtil.obj

# Message files
MSGFILES =

# Other makefile variables (-K)

#------------------------------------------------------------------------------

# Pull in OMNeT++ configuration (Makefile.inc or configuser.vc)
!if "$(OMNETPP_CONFIGFILE)"!=""
CONFIGFILE = $(OMNETPP_CONFIGFILE)
!elseif "$(OMNETPP_ROOT)"!=""
CONFIGFILE = $(OMNETPP_ROOT)/configuser.vc
!else
CONFIGFILE = C:\Workspace\Repository\trunk\omnetpp\configuser.vc
!endif

!if !exist($(CONFIGFILE))
!error '$(CONFIGFILE)' does not exist -- set OMNETPP_ROOT or OMNETPP_CONFIGFILE to point to configuser.vc. From the IDE, set the OMNeT++ install location on the Window | Preferences dialog.
!endif

!include $(CONFIGFILE)

# Simulation kernel and user interface libraries
OMNETPP_LIB_SUBDIR = $(OMNETPP_LIB_DIR)/$(TOOLCHAIN_NAME)
OMNETPP_LIBS = /libpath:"$(OMNETPP_LIB_SUBDIR)" /libpath:"$(OMNETPP_LIB_DIR)" $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS = $(CFLAGS)  $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
MSGCOPTS = $(INCLUDE_PATH)

#------------------------------------------------------------------------------
# User-supplied makefile fragment(s)
# >>>
# inserted from file 'makefrag.vc':
INCLUDE_PATH=$(INCLUDE_PATH) -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/win32
LIBS=$(LIBS) /libpath:$(JAVA_HOME)/lib jvm.lib
SWIG="$(TOOLS_DIR)\swigwin-1.3.31\swig.exe"
JAVAC=$(JAVA_HOME)\bin\javac.exe
JAR=$(JAVA_HOME)\bin\jar.exe
PERL="$(TOOLS_DIR)\Perl\bin\perl.exe"

OUTDIR   = ..\out
JAVAPKG  = org.omnetpp.simkernel
JAVADIR  = $(OUTDIR)\java\$(JAVAPKG:.=\)
CLASSDIR = $(OUTDIR)\classes
DISTDIR  = $(OUTDIR)\distrib

EXTRA_OBJS = $(OUTDIR)\SimkernelJNI_registerNatives.obj $(OUTDIR)\simkernel_wrap.obj

DIST_SRC_FILES = \
  JSimpleModule.cc \
  JSimpleModule.h \
  JSimpleModule.ned \
  JMessage.cc \
  JMessage.h \
  JUtil.cc \
  JUtil.h \
  makefrag.vc \
  Simkernel.i \
  Reflection.i \
  PlainMemoryManagement.i \
  registernatives.pl \

# the following files are not distributed by default
EXPERIMENTAL_SRC_FILES = \
  memorymgmt_msg_one2one.i \
  patchcastfrom.pl \
  patchownership.pl \
  ProxyObjectMap.java.in

all: $(TARGET) javafiles dist

$(OUTDIR)\simkernel_wrap.cc $(OUTDIR)\SimkernelJNI_registerNatives.cc : simkernel.i Makefile.vc $(OMNETPP_ROOT)/include/*.h  # and many oher things
	-mkdir $(OUTDIR)\java >nul 2>nul
	-mkdir $(OUTDIR)\java\org >nul 2>nul
	-mkdir $(OUTDIR)\java\org\omnetpp >nul 2>nul
	-mkdir $(OUTDIR)\java\org\omnetpp\simkernel >nul 2>nul
	-del $(JAVADIR)\*.java >nul
	$(SWIG) -c++ -java -package $(JAVAPKG) -I$(OMNETPP_ROOT)/include -I$(OMNETPP_ROOT)/src/envir -I$(OMNETPP_ROOT) -outdir $(JAVADIR) -o $(OUTDIR)\simkernel_wrap.cc simkernel.i
	$(PERL) -i.bak -pe "s/JNIEXPORT +//g" $(OUTDIR)\simkernel_wrap.cc
	$(PERL) -i.bak -pe "s/JNICALL +//g" $(OUTDIR)\simkernel_wrap.cc
	$(PERL) -i.bak -pe "s/jenv;/jenv; LOG_JNI_CALL();/g" $(OUTDIR)\simkernel_wrap.cc
	$(PERL) registernatives.pl $(JAVADIR)/SimkernelJNI.java $(OUTDIR)
	@rem $(PERL) patchownership.pl $(JAVADIR)
	@rem $(PERL) patchcastfrom.pl $(JAVADIR)

$(OUTDIR)\SimkernelJNI_registerNatives.obj: $(OUTDIR)\SimkernelJNI_registerNatives.cc
	$(CXX) -c $(COPTS) /Fo"$(OUTDIR)\SimkernelJNI_registerNatives.obj" /Tp $(OUTDIR)\SimkernelJNI_registerNatives.cc

$(OUTDIR)\simkernel_wrap.obj: $(OUTDIR)\simkernel_wrap.cc
	$(CXX) -c $(COPTS) /Fo"$(OUTDIR)\simkernel_wrap.obj" /Tp $(OUTDIR)\simkernel_wrap.cc

javafiles:
	@rem copy ProxyObjectMap.java.in java\org\omnetpp\simkernel\ProxyObjectMap.java
	dir /b/s $(JAVADIR)\*.java >listfile.tmp
	-rd /s/q $(CLASSDIR) 2>nul
	mkdir $(CLASSDIR) >nul
	$(JAVAC) -sourcepath $(OUTDIR)\java -d $(CLASSDIR) @listfile.tmp
	-del listfile.tmp >nul

dist: $(TARGET) javafiles
	-mkdir $(DISTDIR) >nul 2>nul
	$(JAR) cvf $(DISTDIR)/simkernel.jar -C $(CLASSDIR) org
	$(JAR) cvf $(DISTDIR)/simkernel-src.jar -C $(OUTDIR)\java org
	$(JAR) cvfM $(DISTDIR)/src.zip $(DIST_SRC_FILES)
	del *_m.*
	copy *.cc $(DISTDIR)
	copy *.h $(DISTDIR)
	copy JSimpleModule.ned $(DISTDIR)

# <<<
#------------------------------------------------------------------------------

# Main target
all: $(TARGET)

$(TARGET) : $O/$(TARGET)
	copy $(O:/=\)\$(TARGET) .
	-copy $(O:/=\)\$(TARGET).manifest . 2>NUL

$O/$(TARGET): $(OBJS)  $(EXTRA_OBJS) Makefile.vc
	-@md $(O:/=\) 2>nul
	$(LINK) $(LDFLAGS) /out:$O/$(TARGET)  $(OBJS) $(EXTRA_OBJS) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS)

.SUFFIXES: .cc

{.}.cc{$O}.obj:
	-@md $(O:/=\) 2>nul
	$(CXX) -c $(COPTS) /Fo"$@" -Tp $<

{.}.cc{$O/.}.obj:
	-@md $(O:/=\)\. 2>nul
	$(CXX) -c $(COPTS) /Fo"$@" -Tp $<

msgheaders: $(MSGFILES:.msg=_m.h)

clean:
	-rmdir /s /q $(O:/=\) 2>nul
	-del $(VC_AUX_FILES) 2>nul
	-del $(TARGET) $(TARGET:.exe=.lib) $(TARGET:.exe=.dll) 2>nul
	-del .\*_m.cc .\*_m.h 2>nul

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -f Makefile.vc -P^$O/ -- $(MSG_CC_FILES)  ./*.cc

	if not "$(SUBMAKE_DIRS)"=="" for %%i in ( $(SUBMAKE_DIRS:/=\) ) do @pushd %%i && echo [depend in %%i] && nmake /nologo /f Makefile.vc depend && @popd || exit /b 1

makefiles:
	opp_makemake -f --nmake --deep -O out -IC:\Workspace\Tools\jdk1.5.0_06/include
	if not "$(SUBMAKE_DIRS)"=="" for %%i in ( $(SUBMAKE_DIRS:/=\) ) do @pushd %%i && echo [makemake in %%i] && nmake /nologo /f Makefile.vc makefiles && @popd || exit /b 1

# DO NOT DELETE THIS LINE -- make depend depends on it.
$O/JMessage.obj: JMessage.cc \
	JUtil.h \
	JMessage.h
$O/JSimpleModule.obj: JSimpleModule.cc \
	JUtil.h \
	JSimpleModule.h
$O/JUtil.obj: JUtil.cc \
	JUtil.h \
	JSimpleModule.h

