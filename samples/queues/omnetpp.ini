[General]
preload-ned-files=*.ned
ini-warnings = no
# The name below is optional, default is omnetpp.sca
output-scalar-file = fifo.sca
# The name below is optional, default is omnetpp.vec
output-vector-file = fifo.vec
debug-on-errors = true

[Cmdenv]
runs-to-execute = 1
express-mode = yes
# for non-express mode:
module-messages = yes
event-banners = yes
# for express mode:
status-frequency = 50000
performance-display = no

[Tkenv]
# Uncomment the line below to set up Run 1 automatically on startup
#default-run= 1
use-mainwindow = yes
print-banners = yes
slowexec-delay = 300ms

[Parameters]
FifoNet.gen.numMessages = 5000

[Run 1]
description = "a single queue"
network = FifoNet

FifoNet.numBuffers = 1
FifoNet.numCells = 100
FifoNet.gen.iaTime = exponential(3)
FifoNet.fifo[0].numInitJobs = 10;
#FifoNet.fifo[0].serviceTime = Erlang(100,200)
#FifoNet.fifo[0].serviceTime = deterministic(0.5)
FifoNet.fifo[0].serviceTime = exponential(2)
#This line will only be relevant in case you have more than one queue
FifoNet.fifo[*].serviceTime = exponential(2)

[Run 2]
description = "a closed queueing network (Ring)"
network = Ring

# Please mind that the Ring network does not contain an internal
# stop criterion. You have to stop it yourself.
Ring.numBuffers = 3
Ring.numCells = 100
Ring.fifo[*].numInitJobs = 20;
# Note the sequence in which the fifos get their service rate
Ring.fifo[0].serviceTime = exponential(3)
Ring.fifo[*].serviceTime = exponential(2)

[Run 3]
description = "five tandem queues"
network = FifoNet

FifoNet.numBuffers = 5
FifoNet.numCells = 100
FifoNet.gen.iaTime = exponential(3)
FifoNet.fifo[*].numInitJobs = 10;
FifoNet.fifo[0].serviceTime = exponential(2)
FifoNet.fifo[*].serviceTime = exponential(2)

[Run 4]
description = "Ring, with no. of queues as input"
network = Ring

#Ring.numBuffers = 3
Ring.numCells = 100
Ring.fifo[*].numInitJobs = 20;
Ring.fifo[0].serviceTime = exponential(3)
Ring.fifo[*].serviceTime = exponential(2)

