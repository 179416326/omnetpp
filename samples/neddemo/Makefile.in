#
#  Makefile for neddemo
#
#  ** This file was automatically generated by the command:
#  opp_makemake -f -m
#

# Name of target to be created (-o option)
TARGET = neddemo

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH=

# misc additional object and library files to link
EXTRA_OBJS=

# object files from other directories to link with
EXT_DIR_OBJS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------

NEDC=@NEDC@
MSGC=@MSGC@
CXX=@CXX@
CC=@CC@
AR=@AR@
SHLIB_LD=@SHLIB_LD@
MAKEDEPEND=@MAKEDEPEND@

CFLAGS=@CFLAGS@
NEDCFLAGS=@NEDCFLAGS@
LDFLAGS=@LDFLAGS@
EXE_SUFFIX=@EXE_SUFFIX@

WITH_PARSIM=@WITH_PARSIM@
WITH_NETBUILDER=@WITH_NETBUILDER@

OMNETPP_INCL_DIR=@OMNETPP_INCL_DIR@
OMNETPP_LIB_DIR=@OMNETPP_LIB_DIR@

TK_LIBS=@TK_LIBS@
MPI_LIBS=@MPI_LIBS@
XML_LIBS=@XML_LIBS@
SYS_LIBS=@SYS_LIBS@
SYS_LIBS_PURE=-lm $(shell $(CXX) -print-file-name=libstdc++.a)

# User interface libs
CMDENV_LIBS=-lenvir -lcmdenv
TKENV_LIBS=-lenvir -ltkenv $(TK_LIBS)

# Simulation kernel
KERNEL_LIBS=-lsim_std

ifeq ($(WITH_NETBUILDER),yes)
KERNEL_LIBS += -lnedxml $(XML_LIBS)
endif

ifeq ($(WITH_PARSIM),yes)
KERNEL_LIBS += $(MPI_LIBS)
endif

# Simulation kernel and user interface libraries
OMNETPP_LIBS=-L$(OMNETPP_LIB_DIR) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
NEDCOPTS=$(CFLAGS) $(NEDCFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)

#------------------------------------------------------------------------------

# subdirectories to recurse into
SUBDIRS= 

# object files in this directory
OBJS= binarytree_n.o chain_n.o fullgraph_n.o hexgrid_n.o mesh_n.o randomgraph_n.o star_n.o  node.o

#------------------------------------------------------------------------------

$(TARGET): $(OBJS) $(EXTRA_OBJS) Makefile
	$(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) $(OMNETPP_LIBS) -o $(TARGET)

purify: $(OBJS) $(EXTRA_OBJS) Makefile
	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

binarytree_n.o: binarytree_n.cc
	$(CXX) -c $(NEDCOPTS) binarytree_n.cc

binarytree_n.cc: binarytree.ned
	$(NEDC) $(INCLUDE_PATH) binarytree.ned

chain_n.o: chain_n.cc
	$(CXX) -c $(NEDCOPTS) chain_n.cc

chain_n.cc: chain.ned
	$(NEDC) $(INCLUDE_PATH) chain.ned

fullgraph_n.o: fullgraph_n.cc
	$(CXX) -c $(NEDCOPTS) fullgraph_n.cc

fullgraph_n.cc: fullgraph.ned
	$(NEDC) $(INCLUDE_PATH) fullgraph.ned

hexgrid_n.o: hexgrid_n.cc
	$(CXX) -c $(NEDCOPTS) hexgrid_n.cc

hexgrid_n.cc: hexgrid.ned
	$(NEDC) $(INCLUDE_PATH) hexgrid.ned

mesh_n.o: mesh_n.cc
	$(CXX) -c $(NEDCOPTS) mesh_n.cc

mesh_n.cc: mesh.ned
	$(NEDC) $(INCLUDE_PATH) mesh.ned

randomgraph_n.o: randomgraph_n.cc
	$(CXX) -c $(NEDCOPTS) randomgraph_n.cc

randomgraph_n.cc: randomgraph.ned
	$(NEDC) $(INCLUDE_PATH) randomgraph.ned

star_n.o: star_n.cc
	$(CXX) -c $(NEDCOPTS) star_n.cc

star_n.cc: star.ned
	$(NEDC) $(INCLUDE_PATH) star.ned

node.o: node.cc
	$(CXX) -c $(COPTS) node.cc


#doc: neddoc doxy

#neddoc:
#	opp_neddoc -a

#doxy: doxy.cfg
#	doxygen doxy.cfg

clean:
	rm -f *.o *_n.cc *_n.h *_m.cc *_m.h $(TARGET)$(EXE_SUFFIX)
	rm -f *.vec *.sca
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -- *.cc
	# $(MAKEDEPEND) $(INCLUDE_PATH) -fMakefile.in -- *.cc

re-makemake:
	opp_makemake -f    #recreate Makefile

re-makemake-m:
	opp_makemake -f -m    #recreate Makefile.in


# DO NOT DELETE THIS LINE -- make depend depends on it.
node.o: node.cc
