<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/resultfiles/routing/Net5SaturatedQueue-*.vec"/>
        <input pattern="/resultfiles/routing/Net5SaturatedQueue-*.sca"/>
    </inputs>
    <charts>
        <chart name="" type="MatplotlibChart">import results
import operations as ops
import numpy as np
import matplotlib.pyplot as plt


try:
    import seaborn as sbs
    sbs.set()
except:
    # this is optional
    pass 

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
    (attr:experiment(Net5SaturatedQueue) AND attr:replication(#0))
AND
    (name(txBytes:vector) OR name(rxBytes:vector))
AND
(
  module(Net5.rte[2].queue[3]) OR
  module(Net5.rte[2].queue[3])
)
"""

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression)
df = results.transform_results(df)

# You can perform any transformations on the data here

# ops.apply(df, ops.vector_mean, lambda r: 'rx' in r.name[4])
# ops.apply(df, ops.vector_sum)

# df = ops.apply(df, ops.vector_mean)
# df = ops.compute(df, ops.vector_mean)

# df = ops.apply(df, ops.vector_add, -2000, condition=lambda r: 'rx' in r.name[4])

# df = ops.apply(df, ops.vector_compare, 1337, less=-1, equal=10, greater=1)

print(df)


# df = ops.apply(df, ops.vector_timewinavg, 10)
# df = ops.compute(df, ops.vector_aggregator, "average")

df = ops.compute(df, ops.vector_merger)

"""
import traceback
try:
    avgt, avgv = ops.apply(df, ops.vector_aggregator, "count")
    mint, minv = ops.apply(df, ops.vector_aggregator, "minimum")
    maxt, maxv = ops.apply(df, ops.vector_aggregator, "maximum")
except:
    print(traceback.format_exc())

plt.plot(avgt, avgv, label="cnt")
plt.plot(mint, minv, label="min")
plt.plot(maxt, maxv, label="max")
"""

# df = ops.apply(df, ops.vector_crop, 75, 100)

# df = ops.apply(df, ops.vector_diffquot)
# df = ops.apply(df, ops.vector_difference)
# df = ops.apply(df, ops.vector_mean)

# df = ops.apply(df, ops.vector_divide_by, 2000)

# df = ops.compute(df, ops.vector_divtime)

# df = ops.apply(df, ops.vector_expression, "t * (y + t * 10)")

"""
df1 = ops.apply(df, ops.vector_integrate, "sample-hold")
df2 = ops.apply(df, ops.vector_integrate, "backward-sample-hold")
df3 = ops.apply(df, ops.vector_integrate, "linear")

df = df.append(df1)
df = df.append(df2)
df = df.append(df3)
"""

# df = ops.compute(df, ops.vector_lineartrend, 100)

"""
import traceback

try:
    mergedt, mergedv = ops.apply(df, ops.vector_merger)
except:
    print(traceback.format_exc())

plt.plot(mergedt, mergedv, label="merged")
"""

# # df = ops.apply(df, ops.vector_divide_by, -1)
# df = ops.apply(df, ops.vector_modulo, 1000)

# df = ops.compute(df, ops.vector_movingavg, 0.1)

# df = ops.compute(df, ops.vector_multiply_by, 0.1)

# df = ops.apply(df, ops.vector_removerepeats)

# df = ops.apply(df, ops.vector_slidingwinavg, 10)

# df = ops.apply(df, ops.vector_subtractfirstval)

# df = ops.apply(df, ops.vector_timeavg, "linear")

# df = ops.apply(df, ops.vector_timediff)

# df = ops.apply(df, ops.vector_timeshift, 100)

# df = ops.apply(df, ops.vector_timetoserial)

# df = ops.apply(df, ops.vector_timewinavg, 10)


# df = ops.apply(df, ops.vector_winavg, 100)

# print(df.iloc[0][('result','vecvalue')])

for i, r in df.iterrows():
    # print(r[('result', 'vecvalue')])
    plt.plot(r[('result', 'vectime')], r[('result', 'vecvalue')], label=r[('attr', 'title')] + " (" + r[('attr', 'unit')] + ")")


plt.legend()
#plt.grid()

plt.tight_layout()

# Finally, the results are plotted
# chart.plot_vectors(df)
</chart>
        <chart name="" type="LineChart">import results
import operations as ops
import numpy as np
import matplotlib.pyplot as plt


try:
    import seaborn as sbs
    sbs.set()
except:
    # this is optional
    pass 

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
    (attr:experiment(Net5SaturatedQueue) AND attr:replication(#0))
AND
    (name(txBytes:vector) OR name(rxBytes:vector))
AND
(
  module(Net5.rte[2].queue[3]) OR
  module(Net5.rte[2].queue[3])
)
"""

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression)
df = results.transform_results(df)

# You can perform any transformations on the data here

# ops.apply(df, ops.vector_mean, lambda r: 'rx' in r.name[4])
# ops.apply(df, ops.vector_sum)

# df = ops.apply(df, ops.vector_mean)
# df = ops.compute(df, ops.vector_mean)

# df = ops.apply(df, ops.vector_add, -2000, condition=lambda r: 'rx' in r.name[4])

# df = ops.apply(df, ops.vector_compare, 1337, less=-1, equal=10, greater=1)

print(df)


# df = ops.apply(df, ops.vector_timewinavg, 10)
# df = ops.compute(df, ops.vector_aggregator, "average")

df = ops.compute(df, ops.vector_merger)

"""
import traceback
try:
    avgt, avgv = ops.apply(df, ops.vector_aggregator, "count")
    mint, minv = ops.apply(df, ops.vector_aggregator, "minimum")
    maxt, maxv = ops.apply(df, ops.vector_aggregator, "maximum")
except:
    print(traceback.format_exc())

plt.plot(avgt, avgv, label="cnt")
plt.plot(mint, minv, label="min")
plt.plot(maxt, maxv, label="max")
"""

# df = ops.apply(df, ops.vector_crop, 75, 100)

# df = ops.apply(df, ops.vector_diffquot)
# df = ops.apply(df, ops.vector_difference)
# df = ops.apply(df, ops.vector_mean)

# df = ops.apply(df, ops.vector_divide_by, 2000)

# df = ops.compute(df, ops.vector_divtime)

# df = ops.apply(df, ops.vector_expression, "t * (y + t * 10)")

"""
df1 = ops.apply(df, ops.vector_integrate, "sample-hold")
df2 = ops.apply(df, ops.vector_integrate, "backward-sample-hold")
df3 = ops.apply(df, ops.vector_integrate, "linear")

df = df.append(df1)
df = df.append(df2)
df = df.append(df3)
"""

# df = ops.compute(df, ops.vector_lineartrend, 100)

"""
import traceback

try:
    mergedt, mergedv = ops.apply(df, ops.vector_merger)
except:
    print(traceback.format_exc())

plt.plot(mergedt, mergedv, label="merged")
"""

# # df = ops.apply(df, ops.vector_divide_by, -1)
# df = ops.apply(df, ops.vector_modulo, 1000)

# df = ops.compute(df, ops.vector_movingavg, 0.1)

# df = ops.compute(df, ops.vector_multiply_by, 0.1)

# df = ops.apply(df, ops.vector_removerepeats)

# df = ops.apply(df, ops.vector_slidingwinavg, 10)

# df = ops.apply(df, ops.vector_subtractfirstval)

# df = ops.apply(df, ops.vector_timeavg, "linear")

# df = ops.apply(df, ops.vector_timediff)

# df = ops.apply(df, ops.vector_timeshift, 100)

# df = ops.apply(df, ops.vector_timetoserial)

# df = ops.apply(df, ops.vector_timewinavg, 10)


# df = ops.apply(df, ops.vector_winavg, 100)

# print(df.iloc[0][('result','vecvalue')])

# for i, r in df.iterrows():
    # print(r[('result', 'vecvalue')])
    # plt.plot(r[('result', 'vectime')], r[('result', 'vecvalue')], label=r[('attr', 'title')] + " (" + r[('attr', 'unit')] + ")")


# plt.legend()
#plt.grid()

# plt.tight_layout()

# Finally, the results are plotted
chart.plot_vectors(df)
</chart>
        <chart name="Chart3" type="LineChart">from omnetpp.scave import results, chart, vectorops as ops

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
ADD vectors WHERE attr:experiment(Net5SaturatedQueue) AND attr:replication(#0) AND module(Net5.rte[0].queue[1]) AND name(busy:vector)
"""

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression)

# Which we turn into a more usable format
df = results.transform_results(df)

# You can perform any transformations on the data here

# Finally, the results are plotted
chart.plot_vectors(df)
<property name="Graph.Title" value="busy:vector Net5.rte[0].queue[1]"/>
        </chart>
    </charts>
</analysis>
