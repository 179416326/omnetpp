<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/resultfiles/aloha/*.vec"/>
        <input pattern="/resultfiles/aloha/*.sca"/>
        <input pattern="/resultfiles/routing/*.vec"/>
        <input pattern="/resultfiles/routing/*.sca"/>
    </inputs>
    <charts>
        <chart name="scalars simple 1" script="from omnetpp.scave import chart&#10;&#10;chart.plotScalars([10, 13, 18, 20])" type="BarChart">
            <property name="Legend.Display" value="false"/>
        </chart>
        <chart name="scalars simple 2" script="from omnetpp.scave import chart&#10;&#10;chart.plotScalars([10, 13, 18],&#10;                  labels=[&quot;a little&quot;, &quot;a bit more&quot;, &quot;quite a lot&quot;],&#10;                  row_label=&quot;amount of milk&quot;)&#10;&#10;print(&quot;Hello&quot;)" type="BarChart">
            <property name="Axis.Title.Font" value="Arial-regular-16"/>
            <property name="Label.Font" value="Arial-regular-16"/>
            <property name="Legend.Font" value="Arial-regular-16"/>
        </chart>
        <chart name="scalars dataframe 1" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame(&#10;    [[10, 30],&#10;     [12, 34]],&#10;    columns=[&quot;X&quot;, &quot;Y&quot;],&#10;    index=[&quot;alpha&quot;, &quot;beta&quot;])&#10;&#10;print(df)&#10;&#10;chart.plotScalars(df)&#10;" type="BarChart"/>
        <chart name="scalars dataframe 2" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame(&#10;    [[10, 300, 11, 320],&#10;     [12, 345, 10, 305],&#10;     [11, 325, 12, 348],&#10;     [10, 302, 11, 370]],&#10;    columns=pd.MultiIndex.from_product([[&quot;X&quot;, &quot;Y&quot;], [&quot;x&quot;, &quot;y&quot;]]),&#10;    index=pd.MultiIndex.from_product([[&quot;A&quot;, &quot;B&quot;], [&quot;a&quot;, &quot;b&quot;]])&#10;)&#10;&#10;print(df)&#10;chart.plotScalars(df)&#10;" type="BarChart"/>
        <chart name="scalars dataframe 3" script="from omnetpp.scave import results&#10;&#10;df = results.getScalars(&quot;name(rxBytes:sum) OR name(txBytes:sum)&quot;)&#10;print(df)&#10;chart.plotScalars(df)" type="BarChart"/>
        <chart name="scalars dataframe 4" script="from omnetpp.scave import results&#10;&#10;df = results.getScalars(&quot;name(rxBytes:sum) OR name(txBytes:sum)&quot;)&#10;df = results.pivotScalars(df, columns=[&quot;name&quot;, &quot;replication&quot;], index=[&quot;module&quot;])&#10;print(df)&#10;chart.plotScalars(df)" type="BarChart"/>
        <chart name="vectors simple 1" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;chart.plotVector(&quot;trend&quot;, [0, 1, 2, 3], [3,6,7,9])" type="LineChart"/>
        <chart name="vectors simple 2" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;chart.plotVector(&quot;trend&quot;, [0, 1, 2, 3], [3,6,7,9])&#10;chart.plotVector(&quot;tronb&quot;, [0, 1, 2, 3], [4,8,7,3])&#10;chart.plotVector(&quot;trang&quot;, [0, 1.5, 2.5, 3], [9,7,4,1])" type="LineChart"/>
        <chart name="vectors simple 3" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;data = [&#10;&#9;(&quot;apples&quot;, [2000, 2010, 2020], [300, 367, 341]),&#10;&#9;(&quot;oranges&quot;, [2002, 2014, 2019], [170, 190, 220]),&#10;    (&quot;pears&quot;, [1999, 2003, 2014], [235, 340, 320])&#10;]&#10;&#10;print(data)&#10;&#10;chart.plotVectors(data)" type="LineChart">
            <property name="X.Axis.Min" value="1990.0"/>
            <property name="X.Axis.Max" value="2030.0"/>
        </chart>
        <chart name="vectors dataframe 1" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame({&#10;    &quot;N&quot;: [120, 161, 283],&#10;    &quot;X&quot;: [300, 320, 345]&#10;})&#10;print(df)&#10;chart.plotVectors(df)" type="LineChart"/>
        <chart name="vectors dataframe 2" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame({&#10;    &quot;N&quot;: [120, 161, 283],&#10;    &quot;Y&quot;: [300, 320, 345],&#10;    &quot;time&quot;: [0.1, 0.2, 0.45]&#10;})&#10;print(df)&#10;chart.plotVectors(df)" type="LineChart"/>
        <chart name="vectors dataframe 3" script="from omnetpp.scave import results&#10;&#10;df = results.getVectors(&quot;name(hopCount:vector)&quot;)&#10;&#10;chart.plotVectors(df)" type="LineChart"/>
        <chart name="vectors dataframe 4" script="from omnetpp.scave import results&#10;&#10;&#10;df = results.getVectors(&quot;name(rxBytes:vector) OR name(txBytes:vector)&quot;)&#10;&#10;# df.vecvalue = df.vecvalue.apply(np.cumsum)&#10;&#10;print(df)&#10;&#10;chart.plotVectors(df)" type="LineChart"/>
        <chart name="histograms simple 1" script="from omnetpp.scave import chart&#10;&#10;chart.plotHistogram(label=&quot;IQ&quot;, edges=[80, 90, 100, 110, 120, 130], values=[2, 3, 7, 6, 4])" type="HistogramChart"/>
        <chart name="histograms simple 2" script="from omnetpp.scave import chart&#10;&#10;chart.plotHistogram(&quot;A&quot;, [80, 90, 105, 118, 130], [2, 3, 7, 4])&#10;&#10;chart.plotHistogram(&quot;B&quot;, [83, 97, 101, 110, 124, 137], [0.6, 0.8, 1.5, 1.1, 0.9])" type="HistogramChart"/>
        <chart name="histograms simple 3" script="import numpy as np&#10;from omnetpp.scave import chart&#10;&#10;samples = np.random.normal(loc=42, scale=6.28, size=1000000)&#10;&#10;values, edges = np.histogram(samples, bins=64)&#10;&#10;print(edges)&#10;print(values)&#10;&#10;chart.plotHistogram(&quot;bell&quot;, edges, values)" type="HistogramChart"/>
        <chart name="histograms dataframe 1" script="from omnetpp.scave import results&#10;&#10;from omnetpp.scave import chart&#10;&#10;df = results.getHistograms(&quot;name(collisionLength:histogram)&quot;)&#10;&#10;print(df.columns)&#10;chart.plotHistograms(df)" type="HistogramChart"/>
        <chart name="styling 1" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame(&#10;    [[10, 30],&#10;     [12, 34]],&#10;    columns=[&quot;X&quot;, &quot;Y&quot;],&#10;    index=[&quot;alpha&quot;, &quot;beta&quot;])&#10;&#10;print(df)&#10;&#10;chart.plotScalars(df)&#10;&#10;&#10;chart.setProperty(&quot;Graph.Title&quot;, &quot;This is a nice chart!&quot;)&#10;chart.setProperty(&quot;Plot.BackgroundColor&quot;, &quot;lightgreen&quot;)&#10;chart.setProperty(&quot;Legend.Font&quot;, &quot;Arial-bold-18&quot;)" type="BarChart">
            <property name="Graph.Title" value="Even though we have a title set here, this will be overridden by the script"/>
            <property name="Legend.Font" value="Arial-italic-12"/>
        </chart>
        <chart name="styling 2" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame(&#10;    [[10, 30],&#10;     [12, 34]],&#10;    columns=[&quot;X&quot;, &quot;Y&quot;],&#10;    index=[&quot;alpha&quot;, &quot;beta&quot;])&#10;print(df)&#10;chart.plotScalars(df)&#10;&#10;&#10;chart.setProperty(&quot;Bar.Color/X&quot;, &quot;purple&quot;)&#10;chart.setProperty(&quot;Bar.Color/Y&quot;, &quot;yellow&quot;)&#10;&#10;" type="BarChart"/>
        <chart name="styling 3" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame(&#10;    [[10, 30],&#10;     [12, 34]],&#10;    columns=[&quot;X&quot;, &quot;Y&quot;],&#10;    index=[&quot;alpha&quot;, &quot;beta&quot;])&#10;print(df)&#10;chart.plotScalars(df)&#10;&#10;&#10;chart.setProperties({&#10;    &quot;Graph.Title&quot;: &quot;This is a nice chart!&quot;,&#10;    &quot;Plot.BackgroundColor&quot;: &quot;lightgreen&quot;,&#10;&#10;    &quot;Bar.Color/X&quot;: &quot;purple&quot;,&#10;    &quot;Bar.Color/Y&quot;: &quot;yellow&quot;&#10;})&#10;&#10;&#10;" type="BarChart"/>
        <chart name="styling 4" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;df = pd.DataFrame(&#10;    [[10, 30],&#10;     [12, 34]],&#10;    columns=[&quot;X&quot;, &quot;Y&quot;],&#10;    index=[&quot;alpha&quot;, &quot;beta&quot;])&#10;print(df)&#10;chart.plotScalars(df)&#10;&#10;print(&quot;\nThese properties are set in the form:&quot;)&#10;print(chart.getProperties())&#10;&#10;print(&quot;\nAnd these are all the defaults:&quot;)&#10;print(chart.getDefaultProperties())&#10;&#10;effective = chart.getDefaultProperties()&#10;effective.update(chart.getProperties())&#10;&#10;print(&quot;\nSo the effective set of properties (before the script is executed):&quot;)&#10;&#10;print(effective)&#10;&#10;print(&quot;\n\nBut of course these can be overridden from the script...&quot;)&#10;&#10;chart.setProperty(&quot;Plot.BackgroundColor&quot;, &quot;blue&quot;)&#10;&#10;# and you can reset anything to the default (overriding anything set in the dialog, or in the script up to this point)&#10;# chart.setProperties(chart.getDefaultProperties())&#10;" type="BarChart">
            <property name="Graph.Title" value="A concise title"/>
            <property name="Axes.Grid" value="All"/>
            <property name="Legend.Font" value="Arial-regular-12"/>
        </chart>
        <chart name="importing 1" script="import simplechart" type="MatplotlibChart"/>
        <chart name="importing 2" script="import matplotlib.pyplot as plt&#10;&#10;import charts&#10;charts.chart_function()&#10;&#10;plt.grid()" type="MatplotlibChart"/>
        <chart name="importing 3" script="from omnetpp.scave import charts&#10;charts.chart_function_native(results, chart)" type="BarChart"/>
        <chart name="importing 4" script="from charts import scripts&#10;&#10;scripts[chart.getName()]()" type="MatplotlibChart"/>
        <chart name="importing 5" script="from charts import scripts&#10;&#10;scripts[chart.getName()](results, chart)" type="BarChart"/>
        <chart name="" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;&#10;from omnetpp.scave import results&#10;from omnetpp.scave import chart&#10;&#10;import operations as ops&#10;&#10;# This expression selects the results (you might be able to logically simplify it)&#10;filter_expression = &quot;&quot;&quot;&#10;ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(_runattrs_) AND name(iaMean)&#10;ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)&#10;&quot;&quot;&quot;&#10;&#10;# The data is returned as a Pandas DataFrame&#10;df = results.getScalars(filter_expression)&#10;&#10;print(df)&#10;&#10;# Which we turn into a more usable format&#10;df = results.transform_results(df)&#10;&#10;# You can perform any transformations on the data here&#10;&#10;# Finally, the results are plotted&#10;# chart.plotScalars(df)&#10;# chart.plotScatter(df, &quot;iaMean&quot;, &quot;channelUtilization:last&quot;)" type="ScatterChart"/>
        <chart name="" script="import numpy as np&#10;from omnetpp.scave import results&#10;from omnetpp.scave import chart&#10;import pandas as pd&#10;&#10;pd.set_option('display.width', 5000)&#10;pd.set_option('display.max_columns', 500)&#10;&#10;import operations as ops&#10;&#10;# This expression selects the results (you might be able to logically simplify it)&#10;filter_expression = &quot;&quot;&quot;&#10;ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)&#10;&quot;&quot;&quot;&#10;&#10;# The data is returned as a Pandas DataFrame&#10;df = results.getScalars(filter_expression)&#10;&#10;df2 = results.getVectors(&#10;&quot;ADD vectors WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*serverChannelState*)&quot;&#10;)&#10;&#10;# Which we turn into a more usable format&#10;df = results.transform_results(df)&#10;df2 = results.transform_results(df2)&#10;&#10;&#10;&#10;def extend_iloc(df):&#10;    cols_to_flatten = [('result', 'vectime'), ('result', 'vecvalue')]&#10;    &#10;    # Row numbers to repeat &#10;    lens = df[cols_to_flatten[0]].apply(len)&#10;    vals = range(df.shape[0])&#10;&#10;    ilocations = np.repeat(vals, lens)&#10;    &#10;    # Replicate rows and add flattened column of lists&#10;    with_idxs = [(i, c) for (i, c) in enumerate(df.columns) if c not in cols_to_flatten]&#10;    col_idxs = list(list(zip(*with_idxs))[0])&#10;    new_df = df.iloc[ilocations, col_idxs].copy()&#10;&#10;    # Flatten columns of lists&#10;    for col_target in cols_to_flatten:&#10;        col_flat = [item for sublist in df[col_target] for item in sublist]&#10;        new_df[col_target] = col_flat&#10;&#10;    return new_df&#10;&#10;df2 = extend_iloc(df2)&#10;&#10;df2 = df2.reindex_axis((sorted(df2.columns)), axis=1)&#10;&#10;print()&#10;&#10;df.reset_index(inplace=True)&#10;print(df2)&#10;df2.plot.scatter(('result', 'vectime'), ('result', 'vecvalue'))&#10;# df.pivot_table()&#10;&#10;# You can perform any transformations on the data here&#10;&#10;# Finally, the results are plotted&#10;# chart.plotScalars(df)&#10;# chart.plotScatter(df, &quot;iaMean&quot;, &quot;channelUtilization:last&quot;)" type="LineChart"/>
        <chart name="" script="import numpy as np&#10;from omnetpp.scave import results&#10;from omnetpp.scave import chart&#10;import pandas as pd&#10;&#10;import operations as ops&#10;&#10;# This expression selects the results (you might be able to logically simplify it)&#10;filter_expression = &quot;&quot;&quot;&#10;ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)&#10;&quot;&quot;&quot;&#10;&#10;# The data is returned as a Pandas DataFrame&#10;df = results.getScalars(filter_expression)&#10;&#10;df2 = results.getVectors(&#10;&quot;ADD vectors WHERE attr:experiment(PureAlohaExperiment) AND  name(*tat*)&quot;&#10;)&#10;&#10;# Which we turn into a more usable format&#10;df = results.transform_results(df)&#10;df2 = results.transform_results(df2)&#10;&#10;df.columns = df.columns.droplevel()&#10;&#10;df_piv = df.pivot_table(values=['value'], index='iaMean', columns='numHosts')&#10;df_piv.reset_index(inplace=True)&#10;# df_piv.columns = df_piv.columns.droplevel()&#10;&#10;# df_piv.columns[0] = 'iaMean'&#10;# print(df_piv)&#10;# df_piv.plot()&#10;&#10;def expand_vectors(df):&#10;    cols_to_flatten = [('result', 'vectime'), ('result', 'vecvalue')]&#10;&#10;    # Row numbers to repeat &#10;    lens = df[cols_to_flatten[0]].apply(len)&#10;    vals = range(df.shape[0])&#10;&#10;    ilocations = np.repeat(vals, lens)&#10;&#10;    # Replicate rows and add flattened column of lists&#10;    with_idxs = [(i, c) for (i, c) in enumerate(df.columns) if c not in cols_to_flatten]&#10;    col_idxs = list(list(zip(*with_idxs))[0])&#10;    new_df = df.iloc[ilocations, col_idxs].copy()&#10;&#10;    # Flatten columns of lists&#10;    for col_target in cols_to_flatten:&#10;        col_flat = [item for sublist in df[col_target] for item in sublist]&#10;        new_df[col_target] = col_flat&#10;&#10;    return new_df&#10;&#10;&#10;df2 = expand_vectors(df2)&#10;&#10;df2_ = df2.groupby(df2.index.names + [('result','vectime')]).mean()&#10;print(df2_.unstack(&quot;name&quot;))&#10;# print(df2.unstack())&#10;&#10;#df2.plot(x='vectime')&#10;&#10;# df2 = df2.reindex_axis((sorted(df2.columns)), axis=1)&#10;&#10;# print()&#10;&#10;# df.reset_index(inplace=True)&#10;# print(df2)&#10;&#10;# df3 = pd.pivot_table(df2, values=)&#10;&#10;# df.pivot_table()&#10;&#10;# You can perform any transformations on the data here&#10;&#10;# Finally, the results are plotted&#10;# chart.plotScalars(df)&#10;# chart.plotScatter(df, &quot;iaMean&quot;, &quot;channelUtilization:last&quot;)" type="MatplotlibChart"/>
        <chart name="" script="import numpy as np&#10;from omnetpp.scave import results&#10;from omnetpp.scave import chart&#10;import pandas as pd&#10;&#10;pd.set_option('display.width', 5000)&#10;pd.set_option('display.max_columns', 500)&#10;&#10;import operations as ops&#10;&#10;# This expression selects the results (you might be able to logically simplify it)&#10;filter_expression = &quot;&quot;&quot;&#10;ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)&#10;&quot;&quot;&quot;&#10;&#10;# The data is returned as a Pandas DataFrame&#10;df = results.getScalars(filter_expression)&#10;&#10;df2 = results.getVectors(&#10;&quot;ADD vectors WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*serverChannelState*)&quot;&#10;)&#10;&#10;# Which we turn into a more usable format&#10;df = results.transform_results(df)&#10;df2 = results.transform_results(df2)&#10;&#10;&#10;&#10;def extend_iloc(df):&#10;    cols_to_flatten = [('result', 'vectime'), ('result', 'vecvalue')]&#10;    &#10;    # Row numbers to repeat &#10;    lens = df[cols_to_flatten[0]].apply(len)&#10;    vals = range(df.shape[0])&#10;&#10;    ilocations = np.repeat(vals, lens)&#10;    &#10;    # Replicate rows and add flattened column of lists&#10;    with_idxs = [(i, c) for (i, c) in enumerate(df.columns) if c not in cols_to_flatten]&#10;    col_idxs = list(list(zip(*with_idxs))[0])&#10;    new_df = df.iloc[ilocations, col_idxs].copy()&#10;&#10;    # Flatten columns of lists&#10;    for col_target in cols_to_flatten:&#10;        col_flat = [item for sublist in df[col_target] for item in sublist]&#10;        new_df[col_target] = col_flat&#10;&#10;    return new_df&#10;&#10;df2 = extend_iloc(df2)&#10;&#10;df2 = df2.reindex_axis((sorted(df2.columns)), axis=1)&#10;&#10;print()&#10;&#10;df.reset_index(inplace=True)&#10;print(df2)&#10;df2[('itervar', 'iaMean')] = pd.to_numeric(df2[('itervar', 'iaMean')]) &#10;df2[('itervar', 'numHosts')] = pd.to_numeric(df2[('itervar', 'numHosts')])&#10;&#10;# df2.plot.scatter(('itervar', 'numHosts'), ('itervar', 'iaMean'))&#10;&#10;print(df2[('result', 'vecvalue')])&#10;#df3 = pd.pivot_table(df2, index=('itervar', 'iaMean'), columns=('itervar', 'numHosts'), values=[('result', 'vecvalue')])&#10;# df.pivot_table()&#10;&#10;# You can perform any transformations on the data here&#10;&#10;# Finally, the results are plotted&#10;# chart.plotScalars(df)&#10;# chart.plotScatter(df, &quot;iaMean&quot;, &quot;channelUtilization:last&quot;)" type="MatplotlibChart"/>
    </charts>
</analysis>
