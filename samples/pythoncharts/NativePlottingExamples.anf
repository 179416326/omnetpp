<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/resultfiles/aloha/*.vec"/>
        <input pattern="/resultfiles/aloha/*.sca"/>
        <input pattern="/resultfiles/routing/*.vec"/>
        <input pattern="/resultfiles/routing/*.sca"/>
    </inputs>
    <charts>
        <chart name="scalars simple 1" type="BarChart">from omnetpp.scave import chart

chart.plot_scalars([10, 13, 18, 20])<property name="Legend.Display" value="false"/>
        </chart>
        <chart name="scalars simple 2" type="BarChart">from omnetpp.scave import chart

chart.plot_scalars([10, 13, 18],
                  labels=["a little", "a bit more", "quite a lot"],
                  row_label="amount of milk")

print("Hello")<property name="Axis.Title.Font" value="Arial-regular-16"/>
            <property name="Label.Font" value="Arial-regular-16"/>
            <property name="Legend.Font" value="Arial-regular-16"/>
        </chart>
        <chart name="scalars dataframe 1" type="BarChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from omnetpp.scave import chart

df = pd.DataFrame(
    [[10, 30],
     [12, 34]],
    columns=["X", "Y"],
    index=["alpha", "beta"])

print(df)

chart.plot_scalars(df)</chart>
        <chart name="scalars dataframe 2" type="BarChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from omnetpp.scave import chart

df = pd.DataFrame(
    [[10, 300, 11, 320],
     [12, 345, 10, 305],
     [11, 325, 12, 348],
     [10, 302, 11, 370]],
    columns=pd.MultiIndex.from_product([["X", "Y"], ["x", "y"]]),
    index=pd.MultiIndex.from_product([["A", "B"], ["a", "b"]])
)

print(df)
chart.plot_scalars(df)</chart>
        <chart name="scalars dataframe 3" type="BarChart">from omnetpp.scave import results

df = results.get_scalars("name(rxBytes:sum) OR name(txBytes:sum)")
print(df)
chart.plot_scalars(df)</chart>
        <chart name="scalars dataframe 4" type="BarChart">from omnetpp.scave import results

df = results.get_scalars("name(rxBytes:sum) OR name(txBytes:sum)")
df = results.pivot_scalars(df, columns=["name", "replication"], index=["module"])
print(df)
chart.plot_scalars(df)</chart>
        <chart name="vectors simple 1" type="LineChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
chart.plotVector("trend", [0, 1, 2, 3], [3,6,7,9])</chart>
        <chart name="vectors simple 2" type="LineChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
chart.plotVector("trend", [0, 1, 2, 3], [3,6,7,9])
chart.plotVector("tronb", [0, 1, 2, 3], [4,8,7,3])
chart.plotVector("trang", [0, 1.5, 2.5, 3], [9,7,4,1])</chart>
        <chart name="vectors simple 3" type="LineChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
data = [
	("apples", [2000, 2010, 2020], [300, 367, 341]),
	("oranges", [2002, 2014, 2019], [170, 190, 220]),
    ("pears", [1999, 2003, 2014], [235, 340, 320])
]

print(data)

chart.plot_vectors(data)<property name="X.Axis.Min" value="1990.0"/>
            <property name="X.Axis.Max" value="2030.0"/>
        </chart>
        <chart name="vectors dataframe 1" type="LineChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame({
    "N": [120, 161, 283],
    "X": [300, 320, 345]
})
print(df)
chart.plot_vectors(df)</chart>
        <chart name="vectors dataframe 2" type="LineChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame({
    "N": [120, 161, 283],
    "Y": [300, 320, 345],
    "time": [0.1, 0.2, 0.45]
})
print(df)
chart.plot_vectors(df)</chart>
        <chart name="vectors dataframe 3" type="LineChart">from omnetpp.scave import results

df = results.get_vectors("name(hopCount:vector)")

chart.plot_vectors(df)</chart>
        <chart name="vectors dataframe 4" type="LineChart">from omnetpp.scave import results


df = results.get_vectors("name(rxBytes:vector) OR name(txBytes:vector)")

# df.vecvalue = df.vecvalue.apply(np.cumsum)

print(df)

chart.plot_vectors(df)</chart>
        <chart name="histograms simple 1" type="HistogramChart">from omnetpp.scave import chart

chart.plotHistogram(label="IQ", edges=[80, 90, 100, 110, 120, 130], values=[2, 3, 7, 6, 4])</chart>
        <chart name="histograms simple 2" type="HistogramChart">from omnetpp.scave import chart

chart.plotHistogram("A", [80, 90, 105, 118, 130], [2, 3, 7, 4])

chart.plotHistogram("B", [83, 97, 101, 110, 124, 137], [0.6, 0.8, 1.5, 1.1, 0.9])</chart>
        <chart name="histograms simple 3" type="HistogramChart">import numpy as np
from omnetpp.scave import chart

samples = np.random.normal(loc=42, scale=6.28, size=1000000)

values, edges = np.histogram(samples, bins=64)

print(edges)
print(values)

chart.plotHistogram("bell", edges, values)</chart>
        <chart name="histograms dataframe 1" type="HistogramChart">from omnetpp.scave import results

from omnetpp.scave import chart

df = results.get_histograms("name(collisionLength:histogram)")

print(df.columns)
chart.plot_histograms(df)</chart>
        <chart name="styling 1" type="BarChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from omnetpp.scave import chart

df = pd.DataFrame(
    [[10, 30],
     [12, 34]],
    columns=["X", "Y"],
    index=["alpha", "beta"])

print(df)

chart.plot_scalars(df)


chart.set_property("Graph.Title", "This is a nice chart!")
chart.set_property("Plot.BackgroundColor", "lightgreen")
chart.set_property("Legend.Font", "Arial-bold-18")
<property name="Graph.Title" value="Even though we have a title set here, this will be overridden by the script"/>
            <property name="Legend.Font" value="Arial-italic-12"/>
        </chart>
        <chart name="styling 2" type="BarChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame(
    [[10, 30],
     [12, 34]],
    columns=["X", "Y"],
    index=["alpha", "beta"])
print(df)
chart.plot_scalars(df)


chart.set_property("Bar.Color/X", "purple")
chart.set_property("Bar.Color/Y", "yellow")</chart>
        <chart name="styling 3" type="BarChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame(
    [[10, 30],
     [12, 34]],
    columns=["X", "Y"],
    index=["alpha", "beta"])
print(df)
chart.plot_scalars(df)


chart.set_properties({
    "Graph.Title": "This is a nice chart!",
    "Plot.BackgroundColor": "lightgreen",

    "Bar.Color/X": "purple",
    "Bar.Color/Y": "yellow"
})</chart>
        <chart name="styling 4" type="BarChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame(
    [[10, 30],
     [12, 34]],
    columns=["X", "Y"],
    index=["alpha", "beta"])
print(df)
chart.plot_scalars(df)

print("\nThese properties are set in the form:")
print(chart.get_properties())

print("\nAnd these are all the defaults:")
print(chart.get_default_properties())

effective = chart.get_default_properties()
effective.update(chart.get_properties())

print("\nSo the effective set of properties (before the script is executed):")

print(effective)

print("\n\nBut of course these can be overridden from the script...")

chart.set_property("Plot.BackgroundColor", "blue")

# and you can reset anything to the default (overriding anything set in the dialog, or in the script up to this point)
# chart.set_properties(chart.get_default_properties())<property name="Graph.Title" value="A concise title"/>
            <property name="Axes.Grid" value="All"/>
            <property name="Legend.Font" value="Arial-regular-12"/>
        </chart>
        <chart name="importing 1" type="MatplotlibChart">import simplechart</chart>
        <chart name="importing 2" type="MatplotlibChart">import matplotlib.pyplot as plt

import charts
charts.chart_function()

plt.grid()</chart>
        <chart name="importing 3" type="BarChart">from omnetpp.scave import charts
charts.chart_function_native(results, chart)</chart>
        <chart name="importing 4" type="MatplotlibChart">from charts import scripts

scripts[chart.get_name()]()</chart>
        <chart name="importing 5" type="BarChart">from charts import scripts

scripts[chart.get_name()](results, chart)</chart>
        <chart name="" type="ScatterChart">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from omnetpp.scave import results
from omnetpp.scave import chart

from omnetpp.scave import vectorops as ops

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(_runattrs_) AND name(iaMean)
ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)
"""

# The data is returned as a Pandas DataFrame
df = results.get_scalars(filter_expression)

print(df)

# Which we turn into a more usable format
df = results.transform_results(df)

# You can perform any transformations on the data here

# Finally, the results are plotted
# chart.plot_scalars(df)
# chart.plotScatter(df, "iaMean", "channelUtilization:last")</chart>
        <chart name="" type="LineChart">import numpy as np
from omnetpp.scave import results
from omnetpp.scave import chart
import pandas as pd

pd.set_option('display.width', 5000)
pd.set_option('display.max_columns', 500)

from omnetpp.scave import vectorops as ops

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)
"""

# The data is returned as a Pandas DataFrame
df = results.get_scalars(filter_expression)

df2 = results.get_vectors(
"ADD vectors WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*serverChannelState*)"
)

# Which we turn into a more usable format
df = results.transform_results(df)
df2 = results.transform_results(df2)



def extend_iloc(df):
    cols_to_flatten = [('result', 'vectime'), ('result', 'vecvalue')]
    
    # Row numbers to repeat 
    lens = df[cols_to_flatten[0]].apply(len)
    vals = range(df.shape[0])

    ilocations = np.repeat(vals, lens)
    
    # Replicate rows and add flattened column of lists
    with_idxs = [(i, c) for (i, c) in enumerate(df.columns) if c not in cols_to_flatten]
    col_idxs = list(list(zip(*with_idxs))[0])
    new_df = df.iloc[ilocations, col_idxs].copy()

    # Flatten columns of lists
    for col_target in cols_to_flatten:
        col_flat = [item for sublist in df[col_target] for item in sublist]
        new_df[col_target] = col_flat

    return new_df

df2 = extend_iloc(df2)

df2 = df2.reindex_axis((sorted(df2.columns)), axis=1)

print()

df.reset_index(inplace=True)
print(df2)
df2.plot.scatter(('result', 'vectime'), ('result', 'vecvalue'))
# df.pivot_table()

# You can perform any transformations on the data here

# Finally, the results are plotted
# chart.plot_scalars(df)
# chart.plotScatter(df, "iaMean", "channelUtilization:last")</chart>
        <chart name="" type="MatplotlibChart">import numpy as np
import pandas as pd
from omnetpp.scave import results, chart, vectorops as ops

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)
"""

# The data is returned as a Pandas DataFrame
df = results.get_scalars(filter_expression)

df2 = results.get_vectors(
"ADD vectors WHERE attr:experiment(PureAlohaExperiment) AND  name(*tat*)"
)

# Which we turn into a more usable format
df = results.transform_results(df)
df2 = results.transform_results(df2)

df.columns = df.columns.droplevel()

df_piv = df.pivot_table(values=['value'], index='iaMean', columns='numHosts')
df_piv.reset_index(inplace=True)
# df_piv.columns = df_piv.columns.droplevel()

# df_piv.columns[0] = 'iaMean'
# print(df_piv)
# df_piv.plot()

def expand_vectors(df):
    cols_to_flatten = [('result', 'vectime'), ('result', 'vecvalue')]

    # Row numbers to repeat 
    lens = df[cols_to_flatten[0]].apply(len)
    vals = range(df.shape[0])

    ilocations = np.repeat(vals, lens)

    # Replicate rows and add flattened column of lists
    with_idxs = [(i, c) for (i, c) in enumerate(df.columns) if c not in cols_to_flatten]
    col_idxs = list(list(zip(*with_idxs))[0])
    new_df = df.iloc[ilocations, col_idxs].copy()

    # Flatten columns of lists
    for col_target in cols_to_flatten:
        col_flat = [item for sublist in df[col_target] for item in sublist]
        new_df[col_target] = col_flat

    return new_df


df2 = expand_vectors(df2)

df2_ = df2.groupby(df2.index.names + [('result','vectime')]).mean()
print(df2_.unstack("name"))
# print(df2.unstack())

#df2.plot(x='vectime')

# df2 = df2.reindex_axis((sorted(df2.columns)), axis=1)

# print()

# df.reset_index(inplace=True)
# print(df2)

# df3 = pd.pivot_table(df2, values=)

# df.pivot_table()

# You can perform any transformations on the data here

# Finally, the results are plotted
# chart.plot_scalars(df)
# chart.plotScatter(df, "iaMean", "channelUtilization:last")</chart>
        <chart name="" type="MatplotlibChart">import numpy as np
from omnetpp.scave import results
from omnetpp.scave import chart
import pandas as pd

pd.set_option('display.width', 5000)
pd.set_option('display.max_columns', 500)

import operations as ops

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
ADD scalars WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*channelUtilization*)
"""

# The data is returned as a Pandas DataFrame
df = results.get_scalars(filter_expression)

df2 = results.get_vectors(
"ADD vectors WHERE attr:experiment(PureAlohaExperiment) AND module(Aloha.server) AND name(*serverChannelState*)"
)

# Which we turn into a more usable format
df = results.transform_results(df)
df2 = results.transform_results(df2)



def extend_iloc(df):
    cols_to_flatten = [('result', 'vectime'), ('result', 'vecvalue')]
    
    # Row numbers to repeat 
    lens = df[cols_to_flatten[0]].apply(len)
    vals = range(df.shape[0])

    ilocations = np.repeat(vals, lens)
    
    # Replicate rows and add flattened column of lists
    with_idxs = [(i, c) for (i, c) in enumerate(df.columns) if c not in cols_to_flatten]
    col_idxs = list(list(zip(*with_idxs))[0])
    new_df = df.iloc[ilocations, col_idxs].copy()

    # Flatten columns of lists
    for col_target in cols_to_flatten:
        col_flat = [item for sublist in df[col_target] for item in sublist]
        new_df[col_target] = col_flat

    return new_df

df2 = extend_iloc(df2)

df2 = df2.reindex_axis((sorted(df2.columns)), axis=1)

print()

df.reset_index(inplace=True)
print(df2)
df2[('itervar', 'iaMean')] = pd.to_numeric(df2[('itervar', 'iaMean')]) 
df2[('itervar', 'numHosts')] = pd.to_numeric(df2[('itervar', 'numHosts')])

# df2.plot.scatter(('itervar', 'numHosts'), ('itervar', 'iaMean'))

print(df2[('result', 'vecvalue')])
#df3 = pd.pivot_table(df2, index=('itervar', 'iaMean'), columns=('itervar', 'numHosts'), values=[('result', 'vecvalue')])
# df.pivot_table()

# You can perform any transformations on the data here

# Finally, the results are plotted
# chart.plot_scalars(df)
# chart.plotScatter(df, "iaMean", "channelUtilization:last")</chart>
    </charts>
</analysis>
