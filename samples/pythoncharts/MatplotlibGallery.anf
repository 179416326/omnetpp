<?xml version="1.0" encoding="UTF-8"?>
<scave:Analysis xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:scave="http://www.omnetpp.org/omnetpp/scave">
  <inputs/>
  <charts>
    <items xsi:type="scave:MatplotlibChart" name="streamplot" script="&#xA;Y, X = np.mgrid[-3:3:100j, -3:3:100j]&#xA;U = -1 - X**2 + Y&#xA;V = 1 + X - Y**2&#xA;speed = np.sqrt(U*U + V*V)&#xA;&#xA;fig0, ax0 = plt.subplots()&#xA;strm = ax0.streamplot(X, Y, U, V, color=U, linewidth=2, cmap=plt.cm.autumn)&#xA;fig0.colorbar(strm.lines)&#xA;&#xA;fig1, (ax1, ax2) = plt.subplots(ncols=2)&#xA;ax1.streamplot(X, Y, U, V, density=[0.5, 1])&#xA;&#xA;lw = 5*speed / speed.max()&#xA;ax2.streamplot(X, Y, U, V, density=0.6, color='k', linewidth=lw)&#xA;"/>
    <items xsi:type="scave:MatplotlibChart" name="quad" script="&#xA;import numpy as np&#xA;from matplotlib.pyplot import figure, show, savefig&#xA;from matplotlib import cm, colors&#xA;from numpy import ma&#xA;from mpl_toolkits.mplot3d import axes3d&#xA;&#xA;n = 12&#xA;x = np.linspace(-1.5, 1.5, n)&#xA;y = np.linspace(-1.5, 1.5, n)&#xA;X, Y = np.meshgrid(x, y) &#xA;Qx = np.cos(Y) - np.cos(X)&#xA;Qz = np.sin(Y) + np.sin(X)&#xA;Qx = (Qx + 1.1)&#xA;Z = np.sqrt(X**2 + Y**2)/5&#xA;Z = (Z - Z.min()) / (Z.max() - Z.min())&#xA;&#xA;# The color array can include masked values:&#xA;Zm = ma.masked_where(np.fabs(Qz) &lt; 0.5*np.amax(Qz), Z)&#xA;&#xA;&#xA;fig = figure()&#xA;ax = fig.add_subplot(121)&#xA;ax.pcolormesh(Qx, Qz, Z, shading='gouraud')&#xA;ax.set_title('Without masked values')&#xA;&#xA;ax1 = ax&#xA;ax = fig.add_subplot(122, projection='3d')&#xA;#  You can control the color of the masked region:&#xA;# cmap = cm.RdBu&#xA;# cmap.set_bad('y', 1.0)&#xA;# ax.pcolormesh(Qx, Qz, Zm, cmap=cmap)&#xA;#  Or use the default, which is transparent:&#xA;col = ax.pcolormesh(Qx, Qz, Zm, shading='gouraud')&#xA;ax.set_title('With masked values')&#xA;&#xA;&quot;&quot;&quot;&#xA;import time&#xA;&#xA;def thr():&#xA;  time.sleep(1)&#xA;  # rotate the axes and update&#xA;  for angle in range(0, 3600):&#xA;    ax1.view_init(30, math.sin(angle/30)*70)&#xA;    plt.draw()&#xA;&#xA;&#xA;import threading&#xA;&#xA;t = threading.Thread(target=thr)&#xA;t.start()&#xA;&quot;&quot;&quot;"/>
    <items xsi:type="scave:MatplotlibChart" name="lines" script="&#xA;&quot;&quot;&quot;import matplotlib&#xA;import numpy as np&#xA;import matplotlib.cm as cm&#xA;import matplotlib.mlab as mlab&#xA;import matplotlib.pyplot as plt&#xA;&#xA;import prettyplotlib as ppl&#xA;&#xA;&#xA;&#xA;matplotlib.rcParams['xtick.direction'] = 'out'&#xA;matplotlib.rcParams['ytick.direction'] = 'out'&#xA;&#xA;delta = 0.025&#xA;x = np.arange(-3.0, 3.0, delta)&#xA;y = np.arange(-2.0, 2.0, delta)&#xA;X, Y = np.meshgrid(x, y)&#xA;Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)&#xA;Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)&#xA;# difference of Gaussians&#xA;Z = 10.0 * (Z2 - Z1)&#xA;&#xA;&#xA;# Create a simple contour plot with labels using default colors.  The&#xA;# inline argument to clabel will control whether the labels are draw&#xA;# over the line segments of the contour, removing the lines beneath&#xA;# the label&#xA;plt.figure()&#xA;CS = plt.contour(X, Y, Z)&#xA;plt.clabel(CS, inline=1, fontsize=10)&#xA;plt.title('Simplest default with labels')&#xA;&quot;&quot;&quot;&#xA;&#xA;&#xA;import seaborn as sbs&#xA;&#xA;sbs.set()&#xA;&#xA;fig = plt.figure()&#xA;ax = fig.add_subplot(111)&#xA;&#xA;years = np.linspace(1975, 2013)&#xA;pct = 2 + 98. / (1 + np.exp(0.6 * (2008 - years)))&#xA;ax.plot(years, pct)&#xA;&#xA;ax.set_xlim(1976, 2013)&#xA;ax.set_ylim(0, 100)&#xA;ax.yaxis.set_major_formatter(plt.FormatStrFormatter('%i%%'))&#xA;&#xA;ax.text(1977, 67,&#xA;        (&quot;Percentage of the US Population\n&quot;&#xA;         &quot;carrying cameras everywhere they go,\n&quot;&#xA;         &quot;every waking moment of their lives:&quot;),&#xA;        size=16)&#xA;&#xA;ax.set_xlabel((&quot;In the last few years, with very little fanfare,\n&quot;&#xA;               &quot;We've conclusively settled the questions of\n&quot;&#xA;               &quot;flying saucers, lake monsters, ghosts, and bigfoot.&quot;),&#xA;              size=16)"/>
    <items xsi:type="scave:MatplotlibChart" name="scatter hist" script="&#xA;import numpy as np&#xA;import matplotlib.pyplot as plt&#xA;from matplotlib.ticker import NullFormatter&#xA;&#xA;# the random data&#xA;x = np.random.randn(1000)&#xA;y = np.random.randn(1000)&#xA;&#xA;nullfmt = NullFormatter()         # no labels&#xA;&#xA;# definitions for the axes&#xA;left, width = 0.1, 0.65&#xA;bottom, height = 0.1, 0.65&#xA;bottom_h = left_h = left + width + 0.02&#xA;&#xA;rect_scatter = [left, bottom, width, height]&#xA;rect_histx = [left, bottom_h, width, 0.2]&#xA;rect_histy = [left_h, bottom, 0.2, height]&#xA;&#xA;# start with a rectangular Figure&#xA;plt.figure(1, figsize=(8, 8))&#xA;&#xA;axScatter = plt.axes(rect_scatter)&#xA;axHistx = plt.axes(rect_histx)&#xA;axHisty = plt.axes(rect_histy)&#xA;&#xA;# no labels&#xA;axHistx.xaxis.set_major_formatter(nullfmt)&#xA;axHisty.yaxis.set_major_formatter(nullfmt)&#xA;&#xA;# the scatter plot:&#xA;axScatter.scatter(x, y)&#xA;&#xA;# now determine nice limits by hand:&#xA;binwidth = 0.25&#xA;xymax = np.max([np.max(np.fabs(x)), np.max(np.fabs(y))])&#xA;lim = (int(xymax/binwidth) + 1) * binwidth&#xA;&#xA;axScatter.set_xlim((-lim, lim))&#xA;axScatter.set_ylim((-lim, lim))&#xA;&#xA;bins = np.arange(-lim, lim + binwidth, binwidth)&#xA;axHistx.hist(x, bins=bins)&#xA;axHisty.hist(y, bins=bins, orientation='horizontal')&#xA;&#xA;axHistx.set_xlim(axScatter.get_xlim())&#xA;axHisty.set_ylim(axScatter.get_ylim())&#xA;&#xA;plt.show()"/>
    <items xsi:type="scave:MatplotlibChart" name="rotate" script="import time&#xA;from mpl_toolkits.mplot3d import axes3d&#xA;import matplotlib.pyplot as plt&#xA;&#xA;fig = plt.figure()&#xA;ax = fig.add_subplot(111, projection='3d')&#xA;&#xA;# load some test data for demonstration and plot a wireframe&#xA;X, Y, Z = axes3d.get_test_data(0.1)&#xA;ax.plot_wireframe(X, Y, Z, rstride=5, cstride=5)&#xA;&#xA;import math&#xA;&#xA;def thr():&#xA;  time.sleep(1)&#xA;  # rotate the axes and update&#xA;  for angle in range(0, 3600):&#xA;    ax.view_init(30, math.sin(angle/30)*70)&#xA;    plt.draw()&#xA;&#xA;&#xA;import threading&#xA;&#xA;t = threading.Thread(target=thr)&#xA;t.start()"/>
  </charts>
</scave:Analysis>
