<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs/>
    <charts>
        <chart name="streamplot" script="import numpy as np&#10;import matplotlib.pyplot as plt&#10;&#10;Y, X = np.mgrid[-3:3:100j, -3:3:100j]&#10;U = -1 - X**2 + Y&#10;V = 1 + X - Y**2&#10;speed = np.sqrt(U*U + V*V)&#10;&#10;fig, (ax0, ax1, ax2) = plt.subplots(ncols=3)&#10;&#10;strm = ax0.streamplot(X, Y, U, V, color=U, linewidth=2, cmap=plt.cm.autumn)&#10;fig.colorbar(strm.lines, ax=ax0,)&#10;&#10;ax1.streamplot(X, Y, U, V, density=[0.5, 1])&#10;&#10;lw = 5*speed / speed.max()&#10;ax2.streamplot(X, Y, U, V, density=0.6, color='k', linewidth=lw)&#10;&#10;plt.tight_layout()" type="MatplotlibChart"/>
        <chart name="quad" script="&#10;import numpy as np&#10;from matplotlib.pyplot import figure, show, savefig&#10;from matplotlib import cm, colors&#10;from numpy import ma&#10;from mpl_toolkits.mplot3d import axes3d&#10;&#10;n = 12&#10;x = np.linspace(-1.5, 1.5, n)&#10;y = np.linspace(-1.5, 1.5, n)&#10;X, Y = np.meshgrid(x, y) &#10;Qx = np.cos(Y) - np.cos(X)&#10;Qz = np.sin(Y) + np.sin(X)&#10;Qx = (Qx + 1.1)&#10;Z = np.sqrt(X**2 + Y**2)/5&#10;Z = (Z - Z.min()) / (Z.max() - Z.min())&#10;&#10;# The color array can include masked values:&#10;Zm = ma.masked_where(np.fabs(Qz) &lt; 0.5*np.amax(Qz), Z)&#10;&#10;&#10;fig = figure()&#10;ax = fig.add_subplot(121)&#10;ax.pcolormesh(Qx, Qz, Z, shading='gouraud')&#10;ax.set_title('Without masked values')&#10;&#10;ax1 = ax&#10;ax = fig.add_subplot(122)&#10;#  You can control the color of the masked region:&#10;# cmap = cm.RdBu&#10;# cmap.set_bad('y', 1.0)&#10;# ax.pcolormesh(Qx, Qz, Zm, cmap=cmap)&#10;#  Or use the default, which is transparent:&#10;col = ax.pcolormesh(Qx, Qz, Zm, shading='gouraud')&#10;ax.set_title('With masked values')&#10;" type="MatplotlibChart"/>
        <chart name="contours" script="import matplotlib&#10;import numpy as np&#10;import matplotlib.cm as cm&#10;import matplotlib.mlab as mlab&#10;import matplotlib.pyplot as plt&#10;&#10;import prettyplotlib as ppl&#10;&#10;matplotlib.rcParams['xtick.direction'] = 'out'&#10;matplotlib.rcParams['ytick.direction'] = 'out'&#10;&#10;delta = 0.025&#10;x = np.arange(-3.0, 3.0, delta)&#10;y = np.arange(-2.0, 2.0, delta)&#10;X, Y = np.meshgrid(x, y)&#10;Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)&#10;Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)&#10;# difference of Gaussians&#10;Z = 10.0 * (Z2 - Z1)&#10;&#10;&#10;# Create a simple contour plot with labels using default colors.  The&#10;# inline argument to clabel will control whether the labels are draw&#10;# over the line segments of the contour, removing the lines beneath&#10;# the label&#10;plt.figure()&#10;CS = plt.contour(X, Y, Z)&#10;plt.clabel(CS, inline=1, fontsize=10)&#10;plt.title('Simplest default with labels')&#10;" type="MatplotlibChart"/>
        <chart name="cameras" script="import numpy as np&#10;import pandas as pd&#10;import matplotlib.pyplot as plt&#10;&#10;fig = plt.figure()&#10;ax = fig.add_subplot(111)&#10;&#10;years = np.linspace(1975, 2013)&#10;pct = 2 + 98. / (1 + np.exp(0.6 * (2008 - years)))&#10;ax.plot(years, pct)&#10;&#10;ax.set_xlim(1976, 2013)&#10;ax.set_ylim(0, 100)&#10;ax.yaxis.set_major_formatter(plt.FormatStrFormatter('%i%%'))&#10;&#10;ax.text(1977, 67,&#10;        (&quot;Percentage of the US Population\n&quot;&#10;         &quot;carrying cameras everywhere they go,\n&quot;&#10;         &quot;every waking moment of their lives:&quot;),&#10;        size=16)&#10;&#10;ax.set_xlabel((&quot;In the last few years, with very little fanfare,\n&quot;&#10;               &quot;We've conclusively settled the questions of\n&quot;&#10;               &quot;flying saucers, lake monsters, ghosts, and bigfoot.&quot;),&#10;              size=16)&#10;&#10;plt.tight_layout()" type="MatplotlibChart"/>
        <chart name="scatter hist" script="&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;from matplotlib.ticker import NullFormatter&#10;&#10;# the random data&#10;x = np.random.randn(1000)&#10;y = np.random.randn(1000)&#10;&#10;nullfmt = NullFormatter()         # no labels&#10;&#10;# definitions for the axes&#10;left, width = 0.1, 0.65&#10;bottom, height = 0.1, 0.65&#10;bottom_h = left_h = left + width + 0.02&#10;&#10;rect_scatter = [left, bottom, width, height]&#10;rect_histx = [left, bottom_h, width, 0.2]&#10;rect_histy = [left_h, bottom, 0.2, height]&#10;&#10;# start with a rectangular Figure&#10;plt.figure(1, figsize=(8, 8))&#10;&#10;axScatter = plt.axes(rect_scatter)&#10;axHistx = plt.axes(rect_histx)&#10;axHisty = plt.axes(rect_histy)&#10;&#10;# no labels&#10;axHistx.xaxis.set_major_formatter(nullfmt)&#10;axHisty.yaxis.set_major_formatter(nullfmt)&#10;&#10;# the scatter plot:&#10;axScatter.scatter(x, y)&#10;&#10;# now determine nice limits by hand:&#10;binwidth = 0.25&#10;xymax = np.max([np.max(np.fabs(x)), np.max(np.fabs(y))])&#10;lim = (int(xymax/binwidth) + 1) * binwidth&#10;&#10;axScatter.set_xlim((-lim, lim))&#10;axScatter.set_ylim((-lim, lim))&#10;&#10;bins = np.arange(-lim, lim + binwidth, binwidth)&#10;axHistx.hist(x, bins=bins)&#10;axHisty.hist(y, bins=bins, orientation='horizontal')&#10;&#10;axHistx.set_xlim(axScatter.get_xlim())&#10;axHisty.set_ylim(axScatter.get_ylim())&#10;&#10;plt.show()" type="MatplotlibChart"/>
        <chart name="rotate" script="import time&#10;from mpl_toolkits.mplot3d import axes3d&#10;import matplotlib.pyplot as plt&#10;&#10;fig = plt.figure()&#10;ax = fig.add_subplot(111, projection='3d')&#10;&#10;# load some test data for demonstration and plot a wireframe&#10;X, Y, Z = axes3d.get_test_data(0.1)&#10;ax.plot_wireframe(X, Y, Z, rstride=5, cstride=5)&#10;&#10;import math&#10;&#10;def thr():&#10;  global time, ax, plt&#10;  time.sleep(1)&#10;  # rotate the axes and update&#10;  for angle in range(0, 3600):&#10;    ax.view_init(30, math.sin(angle/30)*70)&#10;    plt.draw()&#10;&#10;&#10;import threading&#10;&#10;t = threading.Thread(target=thr)&#10;t.start()" type="MatplotlibChart"/>
    </charts>
</analysis>
