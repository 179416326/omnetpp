<#-- template include for network.ned.ftl -->

<#if !NedUtils.isVisibleType(nodeType,targetFolder)>
<#assign nodeType = StringUtils.makeValidIdentifier(nodeType)>
module ${nodeType} {
    parameters:
        @display("i=misc/node_vs");
    gates:
<#if gateVectorWithIndices || gateVectorWithPlusPlus> 
        inout ${vectorGateName}[];
<#else> 
        inout ${gridUpGate};
        inout ${gridDownGate};
        inout ${gridLeftGate};
        inout ${gridRightGate};
</#if>
}
</#if>

<#if channelType!="" && !NedUtils.isVisibleType(channelType,targetFolder)>
<#assign channelType = StringUtils.makeValidIdentifier(channelType)>
channel ${channelType} extends ned.DatarateChannel {
    parameters:
        int cost = default(0);
}
</#if>

<#-- abbreviations used for the connections: -->
<#if gateVectorWithIndices> 
  <#assign up = vectorGateName + "[0]">
  <#assign down = vectorGateName + "[1]">
  <#assign left = vectorGateName + "[2]">
  <#assign right = vectorGateName + "[3]">
<#elseif gateVectorWithPlusPlus> 
  <#assign up = vectorGateName + "++">
  <#assign down = vectorGateName + "++">
  <#assign left = vectorGateName + "++">
  <#assign right = vectorGateName + "++">
<#else> 
  <#assign up = gridUpGate>
  <#assign down = gridDownGate>
  <#assign left = gridLeftGate>
  <#assign right = gridRightGate>
</#if>


<#-- TODO: generateCoordinates -->
<#if parametricNED>
network ${targetTypeName}
{
    parameters:
        int columns = default(${columns});
        int rows = default(${rows});
    submodules:
<#if gateVectorWithIndices> 
        node[columns*rows]: ${nodeType} { gates: ${vectorGateName}[4]; }
<#else> 
        node[columns*rows]: ${nodeType};
</#if>
<#if grid>
    connections allowunconnected:
        for i=0..rows-1, for j=0..columns-1 {
            node[i*columns+j].${down} <-->${channelSpec} node[(i+1)*columns+j].${up} if i!=rows-1;
            node[i*columns+j].${right} <-->${channelSpec} node[i*columns+j+1].${left} if j!=columns-1;
        }
<#elseif torus>
    connections:
        for i=0..rows-1, for j=0..columns-1 {
            node[i*columns+j].${down} <-->${channelSpec} node[((i+1)%rows)*columns+j].${up};
            node[i*columns+j].${right} <-->${channelSpec} node[(i*columns+(j+1)%columns].${left};
        }
<#else>
   <#stop "one of torus and grid must be true">
</#if>
}


<#else>
network ${targetTypeName}
{
    submodules:
<#list 0..rows-1 as i>
  <#list 0..columns-1 as j>
    <#if gateVectorWithIndices> 
        node_${i}_${j}: ${nodeType} { gates: ${vectorGateName}[4]; }
    <#else>    
        node_${i}_${j}: ${nodeType};
    </#if>
  </#list>

</#list>
<#if grid>
    connections allowunconnected:
  <#list 0..rows-1 as i>
    <#list 0..columns-1 as j>
        <#if i!=rows-1   >node_${i}_${j}.${down} <-->${channelSpec} node_${i+1}_${j}.${up};</#if>
        <#if j!=columns-1>node_${i}_${j}.${right} <-->${channelSpec} node_${i}_${j+1}.${left};</#if>
    </#list>
  </#list>
<#elseif torus>
    connections:
  <#list 0..rows-1 as i>
    <#list 0..columns-1 as j>
        node_${i}_${j}.${down} <-->${channelSpec} node_${(i+1)%rows}_${j}.${up};
        node_${i}_${j}.${right} <-->${channelSpec} node_${i}_${(j+1)%columns}.${left};
    </#list>
  </#list>
<#else>
   <#stop "one of torus and grid must be true">
</#if>
}
</#if>

