<#-- template include for network.ned.ftl -->

<#if !NedUtils.isVisibleType(nodeType,targetFolder)>
<#assign nodeType = StringUtils.makeValidIdentifier(nodeType)>
module ${nodeType} {
    parameters:
        @display("i=misc/node_vs");
    gates:
  <#if gateVectorWithIndices || gateVectorWithPlusPlus> 
        inout ${vectorGateName}[];
  <#else>
    <#if ring || wheel> 
        inout ${wheelPrevGate}; 
        inout ${wheelNextGate}; 
    </#if>
    <#if star || wheel> 
        inout ${wheelToHubGate}; 
    </#if>
  </#if>
}
</#if>

<#if star || wheel>
 <#if !NedUtils.isVisibleType(hubType,targetFolder)>
    <#assign hubType = StringUtils.makeValidIdentifier(hubType)>
module ${hubType} {
    parameters:
        @display("i=misc/node_vs");
    gates:
      <#if gateVectorWithIndices || gateVectorWithPlusPlus> 
        inout ${vectorGateName}[];
      <#else>
        inout ${wheelHubOutGate}[]; 
      </#if>
}
  </#if>
</#if>

<#if channelType!="" && !NedUtils.isVisibleType(channelType,targetFolder)>
  <#assign channelType = StringUtils.makeValidIdentifier(channelType)>
channel ${channelType} extends ned.DatarateChannel {
    parameters:
        int cost = default(0);
}
</#if>

<#-- TODO: generateCoordinates -->
<#if parametricNED>
network ${targetTypeName}
{
    parameters:
        int n = default(${nodes});
    submodules:
<#if star || wheel>
  <#if gateVectorWithIndices> 
        hub: ${hubType} { gates: ${vectorGateName}[n]; }
  <#elseif gateVectorWithPlusPlus> 
        hub: ${hubType};
  <#else> 
        hub: ${hubType} { gates: ${wheelHubOutGate}[n]; }
  </#if>
</#if>
<#if gateVectorWithIndices> 
        node[n]: ${nodeType} { gates: ${vectorGateName}[${iif(wheel,4,iif(ring,1,2))}]; }
<#else> 
        node[n]: ${nodeType};
</#if>
    connections:
<#if star || wheel>
        for i=0..n-1 {
  <#if gateVectorWithIndices> 
            hub.${vectorGateName}[i] <-->${channelSpec} node[i].${vectorGateName}[0];
  <#elseif gateVectorWithPlusPlus> 
            hub.${vectorGateName}++ <-->${channelSpec} node[i].${vectorGateName}++;
  <#else> 
            hub.${wheelHubOutGate}[i] <-->${channelSpec} node[i].${wheelToHubGate};
  </#if>
        }
</#if>
<#if ring || wheel>
        for i=0..n-1 {
  <#if gateVectorWithIndices> 
            node[i].${vectorGateName}[${iif(ring,0,1)}] <-->${channelSpec} node[(i+1)%n].${vectorGateName}[${iif(ring,1,2)}];
  <#elseif gateVectorWithPlusPlus> 
            node[i].${vectorGateName}++ <-->${channelSpec} node[(i+1)%n].${vectorGateName}++;
  <#else> 
            node[i].${wheelNextGate} <-->${channelSpec} node[(i+1)%n].${wheelPrevGate};
  </#if>
        }
</#if>
}
<#else>
network ${targetTypeName}
{
    submodules:
<#if star || wheel>
  <#if gateVectorWithIndices> 
        hub: ${hubType} { gates: ${vectorGateName}[n]; }
  <#elseif gateVectorWithPlusPlus> 
        hub: ${hubType};
  <#else> 
        hub: ${hubType} { gates: ${wheelHubOutGate}[n]; }
  </#if>
</#if>
<#list 0..nodes-1 as i>
<#if gateVectorWithIndices> 
        node${i}: ${nodeType} { gates: ${vectorGateName}[${iif(wheel,3,iif(ring,2,1))}]; }
<#else> 
        node${i}: ${nodeType};
</#if>
</#list>
    connections:
<#if star || wheel>
  <#list 0..nodes-1 as i>
    <#if gateVectorWithIndices> 
        hub.${vectorGateName}[${i}] <-->${channelSpec} node${i}.${vectorGateName}[0];
    <#elseif gateVectorWithPlusPlus> 
        hub.${vectorGateName}++ <-->${channelSpec} node${i}.${vectorGateName}++;
    <#else> 
        hub.${wheelHubOutGate}[${i}] <-->${channelSpec} node${i}.${wheelToHubGate};
    </#if>
  </#list>
</#if>
<#if wheel>

</#if>
<#if ring || wheel>
  <#list 0..nodes-1 as i>
    <#if gateVectorWithIndices> 
        node${i}.${vectorGateName}[${iif(ring,0,1)}] <-->${channelSpec} node${(i+1)%nodes}.${vectorGateName}[${iif(ring,1,2)}];
    <#elseif gateVectorWithPlusPlus> 
        node${i}.${vectorGateName}++ <-->${channelSpec} node${(i+1)%nodes}.${vectorGateName}++;
    <#else> 
        node${i}.${wheelNextGate} <-->${channelSpec} node${(i+1)%nodes}.${wheelPrevGate};
    </#if>
  </#list>
</#if>
}
</#if>
