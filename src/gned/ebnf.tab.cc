
/*  A Bison parser, made from ebnf.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define YYLSP_NEEDED

#define	INCLUDE	257
#define	SIMPLE	258
#define	CHANNEL	259
#define	DELAY	260
#define	ERROR	261
#define	DATARATE	262
#define	MODULE	263
#define	PARAMETERS	264
#define	GATES	265
#define	GATESIZES	266
#define	SUBMODULES	267
#define	CONNECTIONS	268
#define	DISPLAY	269
#define	IN	270
#define	OUT	271
#define	NOCHECK	272
#define	LEFT_ARROW	273
#define	RIGHT_ARROW	274
#define	FOR	275
#define	TO	276
#define	DO	277
#define	IF	278
#define	LIKE	279
#define	NETWORK	280
#define	ENDSIMPLE	281
#define	ENDMODULE	282
#define	ENDCHANNEL	283
#define	ENDNETWORK	284
#define	ENDFOR	285
#define	MACHINES	286
#define	ON	287
#define	IO_INTERFACES	288
#define	IFPAIR	289
#define	INTCONSTANT	290
#define	REALCONSTANT	291
#define	NAME	292
#define	STRING	293
#define	_TRUE	294
#define	_FALSE	295
#define	INPUT	296
#define	REF	297
#define	ANCESTOR	298
#define	NED_CONST	299
#define	NUMERICTYPE	300
#define	STRINGTYPE	301
#define	BOOLTYPE	302
#define	ANYTYPE	303
#define	PLUS	304
#define	MIN	305
#define	MUL	306
#define	DIV	307
#define	MOD	308
#define	EXP	309
#define	SIZEOF	310
#define	SUBMODINDEX	311
#define	EQ	312
#define	NE	313
#define	GT	314
#define	GE	315
#define	LS	316
#define	LE	317
#define	AND	318
#define	OR	319
#define	XOR	320
#define	NOT	321
#define	BIN_AND	322
#define	BIN_OR	323
#define	BIN_XOR	324
#define	BIN_COMPL	325
#define	SHIFT_LEFT	326
#define	SHIFT_RIGHT	327
#define	INVALID_CHAR	328
#define	UMIN	329

#line 77 "ebnf.y"


/*
 * Note:
 * This file (ebnf.y) and ebnf.lex are shared between NEDC and GNED.
 * (Exactly the same files are present in both packages;
 * this is to eliminate the burden of keeping 2 sets of files in sync.)
 *
 * Naturally, NEDC and GNED want to do different things while parsing.
 * Both code is present in this file, using the GNED(), NEC(), DOING_GNED,
 * DOING_NEDC macros. These macros come from ebnfcfg.h which is different
 * in gned and nedc.
 *
 * IMPORTANT:
 * If a grammar rule contains code for both nedc and gned, DO _NOT_ PUT THE
 * NEDC() AND GNED() MACROS IN SEPARATE BRACE PAIRS!
 * So this is WRONG:
 *               {NEDC(...)}
 *               {GNED(...)}
 * This is right:
 *               {NEDC(...)
 *                GNED(...)}
 * The reason is that Bison doesn't handle multiple subsequent actions
 * very well; what's worse, it doesn't even warn about them.
 */


/*
 * Note 2:
 * This file contains 2 shift-reduce conflicts around 'timeconstant'.
 * 4 more at opt_semicolon's after module/submodule types.
 * Plus 3 more to track down.
 *
 * bison's "%expect nn" option cannot be used to suppress the
 * warning message because %expect is not recognized by yacc
 */


#include <stdio.h>
#include <malloc.h>         /* for alloca() */
#include "ebnf.h"           /* selects between NEDC and GNED */
#include "ebnfcfg.h"        /* selects between NEDC and GNED */

#define YYDEBUG 1           /* allow debugging */
#define YYDEBUGGING_ON 0    /* turn on/off debugging */

#if YYDEBUG != 0
#define YYERROR_VERBOSE     /* more detailed error messages */
#include <string.h>         /* YYVERBOSE needs it */
#ifdef CXX                  /* For TRU64 c++ compiler */
#include <malloc.h>
#include <stdlib.h>
#include <alloca.h>
#endif                      /* Required to compile ebnf.y derivatives */
#endif


int yylex (void);
void yyrestart(FILE *);
void yyerror (char *s);


//
// stuff needed by NEDC
//
#ifdef DOING_NEDC
#include "jar_func.h"
#endif


//
// stuff needed by GNED
//
#ifdef DOING_GNED

#include "parsened.h"
#include "nedfile.h"

static YYLTYPE NULLPOS={0,0,0,0,0,0};
static int in_loop;
static int in_network;

NEDParser *np;

#define NEDFILE_KEY       np->nedfile_key
#define IMPORTS_KEY       np->imports_key
#define IMPORT_KEY        np->import_key
#define CHANNEL_KEY       np->channel_key
#define CHANATTR_KEY      np->chanattr_key
#define NETWORK_KEY       np->network_key
#define MODULE_KEY        np->module_key  // also plays the role of SIMPLE_KEY
#define PARAMS_KEY        np->params_key
#define PARAM_KEY         np->param_key
#define GATES_KEY         np->gates_key
#define GATE_KEY          np->gate_key
#define MACHINES_KEY      np->machines_key
#define MACHINE_KEY       np->machine_key
#define SUBMODS_KEY       np->submods_key
#define SUBMOD_KEY        np->submod_key
#define SUBSTPARAMS_KEY   np->substparams_key
#define SUBSTPARAM_KEY    np->substparam_key
#define GATESIZES_KEY     np->gatesizes_key
#define GATESIZE_KEY      np->gatesize_key
#define SUBSTMACHINES_KEY np->substmachines_key
#define SUBSTMACHINE_KEY  np->substmachine_key
#define CONNS_KEY         np->conns_key
#define CONN_KEY          np->conn_key
#define CONNATTR_KEY      np->connattr_key
#define FORLOOP_KEY       np->forloop_key
#define LOOPVAR_KEY       np->loopvar_key

void setFileComment(int key);
void setBannerComment(int key, YYLTYPE tokenpos);
void setRightComment(int key, YYLTYPE tokenpos);
void setTrailingComment(int key, YYLTYPE tokenpos);
void setComments(int key, YYLTYPE pos);
void setComments(int key, YYLTYPE firstpos, YYLTYPE lastpos);
int addChanAttr(int channel_key, char *attrname, YYLTYPE valuepos);
int addParameter(int params_key, YYLTYPE namepos, int type);
int addGate(int gates_key, YYLTYPE namepos, int is_in, int is_vector );
int addSubmodule(int submods_key, YYLTYPE namepos, YYLTYPE vectorpos,
                                   YYLTYPE typepos,YYLTYPE likepos);
int addGateSize(int gatesizes_key, YYLTYPE namepos, YYLTYPE vectorpos);
int addSubstparam(int substparams_key, YYLTYPE namepos, YYLTYPE valuepos);
int addSubstmachine(int substmachines_key, YYLTYPE namepos);
int addConnAttr(int conn_key, char *attrname, YYLTYPE valuepos);
int addLoopVar(int forloop_key, YYLTYPE varnamepos, YYLTYPE frompos, YYLTYPE topos);
int addNetwork(int nedfile_key, YYLTYPE namepos, YYLTYPE typepos, YYLTYPE likepos);
int findSubmoduleKey(YYLTYPE modulenamepos);
YYLTYPE trimBrackets(YYLTYPE vectorpos);
YYLTYPE trimQuotes(YYLTYPE vectorpos);
void swapConnection(int conn_key);
void setDisplayString(int key, YYLTYPE dispstrpos);
#endif

#ifndef YYSTYPE
#define YYSTYPE int
#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		487
#define	YYFLAG		-32768
#define	YYNTBASE	86

#define YYTRANSLATE(x) ((unsigned)(x) <= 329 ? yytranslate[x] : 220)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    84,
    85,     2,     2,    78,     2,    83,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    76,    79,     2,
    82,     2,    75,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    80,     2,    81,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    77
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    14,    16,    18,
    19,    23,    27,    30,    32,    35,    39,    43,    47,    52,
    57,    62,    67,    72,    77,    83,    89,    95,   101,   107,
   113,   116,   120,   123,   127,   131,   135,   141,   145,   149,
   152,   161,   165,   169,   172,   174,   175,   177,   178,   180,
   181,   183,   184,   186,   187,   189,   190,   191,   196,   198,
   199,   203,   206,   208,   213,   214,   219,   221,   222,   223,
   228,   231,   233,   237,   240,   244,   249,   254,   258,   262,
   266,   267,   272,   274,   275,   279,   282,   286,   289,   293,
   296,   300,   302,   306,   309,   313,   315,   316,   321,   323,
   324,   327,   329,   330,   331,   340,   341,   342,   352,   353,
   354,   365,   366,   367,   379,   380,   385,   387,   388,   391,
   393,   394,   399,   400,   407,   409,   410,   414,   417,   419,
   421,   422,   425,   427,   428,   433,   434,   441,   443,   444,
   448,   451,   455,   458,   459,   460,   465,   466,   473,   475,
   476,   480,   483,   486,   488,   493,   494,   495,   501,   502,
   507,   509,   510,   514,   517,   519,   521,   522,   529,   533,
   535,   541,   544,   545,   548,   549,   553,   556,   562,   570,
   576,   584,   588,   590,   593,   595,   598,   600,   603,   605,
   609,   611,   614,   616,   619,   621,   624,   626,   627,   629,
   631,   633,   635,   638,   641,   644,   647,   650,   653,   657,
   661,   665,   669,   673,   677,   679,   682,   685,   688,   689,
   690,   691,   703,   704,   705,   706,   720,   723,   727,   729,
   731,   738,   743,   747,   749,   751,   753,   757,   761,   765,
   769,   773,   777,   781,   784,   788,   792,   796,   800,   804,
   808,   812,   816,   820,   823,   827,   831,   835,   838,   842,
   846,   852,   856,   861,   868,   877,   879,   881,   883,   885,
   887,   890,   892,   896,   900,   903,   905,   907,   909,   911,
   913,   918,   920,   922,   924,   928,   932,   935,   938,   940,
   941,   943,   945
};

static const short yyrhs[] = {    87,
     0,     0,    88,    87,     0,    88,     0,    89,     0,    93,
     0,    99,     0,   102,     0,   197,     0,     0,     3,    90,
    91,     0,    92,    78,    91,     0,    92,    79,     0,    39,
     0,    94,    95,     0,    94,    97,    95,     0,    94,    96,
    95,     0,    94,    98,    95,     0,    94,    97,    96,    95,
     0,    94,    97,    98,    95,     0,    94,    96,    98,    95,
     0,    94,    96,    97,    95,     0,    94,    98,    97,    95,
     0,    94,    98,    96,    95,     0,    94,    97,    96,    98,
    95,     0,    94,    97,    98,    96,    95,     0,    94,    96,
    97,    98,    95,     0,    94,    96,    98,    97,    95,     0,
    94,    98,    97,    96,    95,     0,    94,    98,    96,    97,
    95,     0,     5,    38,     0,    29,    38,   218,     0,    29,
   218,     0,     7,   208,   218,     0,     6,   208,   218,     0,
     8,   208,   218,     0,   100,   105,   107,   108,   101,     0,
     4,    38,   218,     0,    27,    38,   218,     0,    27,   218,
     0,   103,   105,   107,   108,   109,   110,   106,   104,     0,
     9,    38,   218,     0,    28,    38,   218,     0,    28,   218,
     0,   111,     0,     0,   116,     0,     0,   117,     0,     0,
   123,     0,     0,   131,     0,     0,   170,     0,     0,     0,
    32,    76,   112,   113,     0,   114,     0,     0,   115,    78,
   114,     0,   115,    79,     0,    38,     0,    15,    76,    39,
    79,     0,     0,    10,    76,   118,   119,     0,   120,     0,
     0,     0,   122,    78,   121,   120,     0,   122,    79,     0,
    38,     0,    38,    76,    46,     0,    45,    38,     0,    38,
    76,    45,     0,    38,    76,    45,    46,     0,    38,    76,
    46,    45,     0,    38,    76,    47,     0,    38,    76,    48,
     0,    38,    76,    49,     0,     0,    11,    76,   124,   125,
     0,   126,     0,     0,    16,   127,   126,     0,    16,   127,
     0,    17,   129,   126,     0,    17,   129,     0,   128,    78,
   127,     0,   128,    79,     0,    38,    80,    81,     0,    38,
     0,   130,    78,   129,     0,   130,    79,     0,    38,    80,
    81,     0,    38,     0,     0,    13,    76,   132,   133,     0,
   134,     0,     0,   135,   134,     0,   135,     0,     0,     0,
    38,    76,    38,   218,   136,   146,   137,   144,     0,     0,
     0,    38,    76,    38,   205,   218,   138,   146,   139,   144,
     0,     0,     0,    38,    76,    38,    25,    38,   218,   140,
   146,   141,   144,     0,     0,     0,    38,    76,    38,   205,
    25,    38,   218,   142,   146,   143,   144,     0,     0,   154,
   145,   162,   169,     0,   147,     0,     0,   148,   147,     0,
   148,     0,     0,    33,    76,   149,   151,     0,     0,    33,
    24,   208,    76,   150,   151,     0,   152,     0,     0,   153,
    78,   152,     0,   153,    79,     0,    38,     0,   155,     0,
     0,   156,   155,     0,   156,     0,     0,    10,    76,   157,
   159,     0,     0,    10,    24,   208,    76,   158,   159,     0,
   160,     0,     0,   161,    78,   160,     0,   161,    79,     0,
    38,    82,   206,     0,   163,   162,     0,     0,     0,    12,
    76,   164,   166,     0,     0,    12,    24,   208,    76,   165,
   166,     0,   167,     0,     0,   168,    78,   167,     0,   168,
    79,     0,    38,   205,     0,    38,     0,    15,    76,    39,
    79,     0,     0,     0,    14,    18,    76,   171,   173,     0,
     0,    14,    76,   172,   173,     0,   174,     0,     0,   175,
   219,   174,     0,   175,    79,     0,   176,     0,   183,     0,
     0,    21,   177,   178,    23,   182,    31,     0,   179,    78,
   178,     0,   179,     0,    38,    82,   208,    22,   208,     0,
    24,   208,     0,     0,    15,    39,     0,     0,   183,   219,
   182,     0,   183,    79,     0,   184,    20,   188,   180,   181,
     0,   184,    20,   192,    20,   188,   180,   181,     0,   184,
    19,   188,   180,   181,     0,   184,    19,   192,    19,   188,
   180,   181,     0,   185,    83,   186,     0,   187,     0,    38,
   205,     0,    38,     0,    38,   205,     0,    38,     0,    38,
   205,     0,    38,     0,   189,    83,   190,     0,   191,     0,
    38,   205,     0,    38,     0,    38,   205,     0,    38,     0,
    38,   205,     0,    38,     0,     0,   193,     0,   194,     0,
   195,     0,   196,     0,   194,   195,     0,   194,   196,     0,
   195,   196,     0,   195,   194,     0,   196,   194,     0,   196,
   195,     0,   194,   195,   196,     0,   194,   196,   195,     0,
   195,   194,   196,     0,   195,   196,   194,     0,   196,   194,
   195,     0,   196,   195,   194,     0,    38,     0,     6,   208,
     0,     7,   208,     0,     8,   208,     0,     0,     0,     0,
    26,    38,    76,    38,   218,   198,   146,   199,   154,   200,
   204,     0,     0,     0,     0,    26,    38,    76,    38,    25,
    38,   218,   201,   146,   202,   154,   203,   204,     0,    30,
   218,     0,    80,   208,    81,     0,   207,     0,   208,     0,
    42,    84,   208,    78,   208,    85,     0,    42,    84,   208,
    85,     0,    42,    84,    85,     0,    42,     0,   209,     0,
   210,     0,    84,   209,    85,     0,   209,    50,   209,     0,
   209,    51,   209,     0,   209,    52,   209,     0,   209,    53,
   209,     0,   209,    54,   209,     0,   209,    55,   209,     0,
    51,   209,     0,   209,    58,   209,     0,   209,    59,   209,
     0,   209,    60,   209,     0,   209,    61,   209,     0,   209,
    62,   209,     0,   209,    63,   209,     0,   209,    64,   209,
     0,   209,    65,   209,     0,   209,    66,   209,     0,    67,
   209,     0,   209,    68,   209,     0,   209,    69,   209,     0,
   209,    70,   209,     0,    71,   209,     0,   209,    72,   209,
     0,   209,    73,   209,     0,   209,    75,   209,    76,   209,
     0,    38,    84,    85,     0,    38,    84,   209,    85,     0,
    38,    84,   209,    78,   209,    85,     0,    38,    84,   209,
    78,   209,    78,   209,    85,     0,   211,     0,   212,     0,
   213,     0,   214,     0,   215,     0,    43,    38,     0,    38,
     0,    43,    44,    38,     0,    44,    43,    38,     0,    44,
    38,     0,    39,     0,    40,     0,    41,     0,   216,     0,
    57,     0,    56,    84,    38,    85,     0,    36,     0,    37,
     0,   217,     0,    36,    38,   217,     0,    37,    38,   217,
     0,    36,    38,     0,    37,    38,     0,    79,     0,     0,
    78,     0,    79,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   217,   218,   222,   223,   227,   228,   229,   230,   231,   235,
   239,   244,   245,   249,   258,   261,   263,   265,   268,   270,
   272,   274,   276,   278,   281,   283,   285,   287,   289,   291,
   296,   305,   307,   313,   320,   327,   334,   342,   351,   354,
   360,   371,   379,   382,   388,   389,   392,   392,   393,   393,
   394,   394,   395,   395,   396,   396,   399,   403,   406,   407,
   411,   412,   415,   423,   429,   434,   437,   438,   442,   445,
   445,   450,   453,   456,   459,   462,   465,   468,   471,   474,
   480,   485,   488,   489,   493,   494,   495,   496,   500,   501,
   505,   509,   516,   517,   521,   525,   532,   537,   540,   541,
   545,   546,   550,   555,   557,   557,   562,   564,   564,   569,
   571,   571,   576,   578,   581,   584,   589,   590,   595,   596,
   600,   605,   605,   611,   615,   616,   621,   622,   626,   633,
   634,   638,   639,   643,   648,   648,   654,   657,   658,   662,
   663,   667,   674,   675,   679,   684,   684,   690,   693,   694,
   698,   699,   703,   707,   714,   717,   721,   727,   727,   733,
   736,   737,   741,   742,   746,   747,   751,   755,   761,   762,
   766,   773,   776,   781,   784,   789,   790,   794,   797,   800,
   804,   811,   812,   816,   821,   828,   832,   838,   844,   852,
   853,   857,   861,   867,   871,   877,   882,   890,   892,   894,
   896,   898,   901,   903,   905,   907,   909,   911,   914,   916,
   918,   920,   922,   924,   929,   935,   941,   947,   953,   958,
   960,   962,   963,   966,   970,   972,   976,   981,   986,   987,
   991,   993,   995,   997,  1002,  1008,  1010,  1013,  1015,  1017,
  1019,  1021,  1023,  1026,  1030,  1032,  1034,  1036,  1038,  1040,
  1043,  1045,  1047,  1049,  1053,  1055,  1057,  1059,  1062,  1064,
  1066,  1068,  1070,  1072,  1074,  1079,  1080,  1081,  1082,  1083,
  1087,  1089,  1091,  1093,  1095,  1100,  1105,  1107,  1112,  1117,
  1119,  1124,  1125,  1126,  1130,  1132,  1134,  1136,  1141,  1141,
  1142,  1142,  1142
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","INCLUDE",
"SIMPLE","CHANNEL","DELAY","ERROR","DATARATE","MODULE","PARAMETERS","GATES",
"GATESIZES","SUBMODULES","CONNECTIONS","DISPLAY","IN","OUT","NOCHECK","LEFT_ARROW",
"RIGHT_ARROW","FOR","TO","DO","IF","LIKE","NETWORK","ENDSIMPLE","ENDMODULE",
"ENDCHANNEL","ENDNETWORK","ENDFOR","MACHINES","ON","IO_INTERFACES","IFPAIR",
"INTCONSTANT","REALCONSTANT","NAME","STRING","_TRUE","_FALSE","INPUT","REF",
"ANCESTOR","NED_CONST","NUMERICTYPE","STRINGTYPE","BOOLTYPE","ANYTYPE","PLUS",
"MIN","MUL","DIV","MOD","EXP","SIZEOF","SUBMODINDEX","EQ","NE","GT","GE","LS",
"LE","AND","OR","XOR","NOT","BIN_AND","BIN_OR","BIN_XOR","BIN_COMPL","SHIFT_LEFT",
"SHIFT_RIGHT","INVALID_CHAR","'?'","':'","UMIN","','","';'","'['","']'","'='",
"'.'","'('","')'","networkdescription","somedefinitions","definition","import",
"@1","filenames","filename","channeldefinition","channelheader","endchannel",
"cherror","chdelay","chdatarate","simpledefinition","simpleheader","endsimple",
"moduledefinition","moduleheader","endmodule","opt_machineblock","opt_displayblock",
"opt_paramblock","opt_gateblock","opt_submodblock","opt_connblock","machineblock",
"@2","opt_machinelist","machinelist","machine","displayblock","paramblock","@3",
"opt_parameters","parameters","@4","parameter","gateblock","@5","opt_gates",
"gates","gatesI","gateI","gatesO","gateO","submodblock","@6","opt_submodules",
"submodules","submodule","@7","@8","@9","@10","@11","@12","@13","@14","submodule_body",
"@15","opt_on_blocks","on_blocks","on_block","@16","@17","opt_on_list","on_list",
"on_mach","opt_substparamblocks","substparamblocks","substparamblock","@18",
"@19","opt_substparameters","substparameters","substparameter","opt_gatesizeblocks",
"gatesizeblock","@20","@21","opt_gatesizes","gatesizes","gatesize","opt_submod_displayblock",
"connblock","@22","@23","opt_connections","connections","connection","loopconnection",
"@24","loopvarlist","loopvar","opt_conn_condition","opt_conn_displaystr","notloopconnections",
"notloopconnection","gate_spec_L","mod_L","gate_L","parentgate_L","gate_spec_R",
"mod_R","gate_R","parentgate_R","channeldescr","cdname","cddelay","cderror",
"cddatarate","network","@25","@26","@27","@28","@29","@30","endnetwork","vector",
"inputvalue_or_expression","inputvalue","expression","expr","simple_expr","parameter_expr",
"string_expr","boolconst_expr","numconst_expr","special_expr","numconst","timeconstant",
"opt_semicolon","comma_or_semicolon", NULL
};
#endif

static const short yyr1[] = {     0,
    86,    86,    87,    87,    88,    88,    88,    88,    88,    90,
    89,    91,    91,    92,    93,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
    94,    95,    95,    96,    97,    98,    99,   100,   101,   101,
   102,   103,   104,   104,   105,   105,   106,   106,   107,   107,
   108,   108,   109,   109,   110,   110,   112,   111,   113,   113,
   114,   114,   115,   116,   118,   117,   119,   119,   121,   120,
   120,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   124,   123,   125,   125,   126,   126,   126,   126,   127,   127,
   128,   128,   129,   129,   130,   130,   132,   131,   133,   133,
   134,   134,   136,   137,   135,   138,   139,   135,   140,   141,
   135,   142,   143,   135,   145,   144,   146,   146,   147,   147,
   149,   148,   150,   148,   151,   151,   152,   152,   153,   154,
   154,   155,   155,   157,   156,   158,   156,   159,   159,   160,
   160,   161,   162,   162,   164,   163,   165,   163,   166,   166,
   167,   167,   168,   168,   169,   169,   171,   170,   172,   170,
   173,   173,   174,   174,   175,   175,   177,   176,   178,   178,
   179,   180,   180,   181,   181,   182,   182,   183,   183,   183,
   183,   184,   184,   185,   185,   186,   186,   187,   187,   188,
   188,   189,   189,   190,   190,   191,   191,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   193,   194,   195,   196,   198,   199,
   200,   197,   201,   202,   203,   197,   204,   205,   206,   206,
   207,   207,   207,   207,   208,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   210,   210,   210,   210,   210,
   211,   211,   211,   211,   211,   212,   213,   213,   214,   215,
   215,   216,   216,   216,   217,   217,   217,   217,   218,   218,
   219,   219,   219
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     1,     1,     1,     0,
     3,     3,     2,     1,     2,     3,     3,     3,     4,     4,
     4,     4,     4,     4,     5,     5,     5,     5,     5,     5,
     2,     3,     2,     3,     3,     3,     5,     3,     3,     2,
     8,     3,     3,     2,     1,     0,     1,     0,     1,     0,
     1,     0,     1,     0,     1,     0,     0,     4,     1,     0,
     3,     2,     1,     4,     0,     4,     1,     0,     0,     4,
     2,     1,     3,     2,     3,     4,     4,     3,     3,     3,
     0,     4,     1,     0,     3,     2,     3,     2,     3,     2,
     3,     1,     3,     2,     3,     1,     0,     4,     1,     0,
     2,     1,     0,     0,     8,     0,     0,     9,     0,     0,
    10,     0,     0,    11,     0,     4,     1,     0,     2,     1,
     0,     4,     0,     6,     1,     0,     3,     2,     1,     1,
     0,     2,     1,     0,     4,     0,     6,     1,     0,     3,
     2,     3,     2,     0,     0,     4,     0,     6,     1,     0,
     3,     2,     2,     1,     4,     0,     0,     5,     0,     4,
     1,     0,     3,     2,     1,     1,     0,     6,     3,     1,
     5,     2,     0,     2,     0,     3,     2,     5,     7,     5,
     7,     3,     1,     2,     1,     2,     1,     2,     1,     3,
     1,     2,     1,     2,     1,     2,     1,     0,     1,     1,
     1,     1,     2,     2,     2,     2,     2,     2,     3,     3,
     3,     3,     3,     3,     1,     2,     2,     2,     0,     0,
     0,    11,     0,     0,     0,    13,     2,     3,     1,     1,
     6,     4,     3,     1,     1,     1,     3,     3,     3,     3,
     3,     3,     3,     2,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     3,     3,     3,     2,     3,     3,
     5,     3,     4,     6,     8,     1,     1,     1,     1,     1,
     2,     1,     3,     3,     2,     1,     1,     1,     1,     1,
     4,     1,     1,     1,     3,     3,     2,     2,     1,     0,
     1,     1,     0
};

static const short yydefact[] = {     2,
    10,     0,     0,     0,     0,     1,     4,     5,     6,     0,
     7,    46,     8,    46,     9,     0,   290,    31,   290,     0,
     3,     0,     0,     0,   290,    15,     0,     0,     0,     0,
    50,    45,    50,    14,    11,     0,   289,    38,    42,     0,
   282,   283,   272,   276,   277,   278,     0,     0,     0,     0,
   280,     0,     0,     0,   290,   235,   236,   266,   267,   268,
   269,   270,   279,   284,   290,   290,   290,    33,    17,     0,
     0,    16,     0,     0,    18,     0,     0,    57,     0,    52,
    49,    52,     0,    13,   290,   287,   288,     0,   271,     0,
   275,     0,   244,     0,   254,   258,     0,    35,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
    36,    32,    22,     0,    21,     0,    19,     0,    20,     0,
    24,     0,    23,     0,    60,    65,     0,     0,    51,    54,
    12,     0,   219,     0,     0,   285,   286,   262,     0,   273,
   274,     0,   237,   238,   239,   240,   241,   242,   243,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   255,   256,
   257,   259,   260,     0,    27,    28,    25,    26,    30,    29,
    63,    58,    59,     0,    68,    81,   290,    37,     0,    56,
    53,   290,   118,     0,   263,   281,     0,     0,    62,    72,
     0,    66,    67,     0,    84,   290,    40,    97,     0,    48,
    55,   223,     0,   220,   117,   120,     0,   261,    61,     0,
    74,    69,    71,     0,     0,    82,    83,    39,   100,     0,
   159,     0,     0,    47,   118,     0,   121,   131,   119,     0,
   264,    75,    73,    78,    79,    80,     0,    92,    86,     0,
    96,    88,     0,     0,    98,    99,   102,   157,   162,     0,
   290,    41,   224,     0,   126,     0,   221,   130,   133,     0,
    76,    77,    70,     0,    85,     0,    90,     0,    87,     0,
    94,     0,   101,   162,   167,   189,   160,   161,   293,   165,
   166,     0,     0,   183,     0,   290,    44,   131,   123,   129,
   122,   125,     0,     0,   134,     0,   132,   265,    91,    89,
    95,    93,   290,   158,     0,     0,   188,   291,   164,     0,
   198,   198,     0,    64,    43,   225,   126,     0,   128,     0,
   139,   290,   222,     0,   290,   103,     0,     0,   170,     0,
   163,     0,     0,     0,   197,   173,     0,   191,     0,   199,
   200,   201,   202,   173,     0,   187,   182,     0,   124,   127,
   136,     0,   135,   138,     0,   227,   290,     0,   106,   118,
     0,     0,     0,   228,   216,   217,   218,   196,     0,   175,
     0,     0,   203,   204,   206,   205,   207,   208,   175,     0,
   186,   226,   139,     0,     0,   141,   109,   290,   118,   104,
     0,     0,   293,   169,   172,     0,   180,   195,   190,   197,
   173,   209,   210,   211,   212,   213,   214,   178,   173,   137,
   234,   142,   229,   230,   140,   118,   112,   107,   131,     0,
   168,   177,     0,   174,   194,   175,   175,     0,   110,   118,
   131,   105,   115,   171,   176,   181,   179,   233,     0,   131,
   113,   108,   144,     0,   232,   111,   131,     0,   156,   144,
     0,   114,     0,   145,     0,   116,   143,   231,     0,   150,
     0,   147,   154,   146,   149,     0,     0,   150,   153,     0,
   152,   155,   148,   151,     0,     0,     0
};

static const short yydefgoto[] = {   485,
     6,     7,     8,    16,    35,    36,     9,    10,    26,    27,
    28,    29,    11,    12,   188,    13,    14,   262,    31,   233,
    80,   138,   190,   210,    32,   135,   182,   183,   184,   234,
    81,   185,   202,   203,   247,   204,   139,   205,   226,   227,
   249,   250,   252,   253,   191,   229,   255,   256,   257,   370,
   429,   399,   441,   426,   450,   440,   457,   442,   453,   214,
   215,   216,   265,   327,   301,   302,   303,   443,   268,   269,
   331,   393,   363,   364,   365,   459,   460,   470,   478,   474,
   475,   476,   466,   211,   284,   259,   287,   288,   289,   290,
   315,   338,   339,   380,   407,   402,   291,   292,   293,   357,
   294,   346,   347,   409,   348,   349,   350,   351,   352,   353,
    15,   193,   238,   306,   235,   298,   358,   333,   378,   422,
   423,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    38,   320
};

static const short yypact[] = {     8,
-32768,    -1,    24,    92,   104,-32768,     8,-32768,-32768,   129,
-32768,   120,-32768,   120,-32768,     7,    81,-32768,    81,   -20,
-32768,   219,   219,   219,    78,-32768,    13,   174,    26,    90,
   154,-32768,   154,-32768,-32768,   117,-32768,-32768,-32768,   142,
   152,   178,   145,-32768,-32768,-32768,    70,   149,   219,   147,
-32768,   219,   219,   219,    81,   466,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    81,    81,    81,-32768,-32768,   140,
   112,-32768,   140,    11,-32768,   112,    11,-32768,   166,   238,
-32768,   238,     7,-32768,    14,   170,   170,    88,-32768,   215,
-32768,   223,-32768,   228,-32768,-32768,   383,-32768,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,-32768,
-32768,-32768,-32768,   251,-32768,   251,-32768,   251,-32768,   251,
-32768,   251,-32768,   251,   276,-32768,   240,   262,-32768,   304,
-32768,   284,-32768,   152,   178,-32768,-32768,-32768,   274,-32768,
-32768,   256,-32768,   230,   230,   268,   268,   268,   268,   516,
   516,   516,   516,   516,   516,   350,   350,   350,   258,   258,
   258,   247,   247,   439,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   157,   -16,-32768,    82,-32768,   269,   337,
-32768,    81,   320,   219,-32768,-32768,   219,   276,-32768,   278,
   317,-32768,-32768,   159,   231,    81,-32768,-32768,    18,   342,
-32768,-32768,    27,-32768,-32768,   320,   314,   492,-32768,   348,
-32768,-32768,-32768,   322,   323,-32768,-32768,-32768,   324,   282,
-32768,   287,   357,-32768,   320,   219,-32768,   360,-32768,   219,
-32768,   344,   343,-32768,-32768,-32768,   -16,   311,   231,   173,
   318,   231,   186,   330,-32768,-32768,   324,-32768,     9,   375,
    84,-32768,-32768,   340,   379,    28,-32768,-32768,   360,   411,
-32768,-32768,-32768,   345,-32768,   322,-32768,   346,-32768,   323,
-32768,   386,-32768,     9,-32768,    94,-32768,-32768,   190,-32768,
-32768,   252,   338,-32768,   349,    81,-32768,   360,-32768,-32768,
-32768,-32768,   195,   219,-32768,   395,-32768,-32768,-32768,-32768,
-32768,-32768,    16,-32768,   391,   219,   347,-32768,   102,     9,
   177,   177,   394,-32768,-32768,-32768,   379,   379,-32768,   363,
   412,    81,-32768,   416,    19,-32768,   377,   434,   382,   397,
-32768,   219,   219,   219,   -14,   443,   399,-32768,   468,-32768,
   270,    20,   281,   443,   465,   408,-32768,   395,-32768,-32768,
-32768,   413,-32768,-32768,   213,-32768,    81,   472,-32768,   320,
   219,   475,   391,-32768,-32768,-32768,-32768,   423,   219,   507,
   485,   495,   529,   533,   529,   542,   533,   542,   507,   495,
-32768,-32768,   412,   183,   412,-32768,-32768,    81,   320,-32768,
   527,   528,   216,-32768,-32768,   524,-32768,   408,-32768,   150,
   443,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   443,-32768,
   488,-32768,-32768,-32768,-32768,   320,-32768,-32768,   360,   219,
-32768,   535,   475,-32768,-32768,   507,   507,   161,-32768,   320,
   360,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   108,   360,
-32768,-32768,   562,   219,-32768,-32768,   360,    29,   560,   562,
   491,-32768,   219,-32768,   501,-32768,-32768,-32768,   502,   541,
   543,-32768,   408,-32768,-32768,   226,   504,   541,-32768,   541,
-32768,-32768,-32768,-32768,   580,   581,-32768
};

static const short yypgoto[] = {-32768,
   583,-32768,-32768,-32768,   508,-32768,-32768,-32768,   -13,    73,
    80,   106,-32768,-32768,-32768,-32768,-32768,-32768,   573,-32768,
   559,   511,-32768,-32768,-32768,-32768,-32768,   396,-32768,-32768,
-32768,-32768,-32768,   351,-32768,-32768,-32768,-32768,-32768,   -61,
   319,-32768,   316,-32768,-32768,-32768,-32768,   352,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -279,-32768,  -232,
   381,-32768,-32768,-32768,   272,   273,-32768,  -231,   331,-32768,
-32768,-32768,   209,   208,-32768,   144,-32768,-32768,-32768,   127,
   126,-32768,-32768,-32768,-32768,-32768,   326,   288,-32768,-32768,
-32768,   234,-32768,  -319,  -283,   179,  -368,-32768,-32768,-32768,
-32768,  -291,-32768,-32768,-32768,   289,-32768,  -343,  -241,  -142,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   255,  -259,-32768,
-32768,   -23,   -29,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   220,   -17,   211
};


#define	YYLAST		614


static const short yytable[] = {    65,
    66,    39,   263,   403,  -215,  -215,   267,    68,   385,   387,
     1,     2,     3,    69,    72,    75,     4,    23,    22,    93,
    24,   200,    95,    96,    97,   342,   317,   344,   201,   285,
   354,    22,    23,     5,   389,   230,    17,    98,   142,    25,
   334,    25,   415,   368,   417,    34,   286,   120,   121,   122,
   236,   304,   463,   335,    25,    40,   123,   125,   149,   127,
   129,    18,   131,   133,   403,   316,   326,   143,  -193,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   411,   436,    37,   231,    37,   316,   391,    37,   419,   437,
    73,    76,   237,   305,   464,   418,    70,    89,    77,   383,
   175,   388,   176,    90,   177,    67,   178,    22,   179,   206,
   180,   296,  -292,    41,    42,    43,    44,    45,    46,    19,
    47,    48,    71,    74,    22,    23,    24,   400,    49,  -292,
    25,    20,   413,    50,    51,   416,   130,    24,   435,   134,
   126,    30,   446,   447,    52,   132,    37,    25,    53,    37,
    37,   452,    37,    79,   217,    78,   428,   218,    25,   207,
   456,    54,   148,   316,   212,   124,  -185,   462,   128,    85,
    23,    24,   342,   343,   344,   454,    91,   275,   228,    86,
   279,    92,   455,   439,    83,    84,    41,    42,    43,    44,
    45,    46,    25,    47,    48,   144,   145,   451,   384,   386,
   270,    49,   264,   479,   345,    87,    50,    51,    41,    42,
    43,    44,    45,    46,   421,    47,    48,    52,    88,   316,
    94,    53,  -193,    49,   198,   199,   222,   223,    50,    51,
   412,   136,   414,   297,    54,   448,   224,   225,   137,    52,
   276,   277,   150,    53,    41,    42,    43,    44,    45,    46,
   151,    47,    48,   280,   281,   152,    54,   318,   319,    49,
   321,   322,   328,   329,    50,    51,   343,   344,   325,    25,
   330,   101,   102,   103,   104,    52,   342,   343,   187,    53,
   395,   396,   340,   318,   432,   336,    99,   100,   101,   102,
   103,   104,    54,   480,   481,   146,   147,    99,   100,   101,
   102,   103,   104,   181,   366,   186,   189,   369,   375,   376,
   377,   192,   104,    99,   100,   101,   102,   103,   104,   117,
   118,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   196,   114,   115,   116,   208,   117,   118,   401,   119,   397,
   209,   194,   213,   220,   221,   405,   232,   258,   195,   248,
   251,   254,   260,    99,   100,   101,   102,   103,   104,   266,
   424,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   427,   114,   115,   116,   261,   117,   118,   272,   119,   271,
   274,   240,   242,   243,   244,   245,   246,   278,   241,    99,
   100,   101,   102,   103,   104,   282,   444,   105,   106,   107,
   108,   109,   110,   295,   449,   299,   300,   114,   115,   116,
   323,   117,   118,   313,   332,   309,   311,   324,   337,  -184,
   461,   356,    99,   100,   101,   102,   103,   104,   361,   469,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   362,
   114,   115,   116,   367,   117,   118,   372,   119,   371,   373,
    99,   100,   101,   102,   103,   104,   379,   153,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   374,   114,   115,
   116,   381,   117,   118,   390,   119,   382,   316,    99,   100,
   101,   102,   103,   104,   394,   308,   105,   106,   107,   108,
   109,   110,   111,   112,   113,  -192,   114,   115,   116,   398,
   117,   118,   286,   119,   197,    99,   100,   101,   102,   103,
   104,   406,   408,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   410,   114,   115,   116,   344,   117,   118,   343,
   119,    99,   100,   101,   102,   103,   104,   342,   430,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   431,   114,
   115,   116,   434,   117,   118,    99,   100,   101,   102,   103,
   104,   438,  -292,   458,   465,   468,   471,   472,   473,   486,
   487,   477,   482,   114,   115,   116,    33,   117,   118,    21,
   141,    82,   140,   219,   310,   312,   239,   273,   359,   307,
   360,   420,   425,   467,   483,   484,   404,   341,   283,   314,
   355,   445,   392,   433
};

static const short yycheck[] = {    23,
    24,    19,   235,   372,    19,    20,   238,    25,   352,   353,
     3,     4,     5,    27,    28,    29,     9,     7,     6,    49,
     8,    38,    52,    53,    54,     6,   286,     8,    45,    21,
   322,     6,     7,    26,   354,    18,    38,    55,    25,    29,
    25,    29,   386,    25,   388,    39,    38,    65,    66,    67,
    24,    24,    24,   313,    29,    76,    70,    71,    88,    73,
    74,    38,    76,    77,   433,    80,   298,    85,    83,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   382,   411,    79,    76,    79,    80,   356,    79,   390,   419,
    28,    29,    76,    76,    76,   389,    27,    38,    29,   351,
   124,   353,   126,    44,   128,    38,   130,     6,   132,    38,
   134,    38,    21,    36,    37,    38,    39,    40,    41,    38,
    43,    44,    27,    28,     6,     7,     8,   370,    51,    38,
    29,    38,   384,    56,    57,   387,    74,     8,   408,    77,
    71,    32,   436,   437,    67,    76,    79,    29,    71,    79,
    79,   441,    79,    10,   194,    76,   399,   197,    29,   187,
   450,    84,    85,    80,   192,    70,    83,   457,    73,    38,
     7,     8,     6,     7,     8,    78,    38,   249,   206,    38,
   252,    43,    85,   426,    78,    79,    36,    37,    38,    39,
    40,    41,    29,    43,    44,    36,    37,   440,   351,   352,
   240,    51,   236,   473,    38,    38,    56,    57,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    67,    84,    80,
    84,    71,    83,    51,    78,    79,    78,    79,    56,    57,
   383,    76,   385,   261,    84,    85,    16,    17,    11,    67,
    78,    79,    38,    71,    36,    37,    38,    39,    40,    41,
    38,    43,    44,    78,    79,    38,    84,    78,    79,    51,
    19,    20,    78,    79,    56,    57,     7,     8,   296,    29,
   304,    52,    53,    54,    55,    67,     6,     7,    27,    71,
    78,    79,   316,    78,    79,   313,    50,    51,    52,    53,
    54,    55,    84,    78,    79,    86,    87,    50,    51,    52,
    53,    54,    55,    38,   332,    76,    13,   335,   342,   343,
   344,    38,    55,    50,    51,    52,    53,    54,    55,    72,
    73,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    85,    68,    69,    70,    76,    72,    73,   371,    75,   367,
    14,    78,    33,    76,    38,   379,    15,    76,    85,    38,
    38,    38,    76,    50,    51,    52,    53,    54,    55,    10,
   394,    58,    59,    60,    61,    62,    63,    64,    65,    66,
   398,    68,    69,    70,    28,    72,    73,    45,    75,    46,
    80,    78,    45,    46,    47,    48,    49,    80,    85,    50,
    51,    52,    53,    54,    55,    76,   430,    58,    59,    60,
    61,    62,    63,    39,   438,    76,    38,    68,    69,    70,
    83,    72,    73,    38,    30,    81,    81,    79,    38,    83,
   454,    38,    50,    51,    52,    53,    54,    55,    76,   463,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    38,
    68,    69,    70,    38,    72,    73,    23,    75,    82,    78,
    50,    51,    52,    53,    54,    55,    24,    85,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    81,    68,    69,
    70,    83,    72,    73,    20,    75,    19,    80,    50,    51,
    52,    53,    54,    55,    82,    85,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    83,    68,    69,    70,    38,
    72,    73,    38,    75,    76,    50,    51,    52,    53,    54,
    55,    15,    38,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    38,    68,    69,    70,     8,    72,    73,     7,
    75,    50,    51,    52,    53,    54,    55,     6,    22,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    31,    68,
    69,    70,    39,    72,    73,    50,    51,    52,    53,    54,
    55,    84,    38,    12,    15,    85,    76,    76,    38,     0,
     0,    39,    79,    68,    69,    70,    14,    72,    73,     7,
    83,    33,    82,   198,   276,   280,   216,   247,   327,   269,
   328,   393,   395,   460,   478,   480,   373,   320,   257,   284,
   322,   433,   358,   403
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 10:
#line 236 "ebnf.y"
{GNED( IMPORTS_KEY = np->create("imports",NEDFILE_KEY);
                       setComments(IMPORTS_KEY,yylsp[0]); );
    break;}
case 11:
#line 239 "ebnf.y"
{/* GNED( setTrailingComment(IMPORTS_KEY,@3); )
                  * comment already stored with last filename */;
    break;}
case 14:
#line 250 "ebnf.y"
{NEDC( do_include (yyvsp[0]); )
                 GNED( IMPORT_KEY = np->create("import",IMPORTS_KEY);
                       np->set(IMPORT_KEY,"name",trimQuotes(yylsp[0]));
                       setComments(IMPORT_KEY,yylsp[0]); );
    break;}
case 15:
#line 259 "ebnf.y"
{NEDC( do_channel (yyvsp[-1], NULL, NULL, NULL); );
    break;}
case 16:
#line 262 "ebnf.y"
{NEDC( do_channel (yyvsp[-2], yyvsp[-1], NULL, NULL); );
    break;}
case 17:
#line 264 "ebnf.y"
{NEDC( do_channel (yyvsp[-2], NULL, yyvsp[-1], NULL); );
    break;}
case 18:
#line 266 "ebnf.y"
{NEDC( do_channel (yyvsp[-2], NULL, NULL, yyvsp[-1]); );
    break;}
case 19:
#line 269 "ebnf.y"
{NEDC( do_channel (yyvsp[-3], yyvsp[-2], yyvsp[-1], NULL); );
    break;}
case 20:
#line 271 "ebnf.y"
{NEDC( do_channel (yyvsp[-3], yyvsp[-2], NULL, yyvsp[-1]); );
    break;}
case 21:
#line 273 "ebnf.y"
{NEDC( do_channel (yyvsp[-3], NULL, yyvsp[-2], yyvsp[-1]); );
    break;}
case 22:
#line 275 "ebnf.y"
{NEDC( do_channel (yyvsp[-3], yyvsp[-1], yyvsp[-2], NULL); );
    break;}
case 23:
#line 277 "ebnf.y"
{NEDC( do_channel (yyvsp[-3], yyvsp[-1], NULL, yyvsp[-2]); );
    break;}
case 24:
#line 279 "ebnf.y"
{NEDC( do_channel (yyvsp[-3], NULL, yyvsp[-1], yyvsp[-2]); );
    break;}
case 25:
#line 282 "ebnf.y"
{NEDC( do_channel (yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1]); );
    break;}
case 26:
#line 284 "ebnf.y"
{NEDC( do_channel (yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[-2]); );
    break;}
case 27:
#line 286 "ebnf.y"
{NEDC( do_channel (yyvsp[-4], yyvsp[-2], yyvsp[-3], yyvsp[-1]); );
    break;}
case 28:
#line 288 "ebnf.y"
{NEDC( do_channel (yyvsp[-4], yyvsp[-1], yyvsp[-3], yyvsp[-2]); );
    break;}
case 29:
#line 290 "ebnf.y"
{NEDC( do_channel (yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[-3]); );
    break;}
case 30:
#line 292 "ebnf.y"
{NEDC( do_channel (yyvsp[-4], yyvsp[-1], yyvsp[-2], yyvsp[-3]); );
    break;}
case 31:
#line 297 "ebnf.y"
{NEDC( yyval = yyvsp[0]; )
                 GNED( CHANNEL_KEY = np->create("channel",NEDFILE_KEY);
                       np->set(CHANNEL_KEY,"name",yylsp[0]);
                       setComments(CHANNEL_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 32:
#line 306 "ebnf.y"
{GNED( setTrailingComment(CHANNEL_KEY,yylsp[-1]); );
    break;}
case 33:
#line 308 "ebnf.y"
{GNED( setTrailingComment(CHANNEL_KEY,yylsp[-1]); );
    break;}
case 34:
#line 314 "ebnf.y"
{NEDC( yyval = yyvsp[-1]; )
                 GNED( CHANATTR_KEY = addChanAttr(CHANNEL_KEY,"error",yylsp[-1]);
                       setComments(CHANATTR_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 35:
#line 321 "ebnf.y"
{NEDC( yyval = yyvsp[-1]; )
                 GNED( CHANATTR_KEY = addChanAttr(CHANNEL_KEY,"delay",yylsp[-1]);
                       setComments(CHANATTR_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 36:
#line 328 "ebnf.y"
{NEDC( yyval = yyvsp[-1]; )
                 GNED( CHANATTR_KEY = addChanAttr(CHANNEL_KEY,"datarate",yylsp[-1]);
                       setComments(CHANATTR_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 38:
#line 343 "ebnf.y"
{NEDC( do_simple (yyvsp[-1]); )
                 GNED( MODULE_KEY = np->create("simple",NEDFILE_KEY);
                       np->set(MODULE_KEY,"name", yylsp[-1]);
                       setComments(MODULE_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 39:
#line 352 "ebnf.y"
{NEDC( end_simple (yyvsp[-1]); )
                 GNED( setTrailingComment(MODULE_KEY,yylsp[-1]); );
    break;}
case 40:
#line 355 "ebnf.y"
{NEDC( end_simple (NULL); )
                 GNED( setTrailingComment(MODULE_KEY,yylsp[-1]); );
    break;}
case 42:
#line 372 "ebnf.y"
{NEDC( do_module (yyvsp[-1]); )
                 GNED( MODULE_KEY = np->create("module",NEDFILE_KEY);
                       np->set(MODULE_KEY,"name", yylsp[-1]);
                       setComments(MODULE_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 43:
#line 380 "ebnf.y"
{NEDC( end_module (yyvsp[-1]); )
                 GNED( setTrailingComment(MODULE_KEY,yylsp[-1]); );
    break;}
case 44:
#line 383 "ebnf.y"
{NEDC( end_module (NULL); )
                 GNED( setTrailingComment(MODULE_KEY,yylsp[-1]); );
    break;}
case 46:
#line 390 "ebnf.y"
{NEDC( do_machine(jar_strdup("default")); );
    break;}
case 57:
#line 400 "ebnf.y"
{GNED( MACHINES_KEY = np->create("machines",MODULE_KEY);
                       setComments(MACHINES_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 63:
#line 416 "ebnf.y"
{NEDC( do_machine (yyvsp[0]); )
                 GNED( MACHINE_KEY = np->create("machine",MACHINES_KEY);
                       np->set(MACHINE_KEY,"name", yylsp[0]);
                       setComments(MACHINE_KEY,yylsp[0],yylsp[0]); );
    break;}
case 64:
#line 424 "ebnf.y"
{NEDC( do_displaystr_enclosing (yyvsp[-1]); )
                 GNED( setDisplayString(MODULE_KEY,yylsp[-1]); );
    break;}
case 65:
#line 430 "ebnf.y"
{NEDC( do_parameters (); )
                 GNED( PARAMS_KEY = np->create("params",MODULE_KEY);
                       setComments(PARAMS_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 69:
#line 443 "ebnf.y"
{GNED( setComments(PARAM_KEY,yylsp[-1]); );
    break;}
case 71:
#line 446 "ebnf.y"
{GNED( setComments(PARAM_KEY,yylsp[-1]); );
    break;}
case 72:
#line 451 "ebnf.y"
{NEDC( do_parameter (yyvsp[0], TYPE_NUMERIC); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[0],TYPE_NUMERIC); );
    break;}
case 73:
#line 454 "ebnf.y"
{NEDC( do_parameter (yyvsp[-2], TYPE_NUMERIC); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[-2],TYPE_NUMERIC); );
    break;}
case 74:
#line 457 "ebnf.y"
{NEDC( do_parameter (yyvsp[0], TYPE_CONST_NUM); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[0],TYPE_CONST_NUM); );
    break;}
case 75:
#line 460 "ebnf.y"
{NEDC( do_parameter (yyvsp[-2], TYPE_CONST_NUM); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[-2],TYPE_CONST_NUM); );
    break;}
case 76:
#line 463 "ebnf.y"
{NEDC( do_parameter (yyvsp[-3], TYPE_CONST_NUM); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[-3],TYPE_CONST_NUM); );
    break;}
case 77:
#line 466 "ebnf.y"
{NEDC( do_parameter (yyvsp[-3], TYPE_CONST_NUM); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[-3],TYPE_CONST_NUM); );
    break;}
case 78:
#line 469 "ebnf.y"
{NEDC( do_parameter (yyvsp[-2], TYPE_STRING); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[-2],TYPE_STRING); );
    break;}
case 79:
#line 472 "ebnf.y"
{NEDC( do_parameter (yyvsp[-2], TYPE_BOOL); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[-2],TYPE_BOOL); );
    break;}
case 80:
#line 475 "ebnf.y"
{NEDC( do_parameter (yyvsp[-2], TYPE_ANYTYPE); )
                 GNED( PARAM_KEY=addParameter(PARAMS_KEY,yylsp[-2],TYPE_ANYTYPE); );
    break;}
case 81:
#line 481 "ebnf.y"
{NEDC( do_gates (); )
                 GNED( GATES_KEY = np->create("gates",MODULE_KEY);
                       setComments(GATES_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 91:
#line 506 "ebnf.y"
{NEDC( do_gatedecl( yyvsp[-2], 1, 1 ); )
                 GNED( GATE_KEY=addGate(GATES_KEY,  yylsp[-2], 1, 1 );
                       setComments(GATE_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 92:
#line 510 "ebnf.y"
{NEDC( do_gatedecl( yyvsp[0], 1, 0 ); )
                 GNED( GATE_KEY=addGate(GATES_KEY,  yylsp[0], 1, 0 );
                       setComments(GATE_KEY,yylsp[0]); );
    break;}
case 95:
#line 522 "ebnf.y"
{NEDC( do_gatedecl( yyvsp[-2], 0, 1 ); )
                 GNED( GATE_KEY=addGate(GATES_KEY,  yylsp[-2], 0, 1 );
                       setComments(GATE_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 96:
#line 526 "ebnf.y"
{NEDC( do_gatedecl( yyvsp[0], 0, 0 ); )
                 GNED( GATE_KEY=addGate(GATES_KEY,  yylsp[0], 0, 0 );
                       setComments(GATE_KEY,yylsp[0]); );
    break;}
case 97:
#line 533 "ebnf.y"
{NEDC( do_submodules (); )
                 GNED( SUBMODS_KEY = np->create("submods",MODULE_KEY);
                       setComments(SUBMODS_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 103:
#line 551 "ebnf.y"
{NEDC( do_submodule1 (yyvsp[-3], NULL, yyvsp[-1], NULL); )
                 GNED( SUBMOD_KEY=addSubmodule(SUBMODS_KEY, yylsp[-3], NULLPOS, yylsp[-1], NULLPOS);
                       setComments(SUBMOD_KEY,yylsp[-3],yylsp[0]);  );
    break;}
case 104:
#line 555 "ebnf.y"
{NEDC( do_submodule2 (yyvsp[-5], NULL, yyvsp[-3], NULL); );
    break;}
case 106:
#line 558 "ebnf.y"
{NEDC( do_submodule1 (yyvsp[-4], yyvsp[-1], yyvsp[-2], NULL); )
                 GNED( SUBMOD_KEY=addSubmodule(SUBMODS_KEY, yylsp[-4], yylsp[-1], yylsp[-2], NULLPOS);
                       setComments(SUBMOD_KEY,yylsp[-4],yylsp[0]);  );
    break;}
case 107:
#line 562 "ebnf.y"
{NEDC( do_submodule2 (yyvsp[-6], yyvsp[-3], yyvsp[-4], NULL); );
    break;}
case 109:
#line 565 "ebnf.y"
{NEDC( do_submodule1 (yyvsp[-5], NULL, yyvsp[-3], yyvsp[-1]); )
                 GNED( SUBMOD_KEY=addSubmodule(SUBMODS_KEY, yylsp[-5], NULLPOS, yylsp[-3], yylsp[-1]);
                       setComments(SUBMOD_KEY,yylsp[-5],yylsp[0]);  );
    break;}
case 110:
#line 569 "ebnf.y"
{NEDC( do_submodule2 (yyvsp[-7], NULL, yyvsp[-5], yyvsp[-3]); );
    break;}
case 112:
#line 572 "ebnf.y"
{NEDC( do_submodule1 (yyvsp[-6], yyvsp[-3], yyvsp[-4], yyvsp[-1]); )
                 GNED( SUBMOD_KEY=addSubmodule(SUBMODS_KEY, yylsp[-6], yylsp[-3], yylsp[-4], yylsp[-1]);
                       setComments(SUBMOD_KEY,yylsp[-6],yylsp[0]);  );
    break;}
case 113:
#line 576 "ebnf.y"
{NEDC( do_submodule2 (yyvsp[-8], yyvsp[-5], yyvsp[-6], yyvsp[-3]); );
    break;}
case 115:
#line 582 "ebnf.y"
{NEDC( do_readallparameters(); );
    break;}
case 116:
#line 585 "ebnf.y"
{NEDC( end_submodule (); );
    break;}
case 118:
#line 591 "ebnf.y"
{NEDC( do_empty_onlist(); );
    break;}
case 121:
#line 601 "ebnf.y"
{NEDC( do_onlist(); )
                 GNED( SUBSTMACHINES_KEY = np->create("substmachines",in_network?NETWORK_KEY:SUBMOD_KEY);
                       setComments(SUBSTMACHINES_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 123:
#line 606 "ebnf.y"
{NEDC( open_if(yyvsp[-1]); do_onlist(); )
                 GNED( SUBSTMACHINES_KEY = np->create("substmachines",in_network?NETWORK_KEY:SUBMOD_KEY);
                       np->set(SUBSTMACHINES_KEY,"condition",yylsp[-1]);
                       setComments(SUBSTMACHINES_KEY,yylsp[-3],yylsp[0]); );
    break;}
case 124:
#line 611 "ebnf.y"
{NEDC( close_if(); );
    break;}
case 126:
#line 617 "ebnf.y"
{NEDC( do_empty_onlist(); );
    break;}
case 129:
#line 627 "ebnf.y"
{NEDC( do_on_mach(yyvsp[0]); )
                 GNED( SUBSTMACHINE_KEY = addSubstmachine(SUBSTMACHINES_KEY,yylsp[0]);
                       setComments(SUBSTMACHINE_KEY,yylsp[0]); );
    break;}
case 134:
#line 644 "ebnf.y"
{NEDC( do_substparams (); )
                 GNED( SUBSTPARAMS_KEY = np->create("substparams",in_network?NETWORK_KEY:SUBMOD_KEY);
                       setComments(SUBSTPARAMS_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 136:
#line 649 "ebnf.y"
{NEDC( open_if(yyvsp[-1]); do_substparams(); )
                 GNED( SUBSTPARAMS_KEY = np->create("substparams",in_network?NETWORK_KEY:SUBMOD_KEY);
                       np->set(SUBSTPARAMS_KEY,"condition",yylsp[-1]);
                       setComments(SUBSTPARAMS_KEY,yylsp[-3],yylsp[0]); );
    break;}
case 137:
#line 654 "ebnf.y"
{NEDC( close_if(); );
    break;}
case 142:
#line 668 "ebnf.y"
{NEDC( do_substparameter (yyvsp[-2], yyvsp[0]);)
                 GNED( SUBSTPARAM_KEY = addSubstparam(SUBSTPARAMS_KEY,yylsp[-2],yylsp[0]);
                       setComments(SUBSTPARAM_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 145:
#line 680 "ebnf.y"
{NEDC( do_gatesizes (); )
                 GNED( GATESIZES_KEY = np->create("gatesizes",SUBMOD_KEY);
                       setComments(GATESIZES_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 147:
#line 685 "ebnf.y"
{NEDC( open_if(yyvsp[-1]); do_gatesizes (); )
                 GNED( GATESIZES_KEY = np->create("gatesizes",SUBMOD_KEY);
                       np->set(GATESIZES_KEY,"condition",yylsp[-1]);
                       setComments(GATESIZES_KEY,yylsp[-3],yylsp[0]); );
    break;}
case 148:
#line 690 "ebnf.y"
{NEDC( close_if(); );
    break;}
case 153:
#line 704 "ebnf.y"
{NEDC( do_gatesize (yyvsp[-1], yyvsp[0]); )
                 GNED( GATESIZE_KEY = addGateSize(GATESIZES_KEY,yylsp[-1],yylsp[0]);
                       setComments(GATESIZE_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 154:
#line 708 "ebnf.y"
{NEDC( do_gatesize (yyvsp[0], NULL); )
                 GNED( GATESIZE_KEY = addGateSize(GATESIZES_KEY,yylsp[0],NULLPOS);
                       setComments(GATESIZE_KEY,yylsp[0]); );
    break;}
case 155:
#line 715 "ebnf.y"
{NEDC( do_displaystr_submod (yyvsp[-1]); )
                 GNED( setDisplayString(SUBMOD_KEY,yylsp[-1]); );
    break;}
case 157:
#line 722 "ebnf.y"
{NEDC( set_checkconns(0); do_connections(); )
                 GNED( CONNS_KEY = np->create("conns",MODULE_KEY);
                       np->set(CONNS_KEY,"nocheck","1");
                       setComments(CONNS_KEY,yylsp[-2],yylsp[0]); );
    break;}
case 159:
#line 728 "ebnf.y"
{NEDC( set_checkconns(1); do_connections(); )
                 GNED( CONNS_KEY = np->create("conns",MODULE_KEY);
                       np->set(CONNS_KEY,"nocheck","0");
                       setComments(CONNS_KEY,yylsp[-1],yylsp[0]); );
    break;}
case 167:
#line 752 "ebnf.y"
{NEDC( do_for (); )
                 GNED( FORLOOP_KEY = np->create("forloop",CONNS_KEY);
                       in_loop=1; setComments(FORLOOP_KEY,yylsp[0]); );
    break;}
case 168:
#line 756 "ebnf.y"
{NEDC( end_for (); )
                 GNED( in_loop=0; setTrailingComment(FORLOOP_KEY,yylsp[0]); );
    break;}
case 171:
#line 767 "ebnf.y"
{NEDC( do_index (yyvsp[-4], yyvsp[-2], yyvsp[0]); )
                 GNED( LOOPVAR_KEY=addLoopVar(FORLOOP_KEY,yylsp[-4],yylsp[-2],yylsp[0]);
                       setComments(LOOPVAR_KEY,yylsp[-4],yylsp[0]); );
    break;}
case 172:
#line 774 "ebnf.y"
{NEDC( do_condition(yyvsp[0]); )
                 GNED( np->set(CONN_KEY,"condition",yylsp[0]); );
    break;}
case 173:
#line 777 "ebnf.y"
{NEDC( do_condition(NULL); );
    break;}
case 174:
#line 782 "ebnf.y"
{NEDC( yyval = yyvsp[0]; )
                 GNED( setDisplayString(CONN_KEY,yylsp[0]); );
    break;}
case 175:
#line 785 "ebnf.y"
{NEDC( yyval = NULL; );
    break;}
case 178:
#line 795 "ebnf.y"
{NEDC( end_connection (NULL, 'R', yyvsp[0]); )
                 GNED( np->set(CONN_KEY,"arrowdir-l2r",1L); setComments(CONN_KEY,yylsp[-4],yylsp[0]); );
    break;}
case 179:
#line 798 "ebnf.y"
{NEDC( end_connection (yyvsp[-4], 'R', yyvsp[0]); )
                 GNED( np->set(CONN_KEY,"arrowdir-l2r",1L); setComments(CONN_KEY,yylsp[-6],yylsp[0]); );
    break;}
case 180:
#line 801 "ebnf.y"
{NEDC( end_connection (NULL, 'L', yyvsp[0]); )
                 GNED( swapConnection(CONN_KEY);
                       np->set(CONN_KEY,"arrowdir-l2r",0L); setComments(CONN_KEY,yylsp[-4],yylsp[0]); );
    break;}
case 181:
#line 805 "ebnf.y"
{NEDC( end_connection (yyvsp[-4], 'L', yyvsp[0]); )
                 GNED( swapConnection(CONN_KEY);
                 np->set(CONN_KEY,"arrowdir-l2r",0L); setComments(CONN_KEY,yylsp[-6],yylsp[0]); );
    break;}
case 184:
#line 817 "ebnf.y"
{NEDC( do_mod_L (yyvsp[-1], yyvsp[0]); )
                 GNED( CONN_KEY = np->create("conn",in_loop?FORLOOP_KEY:CONNS_KEY);
                       np->set(CONN_KEY, "src-ownerkey", findSubmoduleKey(yylsp[-1]));
                       np->set(CONN_KEY, "src-mod-index", trimBrackets(yylsp[0])); );
    break;}
case 185:
#line 822 "ebnf.y"
{NEDC( do_mod_L (yyvsp[0], NULL); )
                 GNED( CONN_KEY = np->create("conn",in_loop?FORLOOP_KEY:CONNS_KEY);
                       np->set(CONN_KEY, "src-ownerkey", findSubmoduleKey(yylsp[0])); );
    break;}
case 186:
#line 829 "ebnf.y"
{NEDC( do_gate_L (yyvsp[-1], yyvsp[0]); )
                 GNED( np->set(CONN_KEY, "srcgate", yylsp[-1]);
                       np->set(CONN_KEY, "src-gate-index", trimBrackets(yylsp[0])); );
    break;}
case 187:
#line 833 "ebnf.y"
{NEDC( do_gate_L (yyvsp[0], NULL); )
                 GNED( np->set(CONN_KEY, "srcgate", yylsp[0]); );
    break;}
case 188:
#line 839 "ebnf.y"
{NEDC( do_mod_L (NULL, NULL); do_gate_L (yyvsp[-1], yyvsp[0]); )
                 GNED( CONN_KEY = np->create("conn",in_loop?FORLOOP_KEY:CONNS_KEY);
                       np->set(CONN_KEY, "src-ownerkey", MODULE_KEY);
                       np->set(CONN_KEY, "srcgate", yylsp[-1]);
                       np->set(CONN_KEY, "src-gate-index", trimBrackets(yylsp[0])); );
    break;}
case 189:
#line 845 "ebnf.y"
{NEDC( do_mod_L (NULL, NULL); do_gate_L (yyvsp[0], NULL); )
                 GNED( CONN_KEY = np->create("conn",in_loop?FORLOOP_KEY:CONNS_KEY);
                       np->set(CONN_KEY, "src-ownerkey", MODULE_KEY);
                       np->set(CONN_KEY, "srcgate", yylsp[0]); );
    break;}
case 192:
#line 858 "ebnf.y"
{NEDC( do_mod_R (yyvsp[-1], yyvsp[0]); )
                 GNED( np->set(CONN_KEY, "dest-ownerkey", findSubmoduleKey(yylsp[-1]));
                       np->set(CONN_KEY, "dest-mod-index", trimBrackets(yylsp[0])); );
    break;}
case 193:
#line 862 "ebnf.y"
{NEDC( do_mod_R (yyvsp[0], NULL); )
                 GNED( np->set(CONN_KEY, "dest-ownerkey", findSubmoduleKey(yylsp[0])); );
    break;}
case 194:
#line 868 "ebnf.y"
{NEDC( do_gate_R (yyvsp[-1], yyvsp[0]); )
                 GNED( np->set(CONN_KEY, "destgate", yylsp[-1]);
                       np->set(CONN_KEY, "dest-gate-index", trimBrackets(yylsp[0])); );
    break;}
case 195:
#line 872 "ebnf.y"
{NEDC( do_gate_R (yyvsp[0], NULL); )
                 GNED( np->set(CONN_KEY, "destgate", yylsp[0]); );
    break;}
case 196:
#line 878 "ebnf.y"
{NEDC( do_mod_R (NULL, NULL); do_gate_R (yyvsp[-1], yyvsp[0]); )
                 GNED( np->set(CONN_KEY, "dest-ownerkey", MODULE_KEY);
                       np->set(CONN_KEY, "destgate", yylsp[-1]);
                       np->set(CONN_KEY, "dest-gate-index", trimBrackets(yylsp[0])); );
    break;}
case 197:
#line 883 "ebnf.y"
{NEDC( do_mod_R (NULL, NULL); do_gate_R (yyvsp[0], NULL); )
                 GNED( np->set(CONN_KEY, "dest-ownerkey", MODULE_KEY);
                       np->set(CONN_KEY, "destgate", yylsp[0]); );
    break;}
case 198:
#line 891 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, NULL, NULL, NULL); );
    break;}
case 199:
#line 893 "ebnf.y"
{NEDC( yyval = do_channeldescr(yyvsp[0], NULL,NULL,NULL); );
    break;}
case 200:
#line 895 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[0], NULL, NULL); );
    break;}
case 201:
#line 897 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, NULL, yyvsp[0], NULL); );
    break;}
case 202:
#line 899 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, NULL, NULL, yyvsp[0]); );
    break;}
case 203:
#line 902 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[-1], yyvsp[0], NULL); );
    break;}
case 204:
#line 904 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[-1], NULL, yyvsp[0]); );
    break;}
case 205:
#line 906 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, NULL, yyvsp[-1], yyvsp[0]); );
    break;}
case 206:
#line 908 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[0], yyvsp[-1], NULL); );
    break;}
case 207:
#line 910 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[0], NULL, yyvsp[-1]); );
    break;}
case 208:
#line 912 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, NULL, yyvsp[0], yyvsp[-1]); );
    break;}
case 209:
#line 915 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[-2], yyvsp[-1], yyvsp[0]); );
    break;}
case 210:
#line 917 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[-2], yyvsp[0], yyvsp[-1]); );
    break;}
case 211:
#line 919 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[-1], yyvsp[-2], yyvsp[0]); );
    break;}
case 212:
#line 921 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[0], yyvsp[-2], yyvsp[-1]); );
    break;}
case 213:
#line 923 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[-1], yyvsp[0], yyvsp[-2]); );
    break;}
case 214:
#line 925 "ebnf.y"
{NEDC( yyval = do_channeldescr( NULL, yyvsp[0], yyvsp[-1], yyvsp[-2]); );
    break;}
case 215:
#line 930 "ebnf.y"
{NEDC( yyval = yyvsp[0]; )
                 GNED( CONNATTR_KEY=addConnAttr(CONN_KEY,"channel",yylsp[0]); );
    break;}
case 216:
#line 936 "ebnf.y"
{NEDC( yyval = yyvsp[0]; )
                 GNED( CONNATTR_KEY=addConnAttr(CONN_KEY,"delay",yylsp[0]); );
    break;}
case 217:
#line 942 "ebnf.y"
{NEDC( yyval = yyvsp[0]; )
                 GNED( CONNATTR_KEY=addConnAttr(CONN_KEY,"error",yylsp[0]); );
    break;}
case 218:
#line 948 "ebnf.y"
{NEDC( yyval = yyvsp[0]; )
                 GNED( CONNATTR_KEY=addConnAttr(CONN_KEY,"datarate",yylsp[0]); );
    break;}
case 219:
#line 954 "ebnf.y"
{NEDC( do_system (yyvsp[-3]); )
                 GNED( NETWORK_KEY = addNetwork(NEDFILE_KEY,yylsp[-3],yylsp[-1],NULLPOS);
                       setComments(NETWORK_KEY,yylsp[-4],yylsp[0]); in_network=1;);
    break;}
case 220:
#line 958 "ebnf.y"
{NEDC( do_systemmodule (yyvsp[-5], yyvsp[-3], NULL); );
    break;}
case 221:
#line 960 "ebnf.y"
{NEDC( do_readallparameters(); );
    break;}
case 222:
#line 962 "ebnf.y"
{NEDC( end_system (); );
    break;}
case 223:
#line 964 "ebnf.y"
{NEDC( do_system (yyvsp[-5]); );
    break;}
case 224:
#line 966 "ebnf.y"
{NEDC( do_systemmodule (yyvsp[-7], yyvsp[-5], yyvsp[-3]); )
                 GNED( NETWORK_KEY = addNetwork(NEDFILE_KEY,yylsp[-7],yylsp[-5],yylsp[-3]);
                       setComments(NETWORK_KEY,yylsp[-8],yylsp[-2]); );
    break;}
case 225:
#line 970 "ebnf.y"
{NEDC( do_readallparameters(); );
    break;}
case 226:
#line 972 "ebnf.y"
{NEDC( end_system (); );
    break;}
case 227:
#line 977 "ebnf.y"
{GNED( setTrailingComment(NETWORK_KEY,yylsp[-1]); in_network=0; );
    break;}
case 228:
#line 982 "ebnf.y"
{NEDC( yyval = yyvsp[-1]; );
    break;}
case 231:
#line 992 "ebnf.y"
{NEDC( yyval = do_inputvalue(yyvsp[-3], yyvsp[-1]); );
    break;}
case 232:
#line 994 "ebnf.y"
{NEDC( yyval = do_inputvalue(yyvsp[-1], NULL); );
    break;}
case 233:
#line 996 "ebnf.y"
{NEDC( yyval = do_inputvalue(NULL, NULL); );
    break;}
case 234:
#line 998 "ebnf.y"
{NEDC( yyval = do_inputvalue(NULL, NULL); );
    break;}
case 235:
#line 1004 "ebnf.y"
{NEDC( yyval = end_expr( yyvsp[0] ); );
    break;}
case 236:
#line 1009 "ebnf.y"
{NEDC( yyval = yyvsp[0]; );
    break;}
case 237:
#line 1011 "ebnf.y"
{NEDC( yyval = yyvsp[-1]; );
    break;}
case 238:
#line 1014 "ebnf.y"
{NEDC( yyval = do_op( 2, '+', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 239:
#line 1016 "ebnf.y"
{NEDC( yyval = do_op( 2, '-', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 240:
#line 1018 "ebnf.y"
{NEDC( yyval = do_op( 2, '*', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 241:
#line 1020 "ebnf.y"
{NEDC( yyval = do_op( 2, '/', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 242:
#line 1022 "ebnf.y"
{NEDC( yyval = do_op( 2, '%', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 243:
#line 1024 "ebnf.y"
{NEDC( yyval = do_op( 2, '^', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 244:
#line 1028 "ebnf.y"
{NEDC( yyval = do_addminus(yyvsp[0]); );
    break;}
case 245:
#line 1031 "ebnf.y"
{NEDC( yyval = do_op( 2, '=', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 246:
#line 1033 "ebnf.y"
{NEDC( yyval = do_op( 2, '!', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 247:
#line 1035 "ebnf.y"
{NEDC( yyval = do_op( 2, '>', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 248:
#line 1037 "ebnf.y"
{NEDC( yyval = do_op( 2, '}', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 249:
#line 1039 "ebnf.y"
{NEDC( yyval = do_op( 2, '<', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 250:
#line 1041 "ebnf.y"
{NEDC( yyval = do_op( 2, '{', yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 251:
#line 1044 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("bool_and"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 252:
#line 1046 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("bool_or"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 253:
#line 1048 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("bool_xor"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 254:
#line 1051 "ebnf.y"
{NEDC( yyval = do_func(1,jar_strdup("bool_not"), yyvsp[0],NULL,NULL); );
    break;}
case 255:
#line 1054 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("bin_and"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 256:
#line 1056 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("bin_or"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 257:
#line 1058 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("bin_xor"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 258:
#line 1061 "ebnf.y"
{NEDC( yyval = do_func(1,jar_strdup("bin_compl"), yyvsp[0],NULL,NULL); );
    break;}
case 259:
#line 1063 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("shift_left"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 260:
#line 1065 "ebnf.y"
{NEDC( yyval = do_func(2,jar_strdup("shift_right"), yyvsp[-2],yyvsp[0],NULL); );
    break;}
case 261:
#line 1067 "ebnf.y"
{NEDC( yyval = do_op( 3, '?', yyvsp[-4],yyvsp[-2],yyvsp[0]); );
    break;}
case 262:
#line 1069 "ebnf.y"
{NEDC( yyval = do_func(0,yyvsp[-2], NULL,NULL,NULL); );
    break;}
case 263:
#line 1071 "ebnf.y"
{NEDC( yyval = do_func(1,yyvsp[-3], yyvsp[-1],NULL,NULL); );
    break;}
case 264:
#line 1073 "ebnf.y"
{NEDC( yyval = do_func(2,yyvsp[-5], yyvsp[-3],yyvsp[-1],NULL); );
    break;}
case 265:
#line 1075 "ebnf.y"
{NEDC( yyval = do_func(3,yyvsp[-7], yyvsp[-5],yyvsp[-3],yyvsp[-1]); );
    break;}
case 271:
#line 1088 "ebnf.y"
{NEDC( yyval = do_parname (yyvsp[0],0,0); );
    break;}
case 272:
#line 1090 "ebnf.y"
{NEDC( yyval = do_parname (yyvsp[0],0,1); );
    break;}
case 273:
#line 1092 "ebnf.y"
{NEDC( yyval = do_parname (yyvsp[0],1,0); );
    break;}
case 274:
#line 1094 "ebnf.y"
{NEDC( yyval = do_parname (yyvsp[0],1,0); );
    break;}
case 275:
#line 1096 "ebnf.y"
{NEDC( yyval = do_parname (yyvsp[0],1,1); );
    break;}
case 276:
#line 1101 "ebnf.y"
{NEDC( yyval = make_literal_expr(TYPE_STRING,yyvsp[0]); );
    break;}
case 277:
#line 1106 "ebnf.y"
{NEDC( yyval = make_literal_expr(TYPE_BOOL,jar_strdup("TRUE")); );
    break;}
case 278:
#line 1108 "ebnf.y"
{NEDC( yyval = make_literal_expr(TYPE_BOOL,jar_strdup("FALSE")); );
    break;}
case 279:
#line 1113 "ebnf.y"
{NEDC( yyval = make_literal_expr(TYPE_NUMERIC,yyvsp[0]); );
    break;}
case 280:
#line 1118 "ebnf.y"
{NEDC( yyval = make_literal_expr(TYPE_NUMERIC,jar_strdup("(long)sub_i")); );
    break;}
case 281:
#line 1120 "ebnf.y"
{NEDC( yyval = do_sizeof (yyvsp[-1]); );
    break;}
case 285:
#line 1131 "ebnf.y"
{NEDC( yyval = do_timeconstant(yyvsp[-2],yyvsp[-1],yyvsp[0]); );
    break;}
case 286:
#line 1133 "ebnf.y"
{NEDC( yyval = do_timeconstant(yyvsp[-2],yyvsp[-1],yyvsp[0]); );
    break;}
case 287:
#line 1135 "ebnf.y"
{NEDC( yyval = do_timeconstant(yyvsp[-1],yyvsp[0],NULL); );
    break;}
case 288:
#line 1137 "ebnf.y"
{NEDC( yyval = do_timeconstant(yyvsp[-1],yyvsp[0],NULL); );
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1144 "ebnf.y"


//----------------------------------------------------------------------
// general bison/flex stuff:
//

char yyfailure[250] = "";
extern int yydebug; /* needed if compiled with yacc --VA */

extern char textbuf[];
extern char lasttextbuf[];

int runparse ()
{
#if YYDEBUG != 0      /* #if added --VA */
        yydebug = YYDEBUGGING_ON;
#endif
        pos.co = 0;
        pos.li = 1;
        prevpos = pos;

        strcpy (lasttextbuf, "");
        strcpy (yyfailure, "");

        if (yyin)
            yyrestart( yyin );

        return yyparse();
}

#ifdef DOING_NEDC

extern char current_fname[];

void yyerror (char *s)
{
        fflush (stdout);
        if (strlen (s))
                strcpy (yyfailure, s);
        if (yyfailure [strlen (yyfailure) - 1] != '\n')
                strcat (yyfailure, "\n");
        if (yyfailure [0] == '!')
                fprintf(stderr,
                        "Warning %s %d: %s",
                        current_fname, pos.li, yyfailure + 1);
        else
                /*-- fprintf(stderr,
                        "line %d: (E) %s----\t%s\n----\t%s\n\t%*s\n",
                        pos.li, yyfailure, lasttextbuf, textbuf, pos.co, "^");
                 -- shortened --VA*/
                fprintf(stderr,
                        "Error %s %d: %s> %s\n  %*s\n",
                        current_fname, pos.li, yyfailure, textbuf, pos.co, "^");
}

#endif


#ifdef DOING_GNED

void yyerror (char *s)
{
        if (strlen (s))
                strcpy (yyfailure, s);
        if (yyfailure [strlen(yyfailure)-1] == '\n')
                yyfailure [strlen(yyfailure)-1] = '\0';

        if (yyfailure [0] == '!')
                np->error('W', yyfailure, pos.li, pos.co);
        else
                np->error('E', yyfailure, pos.li, pos.co);
}

#endif


//----------------------------------------------------------------------
//
// stuff needed by GNED
//

#ifdef DOING_GNED

void setFileComment(int key)
{
    np->set(key,"comment", np->nedsource->getFileComment());
}

void setBannerComment(int key, YYLTYPE tokenpos)
{
    np->set(key,"banner-comment", np->nedsource->getBannerComment(tokenpos));
}

void setRightComment(int key, YYLTYPE tokenpos)
{
    np->set(key,"right-comment", np->nedsource->getTrailingComment(tokenpos));
}

void setTrailingComment(int key, YYLTYPE tokenpos)
{
    np->set(key,"trailing-comment", np->nedsource->getTrailingComment(tokenpos));
}

void setComments(int key, YYLTYPE pos)
{
    setBannerComment(key, pos);
    setRightComment(key, pos);
}

void setComments(int key, YYLTYPE firstpos, YYLTYPE lastpos)
{
    YYLTYPE pos = firstpos;
    pos.last_line = lastpos.last_line;
    pos.last_column = lastpos.last_column;

    setBannerComment(key, pos);
    setRightComment(key, pos);
}

int addChanAttr(int channel_key, char *attrname, YYLTYPE valuepos)
{
    int chanattr_key = np->create("chanattr", channel_key);
    np->set(chanattr_key,"name", attrname);
    np->set(chanattr_key,"value", valuepos);
    return chanattr_key;
}

int addParameter(int params_key, YYLTYPE namepos, int type)
{
   char *s;
   switch (type)
   {
       case TYPE_NUMERIC:   s = "numeric"; break;
       case TYPE_CONST_NUM: s = "numeric const"; break;
       case TYPE_STRING:    s = "string"; break;
       case TYPE_BOOL:      s = "bool"; break;
       case TYPE_ANYTYPE:   s = "anytype"; break;
       default: s="?";
   }

   int param_key = np->create("param", params_key);
   np->set(param_key, "name", namepos);
   np->set(param_key, "datatype", s);
   return param_key;
}

int addGate(int gates_key, YYLTYPE namepos, int is_in, int is_vector )
{
   int gate_key = np->create("gate", gates_key);
   np->set(gate_key, "name", namepos);
   np->set(gate_key, "gatetype", const_cast<char*> (is_in ? "in" : "out"));
   np->set(gate_key, "isvector", const_cast<char*> (is_vector ? "1" : "0"));
   return gate_key;
}

int addSubmodule(int submods_key, YYLTYPE namepos, YYLTYPE vectorpos,
                                  YYLTYPE typepos,YYLTYPE likepos)
{
   // cut off "[" and "]"
   vectorpos.first_column++;
   vectorpos.last_column--;

   int submod_key = np->create("submod", submods_key);
   np->set(submod_key, "name", namepos);
   np->set(submod_key, "type-name", typepos);
   np->set(submod_key, "vectorsize", vectorpos);
   np->set(submod_key, "like-name", likepos);

   return submod_key;
}

int addGateSize(int gatesizes_key, YYLTYPE namepos, YYLTYPE vectorpos)
{
   // cut off "[" and "]"
   vectorpos.first_column++;
   vectorpos.last_column--;

   int gatesize_key = np->create("gatesize", gatesizes_key);
   np->set(gatesize_key, "name", namepos);
   np->set(gatesize_key, "size", vectorpos);
   return gatesize_key;
}

int addSubstparam(int substparams_key, YYLTYPE namepos, YYLTYPE valuepos)
{
   int substparam_key = np->create("substparam", substparams_key);
   np->set(substparam_key, "name", namepos);
   np->set(substparam_key, "value", valuepos);
   return substparam_key;
}

int addSubstmachine(int substmachines_key, YYLTYPE namepos)
{
   int substmachine_key = np->create("substmachine", substmachines_key);
   np->set(substmachine_key, "value", namepos);
   return substmachine_key;
}

int addLoopVar(int forloop_key, YYLTYPE varnamepos, YYLTYPE frompos, YYLTYPE topos)
{
   int loopvar_key = np->create("loopvar", forloop_key);
   np->set(loopvar_key, "name", varnamepos);
   np->set(loopvar_key, "fromvalue", frompos);
   np->set(loopvar_key, "tovalue", topos);
   return loopvar_key;
}

int addConnAttr(int conn_key, char *attrname, YYLTYPE valuepos)
{
    int connattr_key = np->create("connattr", conn_key);
    np->set(connattr_key,"name", attrname);
    np->set(connattr_key,"value", valuepos);
    return connattr_key;
}


int addNetwork(int nedfile_key, YYLTYPE namepos, YYLTYPE typepos, YYLTYPE likepos)
{
   int network_key = np->create("network", nedfile_key);
   np->set(network_key, "name", namepos);
   np->set(network_key, "type-name", typepos);
   np->set(network_key, "like-name", likepos);

   return network_key;
}

int findSubmoduleKey(YYLTYPE modulenamepos)
{
   int key = np->findChild(SUBMODS_KEY,"name",np->nedsource->get(modulenamepos));

   if (key==-1)
      yyerror("invalid submodule name");
   else if (key==-2)
      yyerror("nonunique submodule name");
   return key;
}

YYLTYPE trimBrackets(YYLTYPE vectorpos)
{
   // should check it's really brackets that get chopped off
   vectorpos.first_column++;
   vectorpos.last_column--;
   return vectorpos;
}

YYLTYPE trimQuotes(YYLTYPE vectorpos)
{
   // should check it's really quotes that get chopped off
   vectorpos.first_column++;
   vectorpos.last_column--;
   return vectorpos;
}

void swapConnection(int conn_key)
{
   np->swap(conn_key, "src-ownerkey", "dest-ownerkey");
   np->swap(conn_key, "srcgate", "destgate");
   np->swap(conn_key, "src-mod-index", "dest-mod-index");
   np->swap(conn_key, "src-gate-index", "dest-gate-index");
}

void setDisplayString(int key, YYLTYPE dispstrpos)
{
  // cut off quotes
  dispstrpos.first_column++;
  dispstrpos.last_column--;

  np->set(key,"displaystring", np->nedsource->get(dispstrpos) );
}


#endif



