//=========================================================================
//  VECTORFILEINDEXER.CC - part of
//                  OMNeT++/OMNEST
//           Discrete System Simulation in C++
//
//=========================================================================

/*--------------------------------------------------------------*
  Copyright (C) 1992-2005 Andras Varga

  This file is distributed WITHOUT ANY WARRANTY. See the file
  `license' for details on this and other legal matters.
*--------------------------------------------------------------*/

#include <sys/stat.h>
#include <errno.h>
#include "resultfilemanager.h"
#include "nodetype.h"
#include "nodetyperegistry.h"
#include "dataflowmanager.h"
#include "vectorfilereader.h"
#include "ivectorfilewriter.h"
#include "vectorfileindexer.h"

static std::string createIndexFileName(const std::string fileName)
{
    std::string indexFileName = fileName;
    std::string::size_type index = indexFileName.rfind('.');
    if (index != std::string::npos)
        indexFileName.replace(index, std::string::npos, ".vci");
    else
        indexFileName.append(".vci");
    return indexFileName;
}

static inline bool existsFile(const std::string fileName)
{
    struct stat s;
    return stat(fileName.c_str(), &s)==0;
}

static std::string createTempFileName(const std::string baseFileName)
{
    std::string prefix = baseFileName;
    prefix.append(".temp");
    std::string tmpFileName = prefix;
    int serial = 0;
    char buffer[11];
    while (existsFile(tmpFileName))
        tmpFileName = prefix+itoa(serial++, buffer, 10);
    return tmpFileName;
}

void VectorFileIndexer::generateIndex(const char* fileName)
{
        // load file
        ResultFileManager resultFileManager;
        ResultFile *f = resultFileManager.loadFile(fileName); // TODO: limit number of lines read
        if (!f)
        {
            throw opp_runtime_error("Error: %s: load() returned null", fileName);
        }
        else if (f->numUnrecognizedLines>0)
        {
            fprintf(stderr, "WARNING: %s: %d invalid/incomplete lines out of %d\n", fileName, f->numUnrecognizedLines, f->numLines);
        }


        //
        // assemble dataflow network for vectors
        //
        DataflowManager *dataflowManager = new DataflowManager;

        // create filereader node
        NodeType *readerNodeType=NodeTypeRegistry::instance()->getNodeType("vectorfilereader");
        StringMap attrs;
        attrs["filename"] = fileName;
        VectorFileReaderNode *reader = (VectorFileReaderNode*)readerNodeType->create(dataflowManager, attrs);

        // create filewriter node
        NodeType *writerNodeType=NodeTypeRegistry::instance()->getNodeType("indexedvectorfilewriter");
        std::string tmpFileName=createTempFileName(fileName);
        attrs.clear();
        attrs["fileheader"]="# generated by scavetool";
        attrs["blocksize"]="65536";
        attrs["filename"]=tmpFileName;
        attrs["indexfilename"]=createIndexFileName(fileName);
        IndexedVectorFileWriterNode *writer = (IndexedVectorFileWriterNode*)writerNodeType->create(dataflowManager, attrs);

        // create a ports for each vector on reader node and writer node and connect them
        IDList vectorIDList = resultFileManager.getAllVectors();
        for (int i=0; i<vectorIDList.size(); i++)
        {
             const VectorResult& vector = resultFileManager.getVector(vectorIDList.get(i));
             Port *readerPort = reader->addVector(vector.vectorId);
             Port *writerPort = writer->addVector(vector.vectorId, *(vector.moduleNameRef), *(vector.nameRef));
             dataflowManager->connect(readerPort, writerPort);
        }

        // run!
        dataflowManager->execute();
        delete dataflowManager;

        // rename
        if (unlink(fileName)!=0 && errno!=ENOENT)
            throw opp_runtime_error("Cannot remove original file `%s': %s", fileName, strerror(errno));
        else if (rename(tmpFileName.c_str(), fileName)!=0)
            throw opp_runtime_error("Cannot rename vector file from '%s' to '%s': %s", tmpFileName.c_str(), fileName, strerror(errno));
}
