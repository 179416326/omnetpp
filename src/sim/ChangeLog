#93  Dec 6, 1996:
  - bug fixed which caused double delay on links
  - deliver() moved from cMod to cGate
#94  Dec 6, 1996:
  - changed: cGate, cLinkType, connect()
#95  Dec 8, 1996:
  - `members' added to cSimpleMod
  - modified cLinkType
  - error fixed in cGate::setlink()
#101 Feb 12, 1997:
  - data rate support added
  - sendmsgdelayed() added
#102 Feb 13, 1997:
  - cPar cleaned up:
      o  types U,N,E,B,I removed
      o  truncate flag removed
      o  list of allowed type removed
      o  last value preserving removed
      o  parchanges removed
      o  modpar flag removed
      o  in constructor, type string changed to type char
      o  constructor no longer takes prompt as arg
      o  valuechanged() ---renamed to---> valuechanges()
      o  less default conversions (they caused confusion)
      o  settext() simplified
  - features added to cPar:
      o  MathFunc w/ 0,1,2,3 constant args added (new: F type)
      o  indirection type (I)
      o  sXElem changed (for example, referto() was removed)
  - cModPar:
      o  made to be a cPar descendant
      o  "new" feature: module parameter logging (works thru valuechanges())
  - cVal, valuelist, findval() etc. removed
  - cMod:
      o  iscompound(), cpd flag removed
      o  issimple() now works through being virtual
      o  precomp flag, isprecomp() removed (no one used it)
      o  added: ancestorpar( char *s );
  - cCompMod renamed to cCompoundMod
  - cMsg function names changed
      o  setprior() --> setpriority()
      o  setlen() --> setlength()
      o  seterr() --> seterror()
    New field: timestamp
         void settimestamp( [simtime_t t] );
         simtime_t timestamp();
  - cSimulation:
      o new fields cOutFileMgr parchangefilemgr, bool logparchanges
      o outfilemgr --renamed--> outvectfilemgr
  - cOutFileMgr:
      o  interface changed
      o  new: '##'-to-run-number substitution in file names
      o  deletefile() added
  - oObj::restore(), cHead::restore() functions deleted (were only used by cVal)
  - cObj constructor more optimized, cobj.h commented
  - IMPORTANT: operator=() no longer copies object name!!!! It should be
    done separately if needed. Copy constructor DOES copy the name.
#103 Feb 20, 1997:
  - bugfixes on #102
#104 Feb 27, 1997:
  - bugfixes on #103
  - intuniform() distribution added
#105 Feb 28, 1997:
  - cSimulation: cleaned up network setup/delete stuff
     newnetwork() --renamed--> setupnetwork(cNetworkType n, int run_number)
     clear() --renamed--> deletenetwork()
     restart() --renamed--> startrun()
     endrun(): new function
     setsize(n), setrun(n): removed
     getrun() --renamed--> getrunnumber()
     getnetwork() --renamed--> getnetworktype()
  - cOutFileMgr: bugfixes
#106 Feb 28, 1997:
  - minor changes
#107 Feb 28, 1997:
  - info() member functions fixed
#108 Mar 3, 1997:
  - multiple random number generators (genk_xxx functions) added
  - added check for seed=0
#109 Mar 3, 1997:
  - cVarShell renamed to cWatch
#109b Mar 4, 1997:
  - cResult renamed to sStatBase
  - cDoubleDistrResult renamed to cDoubleHistogram
  - cLintDistrResult renamed to cLongHistogram
  - cLintResult, cDoubleResult were commented out
  - cDoubleStatResult renamed to cDoubleStat
  - cLintResult renamed to cLongStat
  - cDoubleHistogram::fwrite(FILE *f) added
  - cDoubleHistogram::fread(FILE *f) added
#109c Mar 5, 1997:
  - cPiSquare sources added
  - makelib corrected
#109d Mar 5, 1997:
  - cDoubleStat::fwrite(FILE *f) added
  - cDoubleStat::fread(FILE *f) added
  - cDoubleHistogram::fwrite/fread functions use the functions above
  - cDoubleHistogram may read two different formats: cDoubleStat included
    or not included. But it still does NOT calculate the statistical values!
  - some functions of cStatBase were made to be pure virtual
#109e Mar 5, 1997:
  - cPiSquare::fwrite(FILE *f) added
  - cPiSquare::fread(FILE *f) added
#110 Mar 6, 1997
#111 Mar 7, 1997
  - minor improvements
  - PVM stuff updated; cPiSquare::pvm_pack()/upack() added
#112 Mar 8, 1997
  - cModType adds missing "default" machine parameter
  - put cGate into separate header and cc files
  - added: cGate::transm_finishes, busy(), restart() etc.
#113 Mar 9, 1997
  - Bug fixes
#114 Mar 10, 1997
  - cLongStat::fwrite/fwrite added
  - cLongHistogram::fwrite/fread added
  - some bugfixes in cDoubleHistogram::fwrite/fread done
#115 Mar 10, 1997
  - Define_Simple_Module_Like() macro added
#116,#117 Mar 11, 1997
  - improvement on statistics classes
#118 Mar 13, 1997
  improvements on histograms:
  - both histograms have a range_ext_factor
  - all range calculation and extension (if a sample falls out) are rewritten
  - histogram calculates the c...Stat values if they are missing. (see #109d)
#119 Mar 13, 1997
  improvements on histograms:
  - precollect_sample_num introduced
  - cellwidth -> cellsize
  - 1/rangecoeff -> cellsize
#120 Mar 14, 1997
  The hierarchy of the statistics collecting classes is completely rewritten
  - cStatistic : abstract class
  - cSimpleStatistic replaces both cLongStat and cDoubleStat and is like
      cDoubleStat was
  - cHistogramBase : abstract class, contains all the common parts of
      cLongHistogram and cDoubleHistogram
#120a Mar 14, 1997
  The range of the Histogram will be NOT recalculated
  - steps were taken towards this solution....
  - cell_under/cell_over is saved/loaded,
  - cDoubleHistogram::collectTransformed() is rewritten and may be moved to
    cHistogramBase if everything seems to be OK. (only transform() should be
    different)
#120b Mar 15, 1997
  Module parameter logging bug fixed.
  Histogram classes:
  - pvmpack.cc updated
  - changed names: categorynr --> num_cells
                   precoll_samples_num --> num_firstvals
  - basepts(), basepoint(k) finished
  PiSquare also updated (because cStatistic interface has changed in #120)
  - PiSquare's basepoint(), counter() are not correct!!!
#120c Mar 15, 1997
  - cPvmSimpleMod and cSimulation.setupnetwork() modified
#120d Mar 16, 1997
  - bugfixes
#120e Mar 17, 1997
  - separate cstat.h/cc and chist.h/cc files
#120f Mar 17, 1997
  - cLongHistogram::transform() rewritten
#120g Mar 17, 1997
  - bugfixes in histogram
#120h Mar 18, 1997
  - random() written in histograms
  - class string bug fixed
#120i Mar 18, 1997
  - cLongHistogram::transform() improved
#121 Mar 21, 1997
  - cGate::writecontents() added
  - cGate::isconnected() corrected (now checks if module is local or not)
  - histogram basepoints() bug fixed
  - bool isslaveprocess() added to cnetmod.h/.cc, pvmmod.cc
#122 Mar 21,1997
  - is_started_as_master() function added
  - pvmmod.cc improved
  - compatible with envir86
#123 Mar 24,1997
  - eliminated some warnings (implicit double->int conversions etc)
  - pvmmod.cc improved: added further informative messages to slave mode
  - chist.cc added to makefile
#124 Mar 24, 1997
  - range_ext_direction added to cHistogramBase
    -1: extend downwards
    +1: extend upwards
     0: symmetric extension (as it was before)
     (also updated in pvm/pvmpack.cc)
  - cHistogramBase::fwrite()/fread bug fixes
#125 Mar 24, 1997
  Bugfixes
  - (histogram interval  upper limit...)
  - cSimulation::deletenetwork() should do nothing if no network exists
#125a Mar 25, 1997
  - cPiSquare: basepoints(),counter() fixed; pdfx(), cdfx() corrected
  - cpvmmod.cc changed
  - (histogram interval  upper limit...)
  - cSimulation::deletenetwork() should do nothing if no network exists
#125b Mar 25, 1997
  - bugfixes in cstat, chist and cpsquare
  - exit() call after floating point exception was removed
#126 Apr 1, 1997
  - added args to cObj::inspector(): inspector(int type, void *data)
    change affects Tvenv & Tkenv
  - fixed a bug in cPvmSimpleMod's start_segments()
#127 Apr 6, 1997
  - iterators (cIter, cQIter, cSubmodIter):
    added XXX *op() to be used instead of XXX& op[0]. Old one kept for
    compatibility
  - cOutVect: inspector support added (as a callback function)
  - ev.messagedelivered( msg ) added to getnewmsg()
  - STARTUPERROR_MODE return value added to is_started_as_master()
  - compatible with: envir88, tkenv21, tvenv77
#128 Apr 12, 1997
  - more TInspector friend classes added to cMod
  - meaningful cGate::info() implemented
  - DUMMY_INSPECTOR macro corrected
#129 Apr 17, 1997
  - friend class TOutVectorWindow added to cOutVector
  - histograms: underflowcell_rmin and overflowcell_rmax introduced
    (sizes of underflow/overflow cells are now multiples of cellsize)
#129a Apr 18, 1997
  - histograms: underflowcell_rmin and overflowcell_rmax added to pvmpack.cc
    too
#130 Apr 22, 1997
  - event_num, geteventnumber(), incr_eventnumber() added to cSimulation
  - realtimewait() removed (commented out)
  - nextmodule() changed so that it does not have any side effects
    (except for generating error messages)
  - name of cMod::stepmode changed to cMod::pause_in_sendmsg which is
    closer to what it does
  - compatibility: at least envir90, tkenv30, tvenv79
#131 May 9, 1997 // --LG
  - double cHistogramBase::pdf(double x) probability density function
#132 May 13, 1997 // --LG
  - unsigned long cHistogramBase::getcell{under|over}() added
#133 May 22, 1997 // --LG
  - carray.cc/h: cBag::addat(int, void*)
                 cBag::cBag(..., int esiz=4, ...)
  - chist.cc/h: virtual cHistogramBase::deletefirstvals() and other things ...
                virtual cHistogramBase::recreatefirstvals()
                virtual cHistogramBase::putinFirstVal(int, double)
#134 Jun 20, 1997
  - a bug in the coroutine package fixed
  - cSimpleStatistic::getstddev() changed
  - cMsg::info changed
#135 Jun 23, 1997
  - cleaned up things in chist.cc
#136 Jun 26, 1997
  - cMsg::info() changed
#137 Jun 30, 1997
  - cPar::gettext() bug fixed (didn't work with 'I' (indirection) type)
  - loop in cQueue::foreach() changed direction (now: tail --> head)
  - simtimeToStr() function rewritten
#138 Jul 1, 1997
  - simtimeToStr() function modified
#139 Jul 6, 1997
  - ctype.h/cc changed: consistency check of different module interfaces
  - handling of CONST module parameters placed in cModType
#140 Jul 10, 1997
  - makefile modified to work with Cygnus gcc on Win95/NT
#141 Jul 20, 1997
  Changes in PVM stuff:
  - debugged by Gabor Lencse: fixes in csimul.cc and pvm/pvmmod.cc
  - SINGLE_HOST #define added to pvmmod.cc: if turned on, OMNeT++ runs
    all segments of a distributed simulation on the local host, to facilitate
    debugging. (Needs PVM running though!)
  - stopping a distributed simulation doesn't work yet
#142 Aug 4, 1997
  PVM stuff: all segments of a distributed simulation stops correctly now.
  Affected files:
    pvmmod.cc: cPVMSimpleMod's stopallsegments(), request_stopsimulation(),
               process_pvm_msg()
    csimul.cc: cSimulation's error(), printmsg(), warnings() functions
               eSTOPSIMRCVD error message added
#143 Aug 5, 1997
  - new function upack_object added to pvmpack.cc;
  - net_pack()/net_upack() functions improved
#144 Aug 6, 1997
  In defs.h, MAXTIME changed from 1eXXX to HUGE_VAL
  Changed cNetSimpleMod's base class from cSimpleMod to cMod
  Renamed: cNetSimpleMod --> cNetMod,  cPvmSimpleMod --> cPvmMod
  Synchronization mechanism added to PVM stuff.
  - new user function: cSimpleMod::syncpoint(t,gate) -- blocks destination
    segment until a cMsg sent at t (or later) through specified gate arrives.
  - several new functions and changes to cNetMod and cPvmMod to implement
    the above
  - cSimulation::nextmodule() rewritten
  NOT finished, NOT tested!!!
#144a Aug 7, 1997
  - cleaned-up version of #144; must be tested still
#144b Aug 7, 1997
  - DEBUG_PVM #define added to pvmmod.cc
  - active wait removed from block_on_syncpoint
  - several small improvements on PVM stuff
#144c Aug 8, 1997
  - remaining active waits removed
  - added process_netmsgs() calls to cSimulation::setupnetwork()
  - small improvements on PVM stuff
  - renamed functions:
      signal_startofrun() --> send_runnumber()
      wait_startofrun()   --> receive_runnumber()
  - compatible with: envir100
#144d Aug 9, 1997
  - bug removed from process_netmsg_blocking()
#144e Aug 13, 1997
  - two bugs fixed in cHistogramBase::operator=()
  - cancelsyncpoint() function added
#145a Aug 15, 1997
  - cMsgHeap class added and installed as FES
    (new files cmsgheap.h/cc, changes in cmod.cc, csimul.h/cc)
  - a bug introduced in #143 into cArray::foreach() fixed
#145b Aug 17, 1997
  - insertordr added to cMsg and cMsgHeap. This way messages with the same
    times and priorities can be retreived from the message queue in their
    insertion order.
  - netif_check_freq added to cSimulation and nextmodule()
  - cObj::lastchildp removed
#146 Aug 17, 1997
  cQueue interface changed:
    bool isenqueued(cObj *obj)
    void inserthead(cObj *obj)
    void insertbefore(cObj *p, cObj *obj), void insertafter(cObj *p, cObj *obj);
    cObj *peektail(), cObj *peekhead()
    cObj *get(cObj *obj), cObj *gettail(), gethead()
#146a Aug 17, 1997
  - carray.cc/h split to: carray.cc/h, cqueue.cc/h, chead.cc/h, cwatch.cc/h
  - ev.extrastack() support
  - compatibility: envir101 or later
#146b Aug 17, 1997
  - cMsg::info() changed; now it prints "(starter msg)" for msgs that start
    simple modules at the beg. of simulation
#147 Oct 2, 1997
  - cleaned up & renamed several member functions and classes
    Changed class names:
         cObj             --> cObject
         cMod             --> cModule
         cSimpleMod       --> cSimpleModule
         cCompoundMod     --> cCompoundModule
         cMsg             --> cMessage
         cMsgHeap         --> cMessageHeap
         cPiSquare        --> cPSquare
         cModPar          --> cModulePar
         cSimpleStatistic --> cStdDev
         cIter            --> cIterator
         cSubmodIter      --> cSubModIterator
         cQueueIter       --> cQueueIterator
         cMsgHeapIter     --> cMessageHeapIterator
         cTDResult        --> cTransientDetection
         cRAResult        --> cAccuracyDetection
         cTDAlg1          --> cTDExpandingWindows
         cRAAlg1          --> cADByStddev
#148 Oct 6, 1997
  - cKSplit added
  - contains a new version of cPSquare
  - cleaned up & renamed several member functions and classes
  - arg.list to snapshot() changed
  - arg.list of constructor of histogram classes (cDoubleHistogram, cLongHistogram,
    cHistogramBase) changed. OLD USER CODE WILL STILL COMPILE BUT WONT'T WORK!
#148a-c Oct 6, 1997
  - small fixes
  - To Do: cKSplit: netPack,netUnpack,saveToFile,loadFromFile; clean up the rest
#148d-e Oct 12, 1997
  - cKSplit::isa() corrected to isA(); fixed point shift increased to 10000
  - stat. classes: cell()'s return value changed from 'unsigned int' to
    'double'
  - cKSplit::transform() added
  - corrected cells() in all classes to return 0 if not transformed yet
#149 Nov 23, 1997
  - bugs in cKSplit's copy constructor and ksplitInsert() fixed
  - LG's "Bad msg kind" bug fixed in selectNextModule()
  - selectNextModule() rewritten
  - table of error messages modified
  - "not owner of message" error msg improved
  - error message for inconsistent module declarations made more informative
  - cosmetics on pvmmod.cc
#150 Dec 13, 1997
  - cModuleType split into cModuleInterface and cModuleType;
  - Module..End declaration no longer needed for simple module.
  - joined Define_Simple_Module and Define_Compound_Module macros
    to Define_Module macro.
  - Compatible with jar98 and up
#151 Dec 13, 1997
  - renamings for clarity:
     cModule:
       subscript() --> id()
       setSubscript() --> setId()
     cGate:
       ownerGate --> id()
       setlink --> setLink()
     cMessage:
       sentFromModule() --> senderModuleId()
       sentFromGate() --> senderGateId()
       arrivedInModule() --> arrivalModuleId()
       arrivedOnGate() --> arrivalGateId()
       new functions:
       cGate *senderGate(), cGate *arrivalGate()
#152 Dec 29, 1997
  - strToSimtime0() function added
  - cPar::setFromText() rewritten:
     better & more consistent error handling, more informative error messages
     supports writing time units in ini files:
       Net.Gen.stop_at = 1h 30m
       Net.Gen.ia_time = uniform(10s,15s)
  - comments added to ctypes.cc
#153 Dec 29, 1997
  - 'cHead members' moved from cSimpleModule to cModule
  - cModuleType::create() modified so that it automatically puts
    member objects of module classes to the members list, so there's
    no need to do setOwner(&members) calls from the constructor.
    (However, they do no harm if they are there.)
  - module IDs made unique during whole simulation: old IDs are no longer
    reused.
#154 Feb 8, 1998
  - some Define_Functions()'s added to support jar102-compiled expressions
  - char type, &|! sXElem operators removed from cPar, # sXElem op.
    renamed to !.
#155 Feb 15, 1998
  - cSimpleModule::finish() function added -- user can redefine it and
    it will be called at the end of the simulation run
  - makefile made compatible with new configure script
  - 'lib' prepended to library names under Unix - now they can le linked with
    -lsim_std or -lsim_pvm option
  - pvm3.h deleted from package
#156 April 14, 1998
  - cModule: setDisplayString(type,str) and displayString(type) added.
    type: dispSUBMOD or dispENCLOSINGMOD
    cGate: setDisplayString(str) and displayString() correspond to the
    display string of the connection starting from that gate.
    The values of these strings will come from GNED through NED's
    "display:" phrases, and they will hold information about how the module
    should be displayed in Tkenv or other GUI animation/interactive
    simulation tool.
    The exact format of the strings are documented in GNED's version.log.
 -  cModule: gatev, paramv made public (because of the inspectors...)
#157 April 24, 1998
 -  2 bugs fixed
#158 April 26, 1998
 - makefile can now create shared objects (libsim_std.so, libsim_pvm.so)
#159 May 11, 1998
 - small improvement on the ksplit files
#160 June 1, 1998
 - cDensityEstBase added; it greatly simplifies all density estimation classes!
 - all density estimation classes rewritten with cDensityEstBase
 - cVarHistogram added
 - underflow/overflow cells removed (but underflow/overflow counts still maintained)
 - cKSplit cleaned up a little
 - saveToFile()/loadFromFile() file formats cleaned up and loading made
   safer. Occasional runtime errors may occur due to fprintf'ing uninitialised
   double vars.
#161 June 4, 1998
 - bugfixes on histogram classes
 - cKSplit::rangeExtension() member function added
 - cMessage::encapsulate(msg), decapsulate(), encapsulatedMsg() member
   functions added
#161a June 9, 1998
 - return type of cModule::gate(...) changed from cGate& to cGate*
 - return type of cModule::moduleType(...) changed from cModuleType& to cModuleType*
 - cSimulation::find(cModule&) changed to cSimulation::find(cModule*)
 - cMessage::addPar(char *parname) and cMessage::addPar(cPar *par) added
 - class cWeightedStdDev added
#161b June 9, 1998
 - cModule::recordScalar(name,value) and recordStats(name,statistic) added
 - cSimpleModule::finish() bug fixed
 - cPar::equalsTo(cPar *par) added
#161c June 9, 1998
 - class cLinkedList added
#161k June 11, 1998
 - class cTopology added
 - now gate vectors are guaranteed to be contiguous in the gatev array;
   gate lookup made a lot faster. Note that there can be holes
   in the gate vector.
 - cMessage::addLen(long l) added
#161n June 17, 1998
 - bugfixes on 161k
 - cMessage::addPar(..) functions' return value changed to cPar&
 - setDisplayStringNotify() functions added to cGate and cModule
#161o June 19, 1998
 - Now deleteModule() can also delete the currently executing module.
   The only remaining restriction is that a compound module cannot
   be deleted from one of its submodules.
#161p June 19, 1998
 - cMessage::creationTime() added
 - mystr...() functions renamed to opp_str...()
   (for compatibility, mystr... names are #defined to opp_str...)
 - ASSERT() added (similar to the assert() macro, also disappears with NDEBUG)
 - scalar file behavior corrected (only writes file if there's something to write)
 - cPar: new type void* added ('P'), old 'P' type (cObject *) was renamed
   to 'O'. Funcs: cObject *objectValue(), void *pointerValue()
   Memory management of void*: configPointer(...) func, similar to
   cLinkedList's method.
#161r June 23, 1998
 - new: cSimpleModule::error(): generates `user error'
 - cSimulation::callFinish() added
 - cSimulation's cModule& get() deleted, cModule *module(..) can be used
   instead
 - cSimulation's findModuleByPath()-->moduleByPath()
 - small fixes
#161s June 23, 1998
 - added bool cSimulation::normalTermination() which examines error code
#161t June 26, 1998
 - small fixes, adjustments
#162 July 2, 1998
 - improved error messages of send() variants; other small fixes
#162a-b July 10, 1998
 - cGate::info() corrected
 - cPar::info() corrected (now doesn't silently truncate string value)
 - cMessage::findPar() added
 - check for gate connectedness added to cModule::setGateSize()
 - modules and gates: vectors of size 1 and scalars made distinct
#163 July 15, 1998
 - eFINISH error code added; other small fixes
 - WATCH() made dynamic (new cWatch(...)) instead of auto to increase
   applicability. Old-style watch is retained as LWATCH().
#164 July 21, 1998
 - cOutVector support for 'probes'
 - bug fixed in pvm/pvmmod.cc
#165 July 24, 1998
 - ASSERT() bug fixed
 - display strings can be taken from ini file -- compatible with envir120 up
#166 August 12, 1998
 - project file for Borland C++ 5.0 added (sim_std.ide)
 - some code beautifying
 - cenvir.h moved here from the envir package
#167 August 14, 1998
 - linker bug with cWatch fixed
#167a August 17, 1998
 - too many 'simulation cancelled' error msg fixed
#167b August 19, 1998
 - some error messages improved
#168 August 21, 1998
 - cStat::collect(double,double) renamed to collect2()
   (conflicted with collect(double))
#169 August 22, 1998
 - cOutvector::collect() improved
#170a Dec 27, 1998
 Fixes:
 - ltoa() eliminated
 - vsscanf() replaced by opp_vsscanf()
 - defs.h and funcs.cc split to defs.h, util.h+cc, errmsg.h+cc
 - serious bug with stddev() corrected
 - writes to output vector file and parameter change file are now checked
 - string class renamed to opp_string to prevent name clashes with other
   class libs (e.g. STL)
 - cSimulation::doOneEvent() function introduced
 - runningmod_deleter's stack increased from 8K to 16K
 - now cancelEvent won't hang if the message was not actually scheduled
 Improvements:
 - coroutine library now detects stack overflows and able to tell actually
   used stack size (stackUsage())
 - new alternative message handling mechanism: handleMessage()
 - new file fsm.h: finite state machine for handleMessage()
 - reserved negative message kind values
 - cPacket class added
 - MK_INFO and MK_PACKET message kind values defined for cPackets
 - wait() and receive() with timeout made faster (now reuses timeout message)
#170b Dec 27, 1998
 - fixes on 170a
 - missing bc3make.bat added back (although omnetpp is probably _way_ too big
   for BC 3.1 and DOS real mode to handle...)
#170c Dec 30, 1998
 - makefile renamed to makefile.in
#170d-k Jan 1-3, 1999
 - refinements on the coroutine library; stackSize() added to cCoroutine
 - refinements on cPacket
 - restart() of c[Simple]Module removed (was not used)
 - optimizations around timeoutmsg and receive()
 - module state codes reduced to sREADY and sENDED
 - protocol.h added
 - misc bugfixes
#171 Jan 3, 1999
 - stable version
#172a Jan 25, 1999
 - inspector factories added
#172b Jan 26, 1999
 - recordScalar() for recording strings added
#172c-d Jan 26, 1999
 - calls to simulation.error() replaced by opp_error() to avoid having to
   #include csimul.cc (and half the sim. kernel with it) in each file;
   similar for opp_warning() and opp_terminate(). opp_terminate() is similar
   to opp_error(), only it does not include the word "error" in the message.
 - requires updated Envir and user interface libraries
#173 Jan 26, 1999
 - some cleanup
#174 Feb 7, 1999
 - stable version
#175 Jun 21, 1999
  - all sources checked in under CVS
  - makefile.in modified for use with GNU Autoconf; also renamed to Makefile.in
  - version.log renamed to ChangeLog
  - removed support for DOS with BC3.1
Jul 10, 1999
  - fixed bug in cQueue and cLinkedList (didn't always increment item count
    on insertion)
  - fixed bug in cPar::info(): didn't handle boolean (B) type
Aug 2, 1999
  - fixed the bug with randseed() [it was an error to call it without
    an argument] and split randseed(long seed=0) into 2 functions:
    randseed() and randseed(long seed).
  - fixed the bug in intrand(r) and genk_intrand(r) that caused division by
    zero if called with r==0; now r<=0 values cause runtime error
  - INTRAND_MAX corrected to 2**31-2
Aug 30, 1999
  - bool isScheduled() member added to cMessage: can be used to examine whether
    the message is in the Future Event Set
  - cancelEvent() behaviour changed: now it causes an error if the message
    is not in the Future Event Set. One should write code like this:
         if (msg->isScheduled())
             delete cancelEvent(msg);
         else
             // ???
    Or rather:
         if (msg->isScheduled())
             delete cancelEvent(msg);
         else if (putAsideQueue.contains(msg))
             delete putAsideQueue.get(msg);
         else
             // ???
  - cQueue::isEnqueued(cObject *) renamed to cQueue::contains(cObject *)
  - cLinkedList::isInList(void *) renamed to cLinkedList::contains(void *)
Sept 1, 1999
  - behavior of scheduleStart() changed: now it can be called (and does nothing)
    for modules using handleMessage(). The benefit is that this way code that
    creates simple modules dynamically doesn't have to know whether the module
    is using activity() or handleMessage(); the same code (which contains a
    call to scheduleStart()) can be used for both.
  - activate() [the boot procedure for simple module activity()] now checks if
    the message that starts the module is really a starter message (and not
    some other msg). This way, bugs caused by leaving out scheduleStart()
    for dynamically created modules can be detected.
  - wait() now makes sure it is called for a module using activity() and not
    handleMessage().
  - cModuleType now caches the cModuleInterface pointer. (Before it looked
    up the interface each time, based on the interface name.)
Sept 5, 1999
  - cSimpleModule's initialize(), activity(), handleMessage(), finish() made
    protected members so that they cannot be called directly by user code.
  - callInitialize() was added to cSimpleModule to enable calling initialize()
    from user code; callInitialize() was also added for cModule and
    cCompoundModule so that it can be used polimorphically.
  - added cModuleType::createInitStart(char *namestr, cModule *parentmod)
    convenience function to get a module up and running in one step.
    Does create()+buildInside()+callInitialize()+scheduleStart(now).
    Should work for both simple and compound modules.
    Not applicable if the module:
      - has parameters to be set
      - gate vector sizes to be set
      - gates to be connected before initialize()
    Now a simple module can be created on the fly by simply saying:
       mod = modtype->createAndInit("name",this);
       mod->scheduleStart( simTime() );
Sept 6, 1999
  - a couple of unsigned<-->signed changes (mostly in the statistics classes)
    to reduce the number of "gcc -Wall" warnings
Sept 7, 1999
  - initialize() and finish() moved to cModule, so you can define them also for
    compound modules
  - callInitialize() and callFinish() are also in cModule; they are defined
    in compound modules to recursively call themselves for submodules.
    callInitialize() for the compound module is called _before_, callFinish()
    is called _after_ the call on submodules.
------ omnetpp-2.0b released ------
Sept 20, 1999
  - bug fixed in cWeightedStdDev::collect2(): cStdDev::collect() was called
    with val instead of weight*val.
  - bug fixed with misplaced ev.messageDelivered() calls in the receiveNewOn()
    function
  - cOutVector::record() corrected: it should update the inspector even
    if it doesn't write to file
Sept 23, 1999
  - callInitialize() and scheduleStart() swapped in cSimulation's startRun()
    to support send()/scheduleAt() in initialize() to modules with activity().
  - same change made to createInitStart(), and it was renamed to
    createScheduleInit() to reflect the new order of what it does.
Oct 6, 1999
  - isSelfMessage() member function added to cMessage. It tells if the message
    was sent (using a send..() function) or posted by a scheduleAt() call.
  - a new void* pointer was added to cMessage. The pointer is set/returned by
    the setContextPointer(void *p) and contextPointer() functions, and it can
    be used for any purpose by the simulation programmer. It is not used by the
    simulation kernel, and it is treated as a mere pointer (no memory mgmt is
    done on it). Intended purpose: a module which schedules several
    self-messages (timers) will need to identify a self-message when it arrives
    back to the module, ie. the module will have to determine which timer
    went off and what to do then. The context pointer can be made to point
    at a data structure kept by the module which can carry enough "context"
    information about the event.
  - Remaining -Wall warnings: "%lf", "%lg", "%le" in printf format strings.
------ omnetpp-2.0b2 released ------
Nov 9,1999
  - iso c++ compatibility hack: in expressions like return s?s:"" the "" needs
    a cast to char* (to cast away constness). Added a CONST_CAST() macro until
    the source is made fully const-correct, hopefully in the near future.
Dec 4,1999
  - compiled with MSVC. Minor changes: changed int to bool, struct to class
    in some places. sim_std.dsp added. NOTE: one has to rename all .cc files
    to .cpp for compiling (ren *.cc *.cpp)!
Dec 5,1999
  - Makefile.vc added
Dec 18,1999
  - renamed isA() to className() in cObject and derived classes.
    A compatibility #define was temporarily added to defs.h to ease migration.
  - in cMessage, isbad() renamed to hasBitError(), isgood() removed, and
    setError() renamed to setBitError()
  - macro names in module interface declarations (Interface...End) changed to
    reduce chance of name clashes. This is internal to OMNeT++ and does not
    affect user code.
Dec 19,1999
 -  cPar interface cleaned up:
    o  overloaded setValue(..) functions were renamed to setStringValue(..),
       setLongValue(..), setBoolValue(..), etc., and the type character was
       deleted from their arg list. This was done to be consistent with the
       getter functions which already had the names stringValue(), longValue()
       etc., and to make client code more readable by eliminating "magic
       constants" (the type characters). This shouldn't affect much existing
       code, most users prefer assignment operator to these functions.
    o  redirection handling functions were changed to: setRedirection(cPar*),
       isRedirected(), cPar* redirection(), cancelRedirection(). This results
       in more readable client code. These functions are hardly used in any
       user code.
    o  the number of constructors was reduced to 3 by deleting the ones which
       set an initial long,string,etc. value. Prior to this cPar had
       16 constructors which made subclassing very cumbersome. Functionality
       is not lost because the user can write code like
          cPar par("par") = 5L;
       Existing client code like
          msg->addPar( *new cPar("dest", 'L', dest );
       can be rewritten like
          msg->addPar( *new cPar("dest") = dest );
       or better like
           msg->addPar("dest") = dest;
       Note that the two new and better forms have been available for a long
       time, so the change should not affect much existing code.
    o  conversons to/from bool were not fully supported
 - convenience function hasPar(char*) added to cMessage
 - convenience functions hasPar(char*) and hasGate(char*,int) added to cModule
 - cQueue and cLinkedList interfaces changed:
     insertHead(a) --> insert(a)  (the name was misleading: cQueue can act as
       priority queue and inserted elements aren't necessarily put at the head)
     peekTail()    --> tail()
     peekHead()    --> head()     (shorter names are preferred)
     get(a)        --> remove(a)  (the "get" word was misleading as it didn't
       imply that the element is actually removed from the queue)
     getTail()     --> pop()      ("get was misleading, see above;
       "pop" is used in other libs such as STL or Java for this operation)
     getHead() removed            (it can be expressed as q.remove(q.head()))
   Compatibility #defines added to defs.h for insertHead(a), peekTail(),
   peekHead(), getTail().
Jan 4,2000
 - cPar::setStringValue() now accepts NULL (and treats it as "")
Jan 15,2000
 - the 'explicit' keyword was added to a number of constructors, most notably
   cPar(char *name). The reason was that constructs like
      cPar p = "foo";
   did NOT compile as one would expect (i.e. to a cPar() construction followed
   by an assignment), but to a cPar p("foo") constructor call, which is quite
   different! ("foo" becomes the object's NAME instead of its value.)
   The explicit keyword is supported to prevent this from happening.
 - minor change: cSimulation::setErrorCode() added (was needed in Tkenv's
   startup code)
Jan 17,2000
 - The +,-,*,/,... operators which take cPar plus a numeric type (long/double)
   were removed from cpar.h. This affects some existing code: expressions like
   msg->par("count")+1 which used to compile now cause error ("too many possible
   conversions") and must be disabiguated by adding explicit casts like this:
   (int)msg->par("count")+1.
   Assigments (like: cPar p = 1; int i=p;) still work fine and don't need to be
   changed.
   The reason is that the ANSI C++ overload resolution rules have changed a few
   years ago, and now that compilers begin to be more compliant, it is
   difficult (~impossible) to write operator*/+-() functions with which code
   will compile well under both the old and the new resolution rules (which are
   likely to coexist for a few years to come). Ambiguity comes because cPar
   supports many conversions (double, int, long, unsigned int, unsigned long,
   char * [char* + int is also legal!], void *, etc.)  I feel that it is better
   (results in cleaner code) to use explicit type casts in expressions with
   cPar.
   This issue came up while porting to MSVC 6.0, see MSVC error C2666.
Jan 25, 2000
 - cArray functions changed to take and return cArray* instead of cArray&.
   This affects add(), addAt(), remove(), get() and op[].
------ omnetpp-2.0b3 released ------
Feb 3, 2000
 - some pvm-related bugs fixed.
Mar 12, 2000
 - pvm files really fixed. Debugging done by Gabor Lencse.
 - sum() and sqrSum() members added to statistics classes (cStdDev & subclasses)
 - cPar fix: boolValue(), longValue() and doubleValue() made rather liberal:
   now they all allow conversion from all of B,L and the double types D,T,X,F.
   This is necessary because of the way parameter assignments in NED are
   handled. For example, bool and long expressions (e.g. "i==0 || i==n") are
   compiled into cPar X expressions which will _need_ to be converted to
   bool/long after evaluation.
 - isNumeric() added to cPar
Mar 26, 2000
 - 'char *' pointers made const-correct (lots of 'char *' --> 'const char *'
   replacements throughout the code) -- this will affect the UI libraries too
 - header files indentation uniformized; other little cleanups, e.g. some
   method parameter names made mode descriptive
Mar 28, 2000
 - SIM_API macro added to public classes and functions to export them on Windows
April 6-10, 2000
 - Changes to enable linking a Windows DLL from the library. Note that the
   sim dll and envir.dll mutually depend on each other, so first we must build
   an import library from one to be able to link dlls from them. Thus, first
   we create envir.ilib [ilib=import library], then we can link sim_std.dll,
   and using sim_std.ilib we can link envir.dll...
   On Unix we don't have this problem: .so files are not linked against other
   libs (they are treated more like a collection of object files), and the
   dynamic loader acts practically as a linker and collects the symbols at
   runtime from the different .so files.
 - Remaining problem on Win32: user interface DLL cannot be loaded dynamically
   (e.g. with [General]/load-libs= ini file setting); the LoadLibrary() call
   returns error code. The problem is [probably] with the static objects
   in the DLL whose constructors are called [probably] during LoadLibrary()
   from DllMain(); these constructors want to write a global variable located
   outside the DLL. This was no problem on Unix but seems like Windows doesn't
   like it. To be verified that the error is really caused by this and not
   something else!!!
Apr 10, 2000
 - TRUE/FALSE (defines) replaced by true/false (C++ keywords)
 - operator=(cXXX& other) functions now include this line:
      if (this==&other) return *this;
 - indentation canonized (4 spaces) in most files (where I had the patience)
 - remove(cObject *) added to cArray
 - cArray error handling improved
 - Improved on functions for traversing module hierarchy. [suggestion by Niko]
   These functions were removed from cSimulation:
      int find(const char *modulename,int index=-1, int parentmod_id=-1);
      cModule *module(const char *modulename,int index=-1,int parentmod_id=-1);
      bool isUnique(const char *s);  // not needed
      int find(cModule *mod);  // was equivalent to mod->id()
   The first two have been replaced by functions in cModule:
      int findSubmodule(const char *submodname, int idx=-1); // moduleID (or -1)
      cModule *submodule(const char *submodname, int idx=-1);
   New function in cModule:
      cModule *moduleByRelativePath(const char *path);
   moduleByRelativePath() is similar to cSimulation::moduleByPath(), except that
   it starts the search at that module (e.g. mymod->moduleByRelativePath(
   "sub.subsub") returns the "subsub" submodule of the "sub" submodule of
   mymod).
 - in printf() statements, all "%lf","%lg","%le" were replaced by "%f","%g","%e"
 - in cmodule.h, the old NEW and DELETE macros (for raw memory allocation) were
   renamed to opp_new and opp_free. (Beware when using opp_free: it does NOT
   call the destructor of the passed object!)
Apr 19, 2000
 - bugfix: when using datarate and propagation delay at the same output gate,
   the gate's transmissionFinishes() function returned incorrect value:
   one had to substract the propagation delay to get the correct number.
   Fixed in cGate::deliver(cMessage *msg): transmission delay calculation
   should be done _before_ propagation delay.
 - in util.h, fastconcat() renamed to opp_concat(); compatibility #define added
May 5, 2000
 - setDisplayString() now works in Tkenv (sim/cmodule.cc also affected)
 - setDisplayString() got a new argument, bool immediate.  It specifies whether
   the display string change should take effect immediately, or only after
   processing the current event (default is immediate=true).
      If several display string changes are going to be done within one event,
   then immediate=false is useful because it reduces the number of necessary
   redraws. Immediate=false also uses less stack. But its drawback is that
   a setDisplayString() followed by a send() would actually be displayed
   in reverse order (message animation first), because message animations are
   performed immediately (actually within the send() call).
 - once we have setDisplayString(), seems like we'll need a display string
   parser/assembler object to be able to easily change specific values within
   the display string without bothering the rest of it. Maybe for the some
   next version; but if you want to contribute one, go ahead :-)
May 6, 2000
 - further char * --> const char * changes
 - displayString() added to cMessage. By default it returns an empty string;
   users have to subclass cMessage and redefine displayString() to get
   messages with custom appearance in Tkenv. (Not implemented yet in Tkenv!)
May 7, 2000
 - Makefile.vc improvements [from Balazs Kelemen]
May 19, 2000
 - fixed a bug in cSimulation::snapshot() which caused segfault if snapshot()
   was called with no 'label' parameter [reported by Gy. Pongor]
 - fixed a bug which caused double printing of the distribution data in
   histogram classes when snapshot() was called
May 21, 2000
 - added message sending functions which take cGate* pointers [suggested by
   Mark Rahner]:
      int send(cMessage *msg, cGate *outputgate);
      int sendDelayed(cMessage *msg, double delay, cGate *outputgate);
      int sendDirect(cMessage *msg, double delay, cGate *inputgate);
   (Mark's original suggestion was to create a single generalized
   send(cMessage *msg, double delay, cGate *gate) function which would combine
   the functionality of all other send()/sendDelayed()/sendDirect() variants,
   and mark other functions as 'deprecated'. The gate passed to send() could be
   that of another module [~sendDirect()] and either an input or an output gate;
   the delay argument would be interpreted as propagation delay until the msg
   reaches that gate. I didn't implement it for now because I felt such a very
   general function would cause confusion for simulation programmers,
   but I'd like to hear more opinions about this...)
 - multi-stage initialization support added. Modules have two new functions
   which can be redefined by the user:
      void initialize(int stage);
      int numInitStages();
   At the beginning of the simulation, initialize(0) is called for all modules,
   then initialize(1), initialize(2), etc. For each module, numInitStages()
   must be redefined to return the number of init stages required, e.g. for a
   two-stage init, numInitStages() should return 2, and initialize(int stage)
   must be implemented to handle the stage=0 and stage=1 cases.
   callInitialize() now performs the full multi-stage initialization for that
   module and all its submodules.
   Multi-stage initialization defaults to the good old single-stage initialize()
   function (without args): the default numInitStages() returns 1, and the
   default initialize(int stage) simply calls initialize().
------ omnetpp-2.0b4 released ------
Jun 4, 2000
 - fix: cPar::setfunction() improved and made const-correct (for gcc 2.95.2)
 - warnings eliminated from cllist.cc & coutvect.cc
------ omnetpp-2.0b5 released ------
Jan 3, 2001
 - number of cQueue methods made virtual to enable customizing cQueue
   (e.g. adding statistics for maintaining average queue length, etc.)
   [suggested by Holger Karl]
 - added static counters to the cMessage class (total_msgs, live_msgs);
   these variables are incremented/decremented by the cMessage constructor
   and destructor, and displayed in Tkenv. They can be very handy at
   checking for memory leaks.
 - changed the place where cSimpleModule's timeoutmsg is created: from the
   constructor to scheduleStart() which is also mandatorily called for
   activity() modules. Reason: "Total msgs" count in Tkenv incorrectly
   displayed zero at the beginning of the simulation, while the
   activation/timeout msg objects already existed)
Jan 15, 2001
 - bugfix: cQueue::insertBefore() and cQueue::insertAfter() didn't take
   the ownership of the inserted object [reported by Ulrich Kaage]
Jan 16, 2001
 - added OMNETPP_VERSION to defs.h (0x0200 for OMNeT++ 2.0)
Jan 24, 2001
 - bugfix: cArray and cBag didn't work properly after clear()
 - bugfix: makefile and makefile.vc didn't handle PVM properly [reported by
   Ahmet Sekercioglu]
Feb 5, 2001
 - ev<< and ev>> now supports cPar objects too [from Nicky van Foreest]
 - old BC3.1 support removed from cenvir.h
Feb 6, 2001
 - fix: Makefile.vc: 'clean' target didn't delete object files in std/ and pvm/
------ omnetpp-2.0 released ------
Feb 27, 2001
 - fixed bug which prevented compiling with PVM
------ omnetpp-2.0p1 released ------
Mar 10, 2001
 - Borland C++ support removed: I deleted the project files (*.ide). I added
   equivalent Makefile.bc files (generated from the BC IDE), but they are
   completely unsupported at the moment. If there's interest, it's possible
   that later I'll add makefiles for the free command-line bc5.5 compiler.

