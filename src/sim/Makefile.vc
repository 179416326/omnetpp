#
# Global definitions
#
!include ..\..\configuser.vc

# Make sure that output locations are set
!if "$(OMNETPP_BIN_DIR)"==""
!error OMNETPP_BIN_DIR must be correctly set
!endif
!if "$(OMNETPP_OUT_DIR)"==""
!error OMNETPP_OUT_DIR must be correctly set
!endif
!if "$(OMNETPP_LIB_DIR)"==""
!error OMNETPP_LIB_DIR must be correctly set
!endif

#
# Local definitions
#
LIBNAME=oppsim$D
O=$(OMNETPP_OUT_DIR)/$(OUTPUT_PREFIX)$(TOOLCHAIN_NAME)-$(MODE)/src/sim
L=$(OMNETPP_LIB_DIR)/$(OUTPUT_PREFIX)$(TOOLCHAIN_NAME)

COPTS=$(CFLAGS) -I. -I../common -I"$(OMNETPP_INCL_DIR)" -I"$(OMNETPP_INCL_DIR)/platdep" /Fd"$O/$(LIBNAME).pdb"
#COPTS=/C /P $(COPTS)
IMPLIBS=$O/../common/oppcommon$D.lib

OBJS_STD=\
    $O/carray.obj $O/cdelaychannel.obj $O/cdataratechannel.obj $O/cboolparimpl.obj $O/cchannel.obj \
    $O/cobjectfactory.obj $O/ccomponent.obj $O/ccomponenttype.obj $O/cconfiguration.obj $O/cconfigoption.obj \
    $O/ccanvas.obj $O/ccoroutine.obj $O/cdefaultlist.obj $O/cdensityestbase.obj \
    $O/cdetect.obj $O/cdisplaystring.obj $O/cdoubleparimpl.obj $O/cdynamicexpression.obj $O/cenvir.obj \
    $O/cenum.obj $O/cevent.obj $O/cexception.obj $O/cfsm.obj $O/cnedmathfunction.obj $O/cgate.obj $O/chistogram.obj \
    $O/cksplit.obj $O/clcg32.obj $O/clistener.obj $O/clog.obj $O/clongparimpl.obj $O/cmersennetwister.obj \
    $O/cmessage.obj $O/cpacket.obj $O/cmsgpar.obj $O/cmodule.obj $O/cmessageheap.obj $O/chasher.obj $O/ctimestampedvalue.obj \
    $O/cmatchexpression.obj $O/cpatternmatcher.obj $O/cmessageprinter.obj $O/cnullenvir.obj $O/envirext.obj \
    $O/cnedfunction.obj $O/cnedvalue.obj $O/cobject.obj $O/coutvector.obj $O/cnamedobject.obj \
    $O/cpar.obj $O/cparimpl.obj $O/cownedobject.obj $O/cproperties.obj $O/cproperty.obj \
    $O/cresultfilter.obj $O/cresultlistener.obj $O/cresultrecorder.obj $O/clifetimelistener.obj \
    $O/cpsquare.obj $O/cqueue.obj $O/cpacketqueue.obj $O/cscheduler.obj $O/csimplemodule.obj \
    $O/csimulation.obj $O/cstatistic.obj $O/cstddev.obj $O/cstlwatch.obj $O/cstringparimpl.obj \
    $O/cstringpool.obj $O/cstringtokenizer.obj $O/cclassdescriptor.obj $O/ctopology.obj $O/cvarhist.obj \
    $O/cvisitor.obj $O/cwatch.obj $O/cxmlelement.obj $O/cxmlparimpl.obj $O/distrib.obj $O/nedfunctions.obj \
    $O/errmsg.obj $O/globals.obj $O/cregistrationlist.obj $O/lex.expryy.obj $O/minixpath.obj $O/onstartup.obj \
    $O/simtime.obj $O/task.obj $O/util.obj  $O/expr.tab.obj $O/nedsupport.obj $O/sim_std_m.obj \
    $O/resultfilters.obj $O/resultrecorders.obj $O/ccommbuffer.obj $O/cparsimcomm.obj

OBJS_NETBUILDER=\
    $O/netbuilder/cexpressionbuilder.obj \
    $O/netbuilder/cneddeclaration.obj \
    $O/netbuilder/cnedloader.obj \
    $O/netbuilder/cdynamicchanneltype.obj \
    $O/netbuilder/cdynamicmoduletype.obj \
    $O/netbuilder/cnednetworkbuilder.obj

OBJS_PARSIM=\
    $O/parsim/cmemcommbuffer.obj \
    $O/parsim/cparsimpartition.obj $O/parsim/cplaceholdermod.obj $O/parsim/cproxygate.obj \
    $O/parsim/cparsimsynchr.obj $O/parsim/cparsimprotocolbase.obj $O/parsim/cnosynchronization.obj \
    $O/parsim/cnullmessageprot.obj $O/parsim/clinkdelaylookahead.obj \
    $O/parsim/cidealsimulationprot.obj $O/parsim/cispeventlogger.obj \
    $O/parsim/ccommbufferbase.obj $O/parsim/cfilecomm.obj \
    $O/parsim/cfilecommbuffer.obj $O/parsim/cnamedpipecomm-win.obj $O/parsim/parsimutil.obj \
    $O/parsim/creceivedexception.obj

OBJS_MPI=\
    $O/parsim/cmpicomm.obj $O/parsim/cmpicommbuffer.obj

OBJS= $(OBJS_STD)

!if "$(LIB_SUFFIX)"==".dll"
COPTS= $(COPTS) -DSIM_EXPORT
!endif

!if "$(WITH_NETBUILDER)"=="yes"
OBJS= $(OBJS) $(OBJS_NETBUILDER)
COPTS= $(COPTS) -I../nedxml
IMPLIBS= $(IMPLIBS) $O/../nedxml/oppnedxml$D.lib
!endif

!if "$(WITH_PARSIM)"=="yes"
OBJS= $(OBJS) $(OBJS_PARSIM)
!if "$(HAVE_MPI)"=="yes"
OBJS= $(OBJS) $(OBJS_MPI)
COPTS= $(COPTS) $(MPI_CFLAGS)
IMPLIBS= $(IMPLIBS) $(MPI_LIBS)
!endif
!endif

GENERATED_SOURCES= expr.tab.hh expr.tab.cc lex.expryy.cc sim_std_m.cc sim_std_m.h

#
# Automatic rules
#
.SUFFIXES : .cc

{.}.cc{$O}.obj:
	$(Q)$(CXX) /Fo"$@" $(CXXFLAGS) $(COPTS) /c /Tp $<

{netbuilder}.cc{$O/netbuilder}.obj:
	$(Q)$(CXX) /Fo"$@" $(CXXFLAGS) $(COPTS) /c /Tp $<

{parsim}.cc{$O/parsim}.obj:
	$(Q)$(CXX) /Fo"$@" $(CXXFLAGS) $(COPTS) /c /Tp $<

#
# Targets
#
all : $O/$(LIBNAME)$(LIB_SUFFIX)

$O/$(LIBNAME).lib : $(OBJS) $L
	$(Q)$(AR) /out:"$O/$(LIBNAME).lib" @<<
$(OBJS)
<<
	$(Q)copy /b $(O:/=\)\$(LIBNAME).lib $(L:/=\) 1>nul
	-$(Q)copy /b $(O:/=\)\$(LIBNAME).pdb $(L:/=\) 1>nul

$O/$(LIBNAME).dll : $(OBJS) $L
	$(Q)$(SHLIB_LD) /out:"$O/$(LIBNAME).dll" /subsystem:console $(IMPLIBS) $(LDFLAGS) @<<
$(OBJS)
<<
	$(Q)copy /b $(O:/=\)\$(LIBNAME).dll $(OMNETPP_BIN_DIR:/=\) 1>nul
	-$(Q)copy /b $(O:/=\)\$(LIBNAME).dll.manifest $(OMNETPP_BIN_DIR:/=\) 1>nul
	$(Q)copy /b $(O:/=\)\$(LIBNAME).lib $(L:/=\) 1>nul
	-$(Q)copy /b $(O:/=\)\$(LIBNAME).pdb $(L:/=\) 1>nul

expr.tab.hh expr.tab.cc : expr.y
	$(qecho) YACC: $@
	$(Q)$(YACC:/=\) -o expr.tab.cc -p expryy -d expr.y

lex.expryy.cc: expr.lex
	$(qecho) LEX: $@
	$(Q)$(LEX:/=\) -olex.expryy.cc -Pexpryy expr.lex
	$(Q)$(FIXFLEX) lex.expryy.cc

sim_std_m.cc sim_std_m.h : sim_std.msg
	$(qecho) MSGC: $@
	$(Q)$(MSGC:/=\) -Xnc -Xns sim_std.msg

$(OBJS): $O $O/netbuilder $O/parsim

$O $O/netbuilder $O/parsim $L:
	@md $(@:/=\)

depend: $(GENERATED_SOURCES)
	$(qecho) Creating dependencies...
	$(Q)$(MAKEDEPEND) -I../../include -fMakefile.vc -P^$O/ -- *.cc netbuilder/*.cc parsim/*.cc

clean:
	$(qecho) Cleaning...
	-$(Q)del $(GENERATED_SOURCES) 2>nul
	-$(Q)rmdir /s /q $(O:/=\) 2>nul
	-$(Q)del /q $(L:/=\)\$(LIBNAME).* $(OMNETPP_LIB_DIR:/=\)\$(LIBNAME).* 2>nul

# DO NOT DELETE THIS LINE -- make depend depends on it.
