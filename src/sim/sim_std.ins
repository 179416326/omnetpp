//
// XXX Experimental property descriptors for the simkernel classes.
// Usage: opp_msgc -Xnc -Xns sim_std.ins
//

cplusplus {{
// function to reference from outside, to force linker include this file
void std_sim_descriptor_dummy() {}
}}

class cObject
{
    fields:
        @omitGetVerb(true);
        string name @group(basic);
        string fullName @group(basic);
        string fullPath @group(basic);
        string info @group(basic);
        string detailedInfo @group(basic);
}

//
// NOTE: we lie a bit about the inheritance hierarchy, and hide cNoncopyableObject
// and cDefaultList. They are too internal to be displayed on the GUI.
//

//XXX TODO: add @enum to gate type, param type etc

//class cNoncopyableObject extends cObject
//{
//}

//class cDefaultList extends cNoncopyableObject
//{
//    properties:
//        omitGetVerb = true;
//    fields:
//        int defaultListItems @group(general);
//}

class cComponent extends cObject //really: cDefaultList
{
    fields:
        @omitGetVerb(true);
        bool isModule @group(general);
        int params @group(general);
}

class cChannel extends cComponent
{
}

class cBasicChannel extends cChannel
{
    fields:
        @omitGetVerb(true);
        double delay @group(general);
        double error @group(general);
        double datarate @group(general);
        bool disabled @group(general);
        bool isBusy @group(state);
        simtime_t transmissionFinishes @group(state);
}

class cModule extends cComponent
{
    fields:
        @omitGetVerb(true);
        int id @group(general);
        bool isSimple @group(general);
        bool isVector @group(general);
        int index @group(general);
        int size @group(general);
        int gates @group(general);
}

class cSimpleModule extends cModule
{
    fields:
        @omitGetVerb(true);
        bool isTerminated @group(state);
        bool usesActivity @group(activity);
        unsigned int stackSize @group(activity);
        unsigned int stackUsage @group(activity);
}

class cCompoundModule extends cModule
{
}

class cArray extends cObject
{
    fields:
        @omitGetVerb(true);
        int items @group(general);
        bool takeOwnership @group(general);
}


class cComponentType extends cObject //really: cNoncopyableObject
{
}

class cModuleType extends cComponentType
{
    fields:
        @omitGetVerb(true);
        bool isNetwork @group(general);
}

class cChannelType extends cComponentType
{
}

//----

class cGate extends cObject //really: cNoncopyableObject
{
    fields:
        @omitGetVerb(true);
        char type @group(general);
        int id @group(general);
        bool isVector @group(general);
        int index @group(general);
        bool isBusy @group(state);
        simtime_t transmissionFinishes @group(state);
        bool isConnectedOutside @group(connection);
        bool isConnectedInside @group(connection);
        bool isConnected @group(connection);
        bool isRouteOK @group(connection);
}

class cMessage extends cObject
{
    fields:
        @omitGetVerb(true);
        int kind @group(general);
        int priority @group(general);
        long length @group(general);
        long byteLength @group(general);
        bool hasBitError @group(general);

        bool isScheduled @group(sending);
        bool isSelfMessage @group(sending);
        simtime_t creationTime @group(sending);
        simtime_t sendingTime @group(sending);
        simtime_t arrivalTime @group(sending);
        simtime_t timestamp @group(sending);
        int senderModuleId @group(sending);
        int senderGateId @group(sending);
        int arrivalModuleId @group(sending);
        int arrivalGateId @group(sending);

        //XXX cMessage *encapsulatedMsg @group(general);
        //XXX cProperties *controlInfo();
        //XXX void *contextPointer
        //XXX various IDs
}

class cMessagePar extends cObject
{
    fields:
        @omitGetVerb(true);
        bool takeOwnership @group(general);
        char type @group(general);
        bool isNumeric @group(general);
        bool isConstant @group(general);
        bool isInput @group(general);
}

class cPacket extends cMessage
{
    fields:
        @omitGetVerb(true);
        short protocol @group(general);
        short pdu @group(general);
}

//----

class cStatistic extends cObject
{
    fields:
        @omitGetVerb(true);
        long samples @group(general);
        double weights @group(general);
        double sum @group(general);
        double sqrSum @group(general);
        double min @group(general);
        double max @group(general);
        double mean @group(general);
        double stddev @group(general);
        double variance @group(general);
}

class cStdDev extends cStatistic
{
}

class cWeightedStdDev extends cStdDev
{
}

class cDensityEstBase extends cStdDev
{
    fields:
        @omitGetVerb(true);
        bool transformed @group(histogram);
        int cells @group(histogram);
        unsigned long underflowCell @group(histogram);
        unsigned long overflowCell @group(histogram);
        //XXX cells[]?
}

class cHistogramBase extends cDensityEstBase
{
}

class cEqdHistogramBase extends cHistogramBase
{
}

class cVarHistogram extends cHistogramBase
{
}

class cLongHistogram extends cEqdHistogramBase
{
}

class cDoubleHistogram extends cEqdHistogramBase
{
}

class cKSplit extends cDensityEstBase
{
}

class cPSquare extends cDensityEstBase
{
}

class cTransientDetection extends cObject
{
}

class cAccuracyDetection extends cObject
{
}

class cTDExpandingWindows extends cTransientDetection
{
}

class cADByStddev extends cAccuracyDetection
{
}

//----

class cExpression extends cPolymorphic
{
    fields:
        @omitGetVerb(true);
        //XXX string toString @group(general);
}

class cFSM extends cObject
{
    fields:
        @omitGetVerb(true);
        int state @group(general);
        string stateName @group(general);
}

class cMathFunction extends cObject //really: cNoncopyableObject
{
    fields:
        @omitGetVerb(true);
        int numArgs @group(general);
}

class cNEDFunction extends cObject //really: cNoncopyableObject
{
    fields:
        @omitGetVerb(true);
        char returnType @group(general);
        int numArgs @group(general);
        string argTypes @group(general);
}

class cOutVector extends cObject //really: cNoncopyableObject
{
    fields:
        @omitGetVerb(true);
        bool isEnabled @group(general);
        long valuesReceived @group(general);
        long valuesStored @group(general);
}

class cPar extends cObject
{
    fields:
        @omitGetVerb(true);
        char type @group(general);
        bool isNumeric @group(general);
        bool isVolatile @group(general);
        bool isConstant @group(general);
        bool isSet @group(general);
        bool hasDefaultValue @group(general);
}

class cProperties extends cPolymorphic
{
}

class cProperty extends cPolymorphic
{
    fields:
        @omitGetVerb(true);
        bool isImplicit @group(general);
        short index @group(general);
        //XXX const std::vector<const char *>& keys @group(general);
}

class cLinkedList extends cObject
{
    fields:
        @omitGetVerb(true);
        int length @group(general);
}

class cMessageHeap extends cObject
{
    fields:
        @omitGetVerb(true);
        int length @group(general);
        //XXX elements?
}

class cQueue extends cObject
{
    fields:
        @omitGetVerb(true);
        int length @group(general);
        bool takeOwnership @group(general);
        //XXX elements?
}

class cSimulation extends cObject //really: cNoncopyableObject
{
    fields:
        @omitGetVerb(true);
        int runNumber @group(general);
        simtime_t simTime @group(general);
        long eventNumber @group(general);
        int contextType @group(general);
        int lastModuleId @group(general);
        //XXX modules?
}

class cScheduler extends cPolymorphic
{
}

class cSequentialScheduler extends cScheduler
{
}

class cRealTimeScheduler extends cScheduler
{
}

class cTopology extends cObject
{
    fields:
        @omitGetVerb(true);
        int nodes @group(general);
}

class cXMLElement
{
    fields:
        @omitGetVerb(true);
        string getTagName @group(general);  //XXX get rid of "get" somehow -- @label(tagname)?
        string getNodeValue @group(general);
        string getSourceLocation @group(general);
        bool hasAttributes @group(general);
        bool hasChildren @group(general);
        //XXX const cXMLAttributeMap& getAttributes @group(general);
        //XXX cXMLElementList getChildren @group(general);
}



