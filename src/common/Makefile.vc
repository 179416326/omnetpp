#
# Global definitions
#
!include ..\..\configuser.vc

# Make sure that output locations are set
!if "$(OMNETPP_BIN_DIR)"==""
!error OMNETPP_BIN_DIR must be correctly set
!endif
!if "$(OMNETPP_OUT_DIR)"==""
!error OMNETPP_OUT_DIR must be correctly set
!endif
!if "$(OMNETPP_LIB_DIR)"==""
!error OMNETPP_LIB_DIR must be correctly set
!endif

#
# Local definitions
#
LIBNAME=common$D
O=$(OMNETPP_OUT_DIR)/$(TOOLCHAIN_NAME)-$(MODE)/src/common
L=$(OMNETPP_LIB_DIR)/$(TOOLCHAIN_NAME)

COPTS=$(CFLAGS) -I"$(OMNETPP_INCL_DIR)/platdep" -I. /Fd"$O/$(LIBNAME).pdb"

OBJS= $O/lcgrandom.obj $O/filereader.obj $O/linetokenizer.obj \
      $O/stringpool.obj $O/stringtokenizer.obj $O/fnamelisttokenizer.obj \
      $O/expression.obj $O/lex.expressionyy.obj $O/expression.tab.obj \
      $O/matchexpression.obj $O/matchexpressionlexer.obj $O/matchexpression.tab.obj \
      $O/patternmatcher.obj $O/unitconversion.obj $O/displaystring.obj $O/fileglobber.obj \
      $O/fileutil.obj $O/stringutil.obj $O/commonutil.obj $O/exception.obj $O/bigdecimal.obj \
      $O/enumstr.obj

!if "$(LIB_SUFFIX)"==".dll"
COPTS= $(COPTS) -DCOMMON_EXPORT
!endif

#
# Automatic rules
#
.SUFFIXES : .cc

{.}.cc{$O}.obj:
	$(CXX) /Fo"$@" $(COPTS) /c /Tp $<


#
# Targets
#
all : $O/$(LIBNAME)$(LIB_SUFFIX)

$O/$(LIBNAME).lib : $(OBJS) $L
	$(AR) /out:"$@" $(OBJS)
	copy $(O:/=\)\$(LIBNAME).lib $(L:/=\)
	-copy /b $(O:/=\)\$(LIBNAME).pdb $(L:/=\) 2>nul

$O/$(LIBNAME).dll : $(OBJS) $L
	$(SHLIB_LD) /out:"$@" /subsystem:console $(OBJS)
	copy $(O:/=\)\$(LIBNAME).dll $(OMNETPP_BIN_DIR:/=\)
	-copy /b $(O:/=\)\$(LIBNAME).dll.manifest $(OMNETPP_BIN_DIR:/=\) 2>nul
	copy $(O:/=\)\$(LIBNAME).lib $(L:/=\)
	-copy /b $(O:/=\)\$(LIBNAME).pdb $(L:/=\) 2>nul

expression.tab.h expression.tab.cc : expression.y
	$(YACC:/=\) -p expressionyy -b expression -d expression.y
	copy expression.tab.c expression.tab.cc
	del expression.tab.c

lex.expressionyy.cc: expression.lex expression.tab.h
	$(LEX:/=\) -Pexpressionyy expression.lex
	$(FIXFLEX) lex.expressionyy.c
	copy lex.expressionyy.c lex.expressionyy.cc
	del lex.expressionyy.c

matchexpression.tab.h matchexpression.tab.cc : matchexpression.y
	$(YACC:/=\) --no-lines -p matchexpressionyy -b matchexpression -d matchexpression.y
	copy matchexpression.tab.c matchexpression.tab.cc
	del matchexpression.tab.c

matchexpressionlexer.cc: matchexpression.tab.h


#lex.matchexpressionyy.cc: matchexpression.lex matchexpression.tab.h
#	$(LEX:/=\) -Pmatchexpressionyy matchexpression.lex
#	$(FIXFLEX) lex.matchexpressionyy.cc
#	copy lex.matchexpressionyy.c lex.matchexpressionyy.cc
#	del lex.matchexpressionyy.c

$(OBJS): $O

$O $L:
	md $(@:/=\)

doc:
	$(DOXYGEN:/=\) doxy.cfg

depend:
	$(MAKEDEPEND) -I. -fMakefile.vc -P^$O/ -- *.cc

clean:
	-del *.tab.* lex.*yy.* 2>nul
	-rmdir /s /q $(O:/=\) 2>nul
	-del /q $(L:/=\)\$(LIBNAME).* $(OMNETPP_LIB_DIR:/=\)\$(LIBNAME).* 2>nul

# DO NOT DELETE THIS LINE -- make depend depends on it.
$O/bigdecimal.obj: bigdecimal.cc \
  opp_ctype.h \
  bigdecimal.h \
  commondefs.h \
  exception.h
$O/commonutil.obj: commonutil.cc \
  commonutil.h \
  commondefs.h \
  exception.h
$O/displaystring.obj: displaystring.cc \
  opp_ctype.h \
  displaystring.h \
  stringutil.h \
  commondefs.h \
  commonutil.h \
  exception.h
$O/enumstr.obj: enumstr.cc \
  enumstr.h \
  commondefs.h
$O/exception.obj: exception.cc \
  exception.h \
  commondefs.h
$O/expression.obj: expression.cc \
  expression.h \
  expressionyydefs.h \
  commondefs.h \
  commonutil.h \
  stringutil.h \
  exception.h
$O/expression.tab.obj: expression.tab.cc \
  commonutil.h \
  expressionyydefs.h \
  expression.h \
  exception.h \
  stringutil.h \
  unitconversion.h \
  commondefs.h
$O/fileglobber.obj: fileglobber.cc \
  fileglobber.h \
  commondefs.h
$O/filereader.obj: filereader.cc \
  commonutil.h \
  filereader.h \
  exception.h \
  commondefs.h
$O/fileutil.obj: fileutil.cc \
  opp_ctype.h \
  fileutil.h \
  stringtokenizer.h \
  exception.h \
  commondefs.h
$O/fnamelisttokenizer.obj: fnamelisttokenizer.cc \
  fnamelisttokenizer.h \
  commondefs.h \
  commonutil.h \
  exception.h
$O/lcgrandom.obj: lcgrandom.cc \
  lcgrandom.h \
  commondefs.h \
  exception.h
$O/lex.expressionyy.obj: lex.expressionyy.cc \
  expressionyydefs.h \
  exception.h \
  expression.tab.h \
  stringutil.h \
  expression.h \
  commondefs.h \
  commonutil.h
$O/linetokenizer.obj: linetokenizer.cc \
  exception.h \
  linetokenizer.h \
  commondefs.h
$O/matchexpression.obj: matchexpression.cc \
  matchexpression.h \
  patternmatcher.h \
  commonutil.h \
  commondefs.h \
  exception.h
$O/matchexpression.tab.obj: matchexpression.tab.cc \
  matchexpression.h \
  matchexpressionlexer.h \
  patternmatcher.h \
  exception.h \
  commondefs.h
$O/matchexpressionlexer.obj: matchexpressionlexer.cc \
  stringutil.h \
  matchexpression.tab.h \
  matchexpressionlexer.h \
  commondefs.h \
  commonutil.h \
  exception.h
$O/patternmatcher.obj: patternmatcher.cc \
  opp_ctype.h \
  patternmatcher.h \
  stringutil.h \
  exception.h \
  commondefs.h \
  commonutil.h
$O/stringpool.obj: stringpool.cc \
  stringpool.h \
  commondefs.h
$O/stringtokenizer.obj: stringtokenizer.cc \
  stringtokenizer.h \
  commondefs.h
$O/stringutil.obj: stringutil.cc \
  commonutil.h \
  opp_ctype.h \
  stringutil.h \
  stringtokenizer.h \
  commondefs.h \
  exception.h
$O/unitconversion.obj: unitconversion.cc \
  opp_ctype.h \
  stringutil.h \
  unitconversion.h \
  commondefs.h \
  commonutil.h \
  exception.h
