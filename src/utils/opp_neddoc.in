#! /bin/sh
PS2GIF=@PS2GIF@
GIFTRANS=@GIFTRANS@
DOT=@DOT@
NEDDOC_XSL=`dirname $0`/neddoc.xsl
NEDDOC_PL=`dirname $0`/neddocproc.pl
TMPFILE=/tmp/opp_neddoc.tmp.$$

# process command-line options
outdir=html
screenshots=yes
unassignedpars=yes
doxytagfile=
doxyhtmldir="../api-doc/html"

if [ -n $DOT ]; then
    have_dot=yes
fi    
while [ $# -gt 0 ]; do
    case "$1" in
    -o)       shift; outdir=$1 ;;
    -a)       all_files=y ;;
    --all)    all_files=y ;;
    -d)       shift; doxyhtmldir=$1 ;;
    --doxyhtmldir)  shift; doxyhtmldir=$1 ;;
    -t)       shift; doxytagfile=$1 ;;
    --doxytagfile)  shift; doxytagfile=$1 ;;
    -n)       screenshots=no ;;
    --no-figures)  screenshots=no ;;
    -p)       unassignedpars=no ;;
    --no-unassigned-pars)  unassignedpars=no ;;
    -x)       have_dot=no ;;
    --no-diagrams)  have_dot=no ;;
    -h)       do_help=y ;;
    --help)   do_help=y ;;
    -*)       echo "opp_neddoc: ${1}: invalid option, try -h for help" >&2
              exit 2 ;;
    *)        break ;;
    esac
    shift
done

if [ -n "$do_help" ]; then
    echo "opp_neddoc - NED and MSG documentation tool, part of OMNeT++"
    echo "(c) 2003 Andras Varga"
    echo ""
    if [ ! -n "$PS2GIF" ]; then
        echo "(Note: generating figures not possible -- ImageMagick's 'convert' is not present.)"
        echo ""
    fi
    echo "Usage: opp_neddoc [-o <dir>] [-n] [-a] files-or-directories ..."
    echo " -a, --all    process all *.ned and *.msg files recursively"
    echo "              ('opp_neddoc -a' is equivalent to 'opp_neddoc .')"
    echo " -o <dir>     output directory, defaults to ./html"
    echo " -t <filename>, --doxytagfile <filename>"
    echo "              turn on generating hyperlinks to Doxygen documentation;"
    echo "              <filename> specifies name of XML tag file generated by Doxygen"
    echo " -d <dir>, --doxyhtmldir <dir>"
    echo "              directory of Doxygen-generated HTML files, relative to the "
    echo "              opp_neddoc output directory (-o option). -t option must also be"
    echo "              present to turn on linking to Doxygen. Default: ../api-doc/html"
    echo " -n, --no-figures"
    echo "              do not generate diagrams"
    echo " -p, --no-unassigned-pars"
    echo "              do not document unassigned parameters"
    echo " -x, --no-diagrams"
    echo "              do not generate usage and interitance diagrams"
    echo " -h, --help   displays this help text"
    echo "Files specified as arguments are parsed and documented. If directories"
    echo "are specified, all *.ned and *.msg files in them are documented."
    echo ""
    exit
fi

cleanup()
{
    rm $TMPFILE
}

trap cleanup HUP INT QUIT TERM

if [ ! -d $outdir ]; then
    mkdir $outdir || exit 1
fi
rm -f $outdir/* || exit 1

echo collecting files...
if [ -n "$all_files" ]; then
    files=`find . -name '*.ned' -o -name '*.msg'` || exit 1
else
    if [ $# -eq 0 ]; then
        echo "opp_neddoc: no input files specified, try . to include all *.ned/*.msg files in current directory" >&2
        exit 2
    fi
    while [ $# -gt 0 ]; do
        if [ -d "$1" ]; then
            files="$files `find $1 -name '*.ned' -o -name '*.msg'`" || exit 1
        else
            files="$files $1"
        fi
        shift
    done
fi

echo 'transforming to xml...'
nedtool -x -e -t -y -m -o $TMPFILE $files || exit 1

if [ "$screenshots" = "yes" ]; then 
    if [ -n "$PS2GIF" ]; then
        echo 'exporting screenshots (Postscript) using GNED...'
        nedfilesonly=`echo $files | sed 's/[^ ]*\.msg//g'`
        gned -- -c $outdir $nedfilesonly || exit 1
        echo 'converting Postscript to GIF using '$PS2GIF'...'
        for i in $outdir/*.eps; do
           echo -n '#'
           gif=`echo $i | sed 's/eps$/gif/'`
           $PS2GIF $i $gif || exit 1
        done
        echo
        # hack: must convert $outdir to absolute path, otherwise xslt will take it
        # as relative to the sylesheet (@#$#@$!!)
        imagesxml=$outdir/images.xml
        case $imagesxml in
          /*) : ;;
          *) imagesxml=`pwd`/$imagesxml ;;
        esac
    else
        echo 'skipping diagram exporting (no Postscript-to-GIF converter configured)'
        imagesxml=
    fi
fi

# hack: must convert $doxytagfile to absolute path, otherwise xslt will take it
# as relative to the sylesheet
if [ -n "$doxytagfile" ]; then
   case $doxytagfile in
     /*) : ;;
     *) doxytagfile=`pwd`/$doxytagfile ;;
   esac
fi

echo 'applying xslt stylesheet...'
# FIXME xslt outputs lots of blank lines, hence the >/dev/null
xsltproc --stringparam outputdir "$outdir" \
         --stringparam imagesxml "$imagesxml" \
         --stringparam document-unassigned-params "$unassignedpars" \
         --stringparam have_dot "$have_dot" \
         --stringparam doxytagfile "$doxytagfile" \
         --stringparam doxyhtmldir "$doxyhtmldir" \
         $NEDDOC_XSL $TMPFILE >/dev/null || exit 1

if [ "$have_dot" = "yes" ]; then
    echo 'generating diagrams via '$DOT'...'
    for i in $outdir/*.dot; do
       echo -n '#'
       gif=`echo $i | sed 's/dot$/gif/'`
       map=`echo $i | sed 's/dot$/map/'`
       $DOT -Tgif  <$i >$gif 2>>$outdir/dot.err || exit 1
       $DOT -Tcmap <$i >$map 2>>$outdir/dot.err || exit 1
       if [ -n "$GIFTRANS" ]; then
           mv $gif $gif.tmp || exit 1
           $GIFTRANS -t white $gif.tmp >$gif || exit 1
           rm $gif.tmp || exit 1
       fi
    done
    echo
    if [ -s $outdir/dot.err ]; then
       echo 'see warnings from '$DOT' in '$outdir'/dot.err'
    fi
fi

echo 'formatting comments...'
perl $NEDDOC_PL $outdir || exit 1
 
echo 'documentation created in '$outdir'/ -- start page is index.html'
cleanup



