#!/bin/env python3

import os
import sys
import glob
import argparse
import subprocess
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
from omnetpp.scave import results, chart


_real_show = plt.show

def _fake_show(*args, **kwargs):
    global _show_called
    _real_show(*args, **kwargs)
    _show_called = True

plt.show = _fake_show


def error(message):
    print("ERROR: " + message)
    sys.exit(1)


class Chart:
    def __init__(self, type=str(), name=str(), script=str(), properties=dict()):
        self.type = type
        self.name = name
        self.script = script
        self.properties = properties

class Analysis:
    def __init__(self, inputs=list(), charts=list()):
        self.inputs = inputs
        self.charts = charts


def load_anf_file(anf_file_name):
    analysis = ET.parse(anf_file_name).getroot()

    version = analysis.get('version')

    if version != "2":
        error("Unsupported analysis file version: \"{}\" (only \"2\" is supported).".format(version))

    inputs = [i.get('pattern') for i in analysis.findall("inputs/input")]

    charts = [
            Chart(c.get('type'), c.get('name'), c.get('script'),
                { p.get('name') : p.get('value') for p in c.findall('property') })
            for c in analysis.findall("charts/chart")]

    return Analysis(inputs, charts)

def get_opp_root():
    try:
        out = subprocess.check_output("opp_configfilepath")
    except:
        error("Could not determine OMNeT++ directory (try \". setenv\" in this shell).")
    return os.path.abspath(os.path.dirname(out.decode('utf-8')))

def print_analysis_info(anf_file, analysis):
    print('\nThe "{}" file contains {} charts:\n'.format(anf_file, len(analysis.charts)))
    for i, c in enumerate(analysis.charts):
        print('\t{}.\t"{}"\t({})'.format(i, c.name, c.type))

    print("\nAnd {} inputs:\n".format(len(analysis.inputs)))
    for i, inp in enumerate(analysis.inputs):
        print('\t"{}"'.format(inp))


def run_chart(wd, c):

    # print("changing to " + wd)
    os.chdir(wd)
    # print(sys.path)
    sys.path = [wd,
        get_opp_root() + "/ui/org.omnetpp.scave.pychart/src/org/omnetpp/scave/pychart/python/",
        get_opp_root() + "/ui/org.omnetpp.scave.pychart/org/omnetpp/scave/pychart/python/"
    ] + sys.path

    chart.name = c.name
    chart.properties = c.properties

    script = c.script

    global _show_called
    _show_called = False

    # print(script)
    exec(script)

    if not _show_called:
        # print("calling explicit plt.show()")
        plt.show()


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Tool for working with OMNeT++ analysis files.')
    parser.add_argument('anf_file', type=str, nargs=1, help='The Analysis (.anf) file')
    parser.add_argument('-i', metavar='chart_index', type=int, nargs=1, help='The index of the chart to run (conflicts with -n)')
    parser.add_argument('-n', metavar='chart_name', type=str, nargs=1, help='The name of the chart to run (conflicts with -i, the first chart is selected when ambiguous)')
    parser.add_argument('-w', metavar='workspace_directory', type=str, nargs=1, default='.', help='The workspace directory, the input patterns are relative to this')

    args = parser.parse_args()

    if args.i and args.n:
        error("Do not use -i and -n together.")

    anf_file = args.anf_file[0]
    anf_dir = os.path.dirname(os.path.abspath(anf_file))

    analysis = load_anf_file(anf_file)

    if False: # debug output
        import json
        print(json.dumps(analysis, default=lambda obj: vars(
            obj), indent=4, separators=(',', ': ')))

    inputfiles = [glob.glob(args.w[0] + "/" + i) for i in analysis.inputs]

    # flattening the list of lists, turning them into absolute paths (script will cwd) and making it unique
    inputfiles = list(set([os.path.abspath(item) for sublist in inputfiles for item in sublist]))
    # print(inputfiles)

    results.inputfiles = inputfiles
    results.wd = args.w[0]

    if not args.i and not args.n:
        print_analysis_info(anf_file, analysis)
    elif args.i:
        run_chart(anf_dir, analysis.charts[args.i[0]])
    elif args.n:

        ch = None
        for c in analysis.charts:
            if c.name == args.n[0]:
                ch = c
                break

        if ch:
            run_chart(anf_dir, ch)
        else:
            error('No chart named "{}".'.format(args.n[0]))
