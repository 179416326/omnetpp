eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}' && eval 'exec perl -S $0 $argv:q'
  if 0;

#!perl
#line 6
use Cwd;

#$progdir = $ARGV[0];
$progdir = "d:\\home\\omnetpp\\src\\utils";   #FIXME
$temp = "d:/tmp";   #FIXME

#-----------
# to be configured:
$NEDTOOL = "d:\\home\\omnetpp\\bin\\nedtool.exe";
$XSLTPROC = "d:\\home\\tools\\libxslt-1.0.27.win32\\util\\xsltproc.exe";
$GNED = "d:\\home\\omnetpp\\bin\\gned.exe";
$GHOSTSCRIPT = "d:\\home\\tools\\gs\\gs8.11\\bin\\gswin32c.exe";
$GIFTRANS = "";
$DOT = "d:\\home\\tools\\Graphviz\\bin\\dot.exe ";
$PERL = "perl";
$NEDDOC_XSL = "$progdir\\neddoc.xsl";
$NEDDOC_PL = "$progdir\\neddocproc.pl";
#-----------

# process command-line options
$outdir = "html";
$screenshots = "y";
$unassignedpars = "y";
$doxytagfile = "";
$doxyhtmldir = "../api-doc/html";
$all_files = "";
$verbose = "y";
$debug = "n";

if ($DOT ne "")
{
    $have_dot = "y";
}

# process arg vector
while (@ARGV)
{
    $arg = shift @ARGV;
    if ($arg eq '-o')
    {
       $outdir = shift @ARGV;
    }
    elsif ($arg eq '-a' || $arg eq '--all')
    {
       $all_files = "y";
    }
    elsif ($arg eq '-d' || $arg eq '--doxyhtmldir')
    {
       $doxyhtmldir = shift @ARGV;
    }
    elsif ($arg eq '-t' || $arg eq '--doxytagfile')
    {
       $doxytagfile = shift @ARGV;
    }
    elsif ($arg eq '-n' || $arg eq '--no-figures')
    {
       $screenshots = "n";
    }
    elsif ($arg eq '-p' || $arg eq '--no-unassigned-pars')
    {
       $unassignedpars = "n";
    }
    elsif ($arg eq '-x' || $arg eq '--no-diagrams')
    {
       $have_dot = "n";
    }
    elsif ($arg eq '-D' || $arg eq '--debug')
    {
       $debug = "y";
    }
    elsif ($arg eq '-s' || $arg eq '--silent')
    {
       $verbose = "n";
    }
    elsif ($arg eq '-h' || $arg eq '--help')
    {
       $do_help = "y";
    }
    elsif ($arg =~ /^-/)
    {
       print STDERR "opp_neddoc: $arg: invalid option, try -h for help\n";
       exit(2);
    }
    else
    {
       break;
    }
    shift;
}

if ($do_help eq "y")
{
    print "opp_neddoc - NED and MSG documentation tool, part of OMNeT++\n";
    print "(c) 2003 Andras Varga\n";
    print "\n";
    if ($GHOSTSCRIPT eq "")
    {
        print "Note: cannot generate figures because Ghostscript is not installed.\n";
        print "\n";
    }
    if ($DOT eq "")
    {
        print "Note: cannot generate usage diagrams because Graphviz is not installed.\n";
        print "\n";
    }
    print "Usage: opp_neddoc [-o <dir>] [-n] [-a] files-or-directories ...\n";
    print " -a, --all    process all *.ned and *.msg files recursively\n";
    print "              ('opp_neddoc -a' is equivalent to 'opp_neddoc .')\n";
    print " -o <dir>     output directory, defaults to ./html\n";
    print " -t <filename>, --doxytagfile <filename>\n";
    print "              turn on generating hyperlinks to Doxygen documentation;\n";
    print "              <filename> specifies name of XML tag file generated by Doxygen\n";
    print " -d <dir>, --doxyhtmldir <dir>\n";
    print "              directory of Doxygen-generated HTML files, relative to the \n";
    print "              opp_neddoc output directory (-o option). -t option must also be\n";
    print "              present to turn on linking to Doxygen. Default: ../api-doc/html\n";
    print " -n, --no-figures\n";
    print "              do not generate diagrams\n";
    print " -p, --no-unassigned-pars\n";
    print "              do not document unassigned parameters\n";
    print " -x, --no-diagrams\n";
    print "              do not generate usage and interitance diagrams\n";
    print " -h, --help   displays this help text\n";
    print "Files specified as arguments are parsed and documented. If directories\n";
    print "are specified, all *.ned and *.msg files in them are documented.\n";
    print "\n";
    exit(0);
}

# we need backslashes in file names
$NEDTOOL =~ s|/|\\|g;
$XSLTPROC =~ s|/|\\|g;
$GNED =~ s|/|\\|g;
$GHOSTSCRIPT =~ s|/|\\|g;
$GIFTRANS =~ s|/|\\|g;
$DOT =~ s|/|\\|g;
$PERL =~ s|/|\\|g;
$NEDDOC_XSL =~ s|/|\\|g;
$NEDDOC_PL =~ s|/|\\|g;


#cleanup()
#{
#    rm $TMPFILE
#}
#trap cleanup HUP INT QUIT TERM

if (! -d $outdir) {
    mkdir($outdir) || die "cannot create output directory '$outdir'";
}
runprog("del /s /q $outdir\\* >nul")==0 || die "cannot clean output directory '$outdir' from old files";

print "collecting files...\n" if $verbose;
if ($all_files eq "")
{
    runprog("dir /s /b *.ned *.msg >$outdir\\filelist.txt")==0 || die "error creating the file list";
}
else
{
    if (@ARGV = ()) {
        print STDERR "opp_neddoc: no input files specified, try . to include all *.ned and *.msg files in current directory and below\n";
        exit(2);
    }

    unlink("$outdir\\filelist.txt");
    while (@ARGV)
    {
        $arg = shift @ARGV;
        if (-d "$arg")
        {
            runprog("dir /s /b *.ned *.msg >>$outdir\\filelist.txt")==0 || die "error creating the file list";
        }
        else
        {
            runprog("echo $arg >>$outdir\\filelist.txt")==0 || die "error creating the file list";
        }
        shift;
    }
}

print "transforming to xml...\n" if $verbose;
runprog("$NEDTOOL -x -e -t -y -m -o $outdir\\inputfiles.xml \@$outdir\\filelist.txt")==0 || die "error";

if ($screenshots eq "y")
{
    if ($GHOSTSCRIPT ne "")
    {
        print "exporting screenshots (Postscript) using GNED...\n";
        $nedfilesonly = `type $outdir\\filelist.txt`;
        runprog("$GNED -- -c $outdir -e jpg $nedfilesonly")==0 || die "error invoking GNED";
        print "converting Postscript to JPG with Ghostscript...\n";
        foreach $i (glob("$outdir/*.eps"))
        {
           print "#";
           $jpg = $i;
           $jpg =~ s/eps$/jpg/;
           runprog("$GHOSTSCRIPT -dEPSCrop -sNOPAUSE -sBATCH -sDEVICE=jpeg -sOutputFile=$jpg $i >$outdir\\gs.err")==0 || die "error invoking Ghostscript";
        }
        print "\n";

        if (-s "$outdir\\gs.err")
        {
           print "see Ghostscript warnings in $outdir\\gs.err\n";
        }

        # hack: must convert $outdir to absolute path, otherwise xslt will take it
        # as relative to the sylesheet (@#$#@$!!)
        $imagesxml = absolutepath("$outdir\\images.xml");
    }
    else
    {
        print "skipping diagram exporting (no Postscript-to-JPG converter configured)";
        $imagesxml = "";
    }
}

# hack: must convert $doxytagfile to absolute path, otherwise xslt will take it
# as relative to the sylesheet
if ($doxytagfile ne "") {
    $doxytagfile = absolutepath($doxytagfile);
}

print "applying xslt stylesheet...\n" if $verbose;
$xsltcommand = "$XSLTPROC".
               " --stringparam outputdir \"$outdir\"".
               " --stringparam imagesxml \"$imagesxml\"".
               " --stringparam document-unassigned-params \"$unassignedpars\"".
               " --stringparam have_dot \"$have_dot\"".
               " --stringparam doxytagfile \"$doxytagfile\"".
               " --stringparam doxyhtmldir \"$doxyhtmldir\"".
               " --output nul".
               " $NEDDOC_XSL $outdir\\inputfiles.xml";
runprog($xsltcommand)==0 || die "error invoking xsltproc";

if ($have_dot eq "y")
{
    print "generating diagrams via DOT...\n";
    foreach $i (glob("$outdir/*.dot"))
    {
       print "#";
       $gif = $i; $gif =~ s/dot$/gif/;
       $map = $i; $map =~ s/dot$/map/;
       runprog("$DOT -Tgif  <$i >$gif 2>>$outdir\\dot.err")==0 || die "error invoking DOT";
       runprog("$DOT -Tcmap <$i >$map 2>>$outdir\\dot.err")==0 || die "error invoking DOT";
       if ($GIFTRANS ne "")
       {
           rename($gif, "$gif.tmp");
           runprog("$GIFTRANS -t white $gif.tmp >$gif")==0 || die "error invoking giftrans";
           unlink("$gif.tmp");
       }
    }
    print "\n";
    if (-s "$outdir\\dot.err")
    {
       print "see warnings from $DOT in $outdir\\dot.err\n";
    }
}

print "formatting comments...\n" if $verbose;
runprog("$PERL $NEDDOC_PL $outdir")==0 || die "error invoking formatter";

print "documentation created in '$outdir'/ -- start page is index.html\n" if $verbose;

#unlink("$outdir/inputfiles.xml"); FIXME put it back after debugging


sub runprog
{
    my $prog = shift;
    print "running: $prog\n" if ($debug eq "y");
    system($prog);
}

sub absolutepath
{
    my $filename = shift;
    $absfilename = `dir /s /b $filename`;
    chomp($absfilename);
    if ($absfilename eq "") {die "'$filename' does not exist";}
    $absfilename;
}
