dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/sim/omnetpp.h)

#
# OMNeT++ version number
#
OMNETPP_VERSION="1.2"

#
# Location of various components. Can be overridden in configure.user.
#
OMNETPP_ROOT=`pwd`
if test -n "$HOME"; then
    if pwd | grep "^$HOME" >/dev/null; then
        OMNETPP_ROOT=`pwd|sed "s|^$HOME|\\\${HOME}|"`
    fi
fi
if uname | grep "CYGWIN" >/dev/null; then
    OMNETPP_ROOT=`cygpath -w $OMNETPP_ROOT | sed 's|\\\\|/|g'`
fi

OMNETPP_SRC_DIR="$OMNETPP_ROOT/src"
OMNETPP_SAMPLES_DIR="$OMNETPP_ROOT/samples"
OMNETPP_MODELS_DIR="$OMNETPP_ROOT/models"
OMNETPP_BITMAP_PATH="$OMNETPP_ROOT/bitmaps"

OMNETPP_BIN_DIR="$OMNETPP_ROOT/bin"
OMNETPP_INCL_DIR="$OMNETPP_SRC_DIR/sim"
OMNETPP_LIB_DIR="$OMNETPP_ROOT/lib"

#
# Default values for other variables that come from configure.user.
#
build_shared_libs=yes
#build_shared_libs=no

PVM_CFLAGS=
PVM_LIBS=
TK_CFLAGS=
TK_LIBS=
TV_CFLAGS=
TV_LIBS=

CFLAGS='-g'
#CFLAGS='-g -Wall'
#CFLAGS='-O3 -DNDEBUG=1'

#----------------------
# Read in user settings
#----------------------
. configure.user


dnl -------------------------------------------------------------
dnl  Test macro to find a lib in one of the passed directories
dnl -------------------------------------------------------------
dnl
dnl OPP_CHECK_LIB_WITHPATH(LIBNAME, FUNCTION, LOCATION-LIST,
dnl    ACTION-IF-FOUND, ACTION-IF-NOT-FOUND, ADDITIONAL-LIBS)
dnl
AC_DEFUN(OPP_CHECK_LIB_WITHPATH,[
save_LDFLAGS=$LDFLAGS
save_LIBS=$LIBS
LIBS="-l$1 $6"
for lib_path_swith in "" $3; do
  if test -n "$lib_path_swith"; then
    AC_MSG_CHECKING(whether -l$1 is in $lib_path_swith)
    lib_path_swith="-L$lib_path_swith"
  else
    AC_MSG_CHECKING(whether -l$1 is in linker path)
  fi
  LDFLAGS="$save_LDFLAGS $lib_path_swith"
  AC_TRY_LINK([char $2();],$2(),
              [AC_MSG_RESULT(yes);succ=yes;break],
              [AC_MSG_RESULT(no);succ=no])
done
LDFLAGS=$save_LDFLAGS
LIBS=$save_LIBS
if test $succ = yes; then
  :; $4
else
  :; $5
fi
])

#----------------------
# Checks for programs.
#----------------------

AC_PROG_YACC
AC_PROG_LEX
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB

# FIXME: the following lines will need some check
AS="as"
AR="ar cr"
SHLIB_LD="gcc -shared"
NEDC=nedc

A_LIB_SUFFIX=".a"
SO_LIB_SUFFIX=".so"

#----------------------
# Checks for standard libraries.
#----------------------

SYS_LIBS=""

AC_CHECK_LIB(m, floor,
   SYS_LIBS="-lm $SYS_LIBS",
   AC_MSG_WARN(math library (-lm) not found (maybe part of standard C lib?))
   )

AC_CHECK_LIB(dl, dlopen,
   HAVE_DLOPEN=1; SYS_LIBS="-ldl $SYS_LIBS",
   HAVE_DLOPEN=0; AC_MSG_WARN(dynamic loading of libs not possible (no dlopen() syscall))
   )
if test "$HAVE_DLOPEN" = "1"; then
   AC_CHECK_HEADER(dlfcn.h, ,
      HAVE_DLOPEN=0; AC_MSG_WARN(dynamic loading of libs not possible (no dlfcn.h header))
   )
fi

AC_CHECK_LIB(stdc++, main,
   SYS_LIBS="-lstdc++ $SYS_LIBS",
   AC_MSG_WARN(standard C++ library (-lstdc++) not found; linking problems are likely)
   )

#----------------------
# Check for PVM.
#----------------------

if test ! -n "$PVM_CFLAGS"; then
    # FIXME:
    PVM_CFLAGS="-I$PVM_ROOT/include"
fi

if test ! -n "$PVM_LIBS"; then
    # test for -lpvm3 and -lgpvm3 at the same time
    OPP_CHECK_LIB_WITHPATH(pvm3, pvm_joingroup, $PVM_ROOT/lib/$PVM_ARCH,
      PVM_LIBS="$lib_path_swith -lgpvm3 -lpvm3",
      [PVM_LIBS=""
       AC_MSG_WARN(if you do have PVM3 then set PVM_ROOT and PVM_ARCH...)
       AC_MSG_WARN(...to their correct values and re-run configure)],
       -lpvm3
    )
fi

#----------------------
# Check for Tk.
#----------------------

if test ! -n "$TK_CFLAGS"; then
   # FIXME: non-gcc compilers probably need different flag
   TK_CFLAGS="-fwritable-strings"
fi

if test ! -n "$TK_LIBS"; then
    # X Window
    AC_PATH_X
    if test "$no_x" != "yes"; then
      if test -n "$x_includes"; then
        TK_CFLAGS="-I$x_includes $TK_CFLAGS"
      fi
      if test -n "$x_libraries"; then
        TK_LIBS="-L$x_libraries -lX11 $TK_LIBS"
      fi
    fi

    # Tcl
    OPP_CHECK_LIB_WITHPATH(tcl, Tcl_Init, /opt/lib,
      TK_LIBS="$lib_path_switch -ltcl $TK_LIBS",
      :,
      $SYS_LIBS)

    # Tk
    OPP_CHECK_LIB_WITHPATH(tk, Tk_BindEvent, /opt/lib,
      TK_LIBS="$lib_path_switch -ltk $TK_LIBS",
      TK_LIBS=""; AC_MSG_WARN(Cannot link with Tcl/Tk -- Tkenv GNED and Plove will not build/run),
      $TK_LIBS $SYS_LIBS)
fi

#----------------------
# Check for Turbo Vision.
#----------------------

if test ! -n "$TV_LIBS"; then
    # FIXME:
    TV_CFLAGS="-I/usr/include/tvision"
fi

if test ! -n "$TV_LIBS"; then
    OPP_CHECK_LIB_WITHPATH(tv, main, /opt/lib,
      TV_LIBS="$lib_path_swith -ltv",
      TV_LIBS=""; AC_MSG_WARN(Cannot link with Turbo Vision -- Tvenv will not build),
      $SYS_LIBS)
fi

#----------------------
# Checks for header files.
#----------------------

# FIXME:
#AC_HEADER_STDC
#AC_CHECK_HEADERS(malloc.h unistd.h)


# Checks for typedefs, structures, and compiler characteristics.
#AC_C_CONST
#AC_C_INLINE
#AC_TYPE_SIZE_T
#AC_STRUCT_TM

#----------------------
# Checks for library functions.
#----------------------

AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(select strdup strspn strstr)

#----------------------
# shared or static libraries
#----------------------
# If you change this setting, remember to delete the other set of libraries
# (or at least the soft links from lib/).
if test "$build_shared_libs" = yes; then
    LIB_SUFFIX='$(SO_LIB_SUFFIX)'
else
    LIB_SUFFIX='$(A_LIB_SUFFIX)'
fi

#----------------------
# Conditional build of some components
#----------------------

if test -n "$PVM_LIBS"; then
   SIM_PVM_IF_POSSIBLE=sim_pvm
else
   SIM_PVM_IF_POSSIBLE=missing-library
fi

if test -n "$TK_LIBS"; then
   TKENV_IF_POSSIBLE=tkenv
   GNED_IF_POSSIBLE=gned
else
   TKENV_IF_POSSIBLE=missing-library
   GNED_IF_POSSIBLE=missing-library
fi

if test -n "$TV_LIBS"; then
   TVENV_IF_POSSIBLE=tvenv
else
   TVENV_IF_POSSIBLE=missing-library
fi

#----------------------
# Tcl code embedding.
#----------------------

if test "$TKENV_EMBED_TCL" = yes; then
   TKENV_EMBED_SUFFIX=-e
else
   TKENV_EMBED_SUFFIX=
fi

if test "$GNED_EMBED_TCL" = yes; then
   GNED_EMBED_SUFFIX=-e
else
   GNED_EMBED_SUFFIX=
fi

#----------------------
# Subtitutions.
#----------------------

AC_SUBST(OMNETPP_VERSION)

AC_SUBST(OMNETPP_BIN_DIR)
AC_SUBST(OMNETPP_INCL_DIR)
AC_SUBST(OMNETPP_LIB_DIR)
AC_SUBST(OMNETPP_BITMAP_PATH)

AC_SUBST(OMNETPP_SRC_DIR)
AC_SUBST(OMNETPP_SAMPLES_DIR)
AC_SUBST(OMNETPP_MODELS_DIR)

AC_SUBST(YACC)
AC_SUBST(LEX)
AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(NEDC)
AC_SUBST(AS)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(SHLIB_LD)

AC_SUBST(A_LIB_SUFFIX)
AC_SUBST(SO_LIB_SUFFIX)
AC_SUBST(LIB_SUFFIX)

AC_SUBST(HAVE_DLOPEN)
AC_SUBST(TV_CFLAGS)
AC_SUBST(TV_LIBS)
AC_SUBST(TK_CFLAGS)
AC_SUBST(TK_LIBS)
AC_SUBST(PVM_INCL_DIR)
AC_SUBST(PVM_LIBS)
AC_SUBST(SYS_LIBS)

AC_SUBST(TKENV_IF_POSSIBLE)
AC_SUBST(TVENV_IF_POSSIBLE)
AC_SUBST(SIM_PVM_IF_POSSIBLE)
AC_SUBST(GNED_IF_POSSIBLE)

AC_SUBST(TKENV_EMBED_SUFFIX)
AC_SUBST(GNED_EMBED_SUFFIX)

#----------------------
# Generate files.
#----------------------

AC_OUTPUT(
  Makefile
  src/cmdenv/Makefile
  src/envir/Makefile
  src/gned/Makefile
  src/nedc/Makefile
  src/plove/Makefile
  src/sim/Makefile
  src/tkenv/Makefile
  src/tvenv/Makefile
  src/utils/Makefile
  src/utils/makemake
  models/support/Makefile
  samples/dyna/Makefile
  samples/fddi/Makefile
  samples/fifo1/Makefile
  samples/fifo2/Makefile
  samples/hcube/Makefile
  samples/hist/Makefile
  samples/nim/Makefile
  samples/pvmex/Makefile
  samples/token/Makefile
)

chmod +x src/utils/makemake

#----------------------
# Env. vars
#----------------------

if echo $PATH | grep -q `eval echo $OMNETPP_BIN_DIR`; then
  echo "Your PATH contains $OMNETPP_BIN_DIR. Good."
else
  cat << EOT

You should put $OMNETPP_BIN_DIR into your path.
Add the following line to your startup file:
  export PATH=\$PATH:$OMNETPP_BIN_DIR  # .(bash_)profile if you use sh/bash
  setenv PATH \$PATH:$OMNETPP_BIN_DIR  # .cshrc if you use csh,tcsh etc.

EOT
fi

if test "$build_shared_libs" = yes; then
  if echo $LD_LIBRARY_PATH | grep -q `eval echo $OMNETPP_LIB_DIR`; then
    echo "Your LD_LIBRARY_PATH is set. Good."
  else
    cat << EOT

Note: Shared libraries were selected in configure. So that the dynamic
linker can find the OMNeT++ shared libs, you either have to create
symbolic links from /usr/lib to the OMNeT++ shared libraries (as root),
or better, set the LD_LIBRARY_PATH environment variable.

Add the corresponding line to your startup file:
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$OMNETPP_LIB_DIR
         # into .(bash_)profile if you use bash or other sh-like shell
  setenv LD_LIBRARY_PATH \$LD_LIBRARY_PATH:$OMNETPP_LIB_DIR
         # into .cshrc if you use tcsh or other csh-like shell

If you prefer static libraries, edit configure.user and change the
build_shared_libs=yes line to build_shared_libs=no, then delete the shared
libraries, re-run configure and make.
EOT
  fi
fi

