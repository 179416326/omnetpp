dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/sim/omnetpp.h)

dnl -------------------------------------------------------------
dnl  Test macro to find a lib in one of the passed directories
dnl -------------------------------------------------------------
dnl
dnl OPP_CHECK_LIB_WITHPATH(LIBNAME, FUNCTION, LOCATION-LIST,
dnl    ACTION-IF-FOUND, ACTION-IF-NOT-FOUND, ADDITIONAL-LIBS)
dnl
AC_DEFUN(OPP_CHECK_LIB_WITHPATH,[
save_LDFLAGS=$LDFLAGS
save_LIBS=$LIBS
LIBS="-l$1 $6"
for lib_path_swith in "" $3; do
  if test -n "$lib_path_swith"; then
    AC_MSG_CHECKING(if -l$1 is in $lib_path_swith)
    lib_path_swith="-L$lib_path_swith"
  else
    AC_MSG_CHECKING(if -l$1 is in linker path)
  fi
  LDFLAGS="$save_LDFLAGS $lib_path_swith"
  AC_TRY_LINK([char $2();],$2(),
              [AC_MSG_RESULT(yes);succ=yes;break],
              [AC_MSG_RESULT(no);succ=no])
done
LDFLAGS=$save_LDFLAGS
LIBS=$save_LIBS
if test $succ = yes; then
  :; $4
else
  :; $5
fi
])

#----------------------
# Version info.
#----------------------

VERSION="1.2"

#----------------------
# Checks for programs.
#----------------------

AC_PROG_YACC
AC_PROG_LEX
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB

# FIXME: the following lines will need some check
AS="as"
AR="ar cr"
SHLIB_LD="gcc -shared"
NEDC=nedc

A_LIB_SUFFIX=".a.$VERSION"
SO_LIB_SUFFIX=".so.$VERSION"

#----------------------
# Checks for standard libraries.
#----------------------

SYS_LIBS=""

AC_CHECK_LIB(m, floor,
   SYS_LIBS="-lm $SYS_LIBS",
   AC_MSG_WARN("math library (-lm) not found (maybe part of standard C lib?)")
   )

AC_CHECK_LIB(dl, dlopen,
   HAVE_DLOPEN=1; SYS_LIBS="-ldl $SYS_LIBS",
   HAVE_DLOPEN=0; AC_MSG_WARN("dynamic loading of libs not possible (no dlopen() syscall)")
   )
if test "$HAVE_DLOPEN" = "1"; then
   AC_CHECK_HEADER(dlfcn.h, ,
      HAVE_DLOPEN=0; AC_MSG_WARN("dynamic loading of libs not possible (no dlfcn.h header)")
   )
fi

AC_CHECK_LIB(stdc++, main,
   SYS_LIBS="-lstdc++ $SYS_LIBS",
   AC_MSG_WARN("standard C++ library (-lstdc++) not found; linking problems are likely")
   )

#----------------------
# Check for PVM.
#----------------------

# FIXME:
PVM_CFLAGS="-I$PVM_ROOT/include"

# test for -lpvm3 and -lgpvm3 at the same time
OPP_CHECK_LIB_WITHPATH(pvm3, pvm_joingroup, $PVM_ROOT/lib/$PVM_ARCH,
  PVM_LIBS="$lib_path_swith -lgpvm3 -lpvm3"
  [PVM_LIBS=""
   AC_MSG_WARN("if you do have PVM3, set PVM_ROOT and PVM_ARCH")
   AC_MSG_WARN("  to their correct values and re-run configure")],
  -lpvm3
  )

#----------------------
# Check for Tk.
#----------------------

# FIXME: non-gcc compilers probably need different flag
TK_CFLAGS="-fwritable-strings"
TK_LIBS=""

# X Window
AC_PATH_X
if test ! -n "$x_includes"; then
  TK_CFLAGS="$x_includes $TK_CFLAGS"
fi
if test ! -n "$x_libraries"; then
  TK_LIBS="$x_libraries $TK_LIBS"
fi

# Tcl
OPP_CHECK_LIB_WITHPATH(tcl, Tcl_Init, /opt/lib
   TK_LIBS="$lib_path_switch -ltcl $TK_LIBS",
   :,
   $SYS_LIBS)

# Tk
OPP_CHECK_LIB_WITHPATH(tk, Tk_BindEvent, /opt/lib
   TK_LIBS="$lib_path_switch -ltk $TK_LIBS",
   TK_LIBS=""; AC_MSG_WARN("Cannot link with Tcl/Tk -- Tkenv, GNED and Plove won't build/run"),
   $TK_LIBS $SYS_LIBS)

#----------------------
# Check for Turbo Vision.
#----------------------

# FIXME:
TV_CFLAGS="-I/usr/include/tvision"

OPP_CHECK_LIB_WITHPATH(tv, main,
   TV_LIBS="$lib_path_swith -ltv",
   TV_LIBS=""; AC_MSG_WARN("Cannot link with Turbo Vision -- TVenv won't build"),
   $SYS_LIBS)

#----------------------
# Checks for header files.
#----------------------

# FIXME:
#AC_HEADER_STDC
#AC_CHECK_HEADERS(malloc.h unistd.h)


# Checks for typedefs, structures, and compiler characteristics.
#AC_C_CONST
#AC_C_INLINE
#AC_TYPE_SIZE_T
#AC_STRUCT_TM

#----------------------
# Checks for library functions.
#----------------------

AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(select strdup strspn strstr)

#----------------------
# OMNETPP components.
#----------------------

OMNETPP_ROOT=`pwd`

OMNETPP_SRC_DIR="$OMNETPP_ROOT/src"
OMNETPP_SAMPLES_DIR="$OMNETPP_ROOT/samples"
OMNETPP_MODELS_DIR="$OMNETPP_ROOT/models"
OMNETPP_BITMAP_PATH="$OMNETPP_ROOT/bitmaps"

OMNETPP_BIN_DIR="$OMNETPP_ROOT/bin"
OMNETPP_INCL_DIR="$OMNETPP_SRC_DIR/sim"
OMNETPP_LIB_DIR="$OMNETPP_ROOT/lib"

# If you change this setting, remember to delete the other set of libraries
# (or at least the soft links from lib/).
LIB_SUFFIX='$(A_LIB_SUFFIX)'
#LIB_SUFFIX='$(SO_LIB_SUFFIX)'


#----------------------
# Compile options. Use -g for debugging, -O3... for speed.
#----------------------

CFLAGS='-g'
#CFLAGS='-g -Wall'
#CFLAGS='-O3 -DNDEBUG=1'

#----------------------
# Conditional build of some components
#----------------------

if test -n "$PVM_LIBS"; then
   SIM_PVM_IF_POSSIBLE=missing-library
else
   SIM_PVM_IF_POSSIBLE=sim_pvm
fi

if test -n "$TK_LIBS"; then
   TKENV_IF_POSSIBLE=missing-library
   GNED_IF_POSSIBLE=missing-library
else
   TKENV_IF_POSSIBLE=tkenv
   GNED_IF_POSSIBLE=gned
fi

if test -n "$TV_LIBS"; then
   TVENV_IF_POSSIBLE=missing-library
else
   TVENV_IF_POSSIBLE=tvenv
fi

#----------------------
# Subtitutions.
#----------------------

AC_SUBST(YACC)
AC_SUBST(LEX)
AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(NEDC)
AC_SUBST(AS)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(SHLIB_LD)

AC_SUBST(A_LIB_SUFFIX)
AC_SUBST(SO_LIB_SUFFIX)
AC_SUBST(LIB_SUFFIX)

AC_SUBST(HAVE_DLOPEN)
AC_SUBST(TV_CFLAGS)
AC_SUBST(TV_LIBS)
AC_SUBST(TK_CFLAGS)
AC_SUBST(TK_LIBS)
AC_SUBST(PVM_INCL_DIR)
AC_SUBST(PVM_LIBS)
AC_SUBST(SYS_LIBS)

AC_SUBST(OMNETPP_BIN_DIR)
AC_SUBST(OMNETPP_INCL_DIR)
AC_SUBST(OMNETPP_LIB_DIR)
AC_SUBST(OMNETPP_BITMAP_PATH)

AC_SUBST(OMNETPP_SRC_DIR)
AC_SUBST(OMNETPP_SAMPLES_DIR)
AC_SUBST(OMNETPP_MODELS_DIR)

AC_SUBST(TKENV_IF_POSSIBLE)
AC_SUBST(TVENV_IF_POSSIBLE)
AC_SUBST(SIM_PVM_IF_POSSIBLE)
AC_SUBST(GNED_IF_POSSIBLE)

#----------------------
# Generate files.
#----------------------

AC_OUTPUT(
  Makefile
  src/cmdenv/makefile
  src/envir/makefile
  src/gned/makefile
  src/nedc/makefile
  src/sim/makefile
  src/tkenv/makefile
  src/tvenv/makefile
  src/utils/makefile
  src/utils/makemake
  models/support/makefile
  samples/dyna/makefile
  samples/fddi/makefile
  samples/fifo1/makefile
  samples/fifo2/makefile
  samples/hcube/makefile
  samples/hist/makefile
  samples/nim/makefile
  samples/pvmex/makefile
  samples/token/makefile
)

chmod +x src/utils/makemake

#----------------------
# Env. vars
#----------------------

if echo $PATH | grep -q $OMNETPP_ROOT/bin; then
  echo "Your PATH contains $OMNETPP_ROOT/bin. Good."
else
  cat << EOT

You should put $OMNETPP_ROOT/bin into your path.
Add the following line to your startup file:
  export PATH=\$PATH:\$HOME/omnetpp/bin  # .(bash_)profile if you use sh/bash
  setenv PATH \$PATH:\$HOME/omnetpp/bin  # .cshrc if you use csh,tcsh etc.

EOT
   export PATH=$PATH:$HOME/omnetpp/bin
fi

if test "$LIB_SUFFIX" = "so"; then
  if echo $LD_LIBRARY_PATH | grep -q $OMNETPP_ROOT/lib; then
    echo "Your LD_LIBRARY_PATH is set. Good."
  else
    cat << EOT

Note: Dynamic libraries are selected in configure (LIB_SUFFIX=so).
You'll either have to create symbolic links from /usr/lib to the
OMNeT++ shared libraries (as root) or set the LD_LIBRARY_PATH environment
variable. Add the corresponding line to your startup file:
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/omnetpp/lib
         # into .(bash_)profile if you use bash or other sh-like shell
  setenv LD_LIBRARY_PATH \$LD_LIBRARY_PATH:\$HOME/omnetpp/lib
         # into .cshrc if you use tcsh or other csh-like shell
If you prefer static libraries, change LIB_SUFFIX='so' to
LIB_SUFFIX='a' in the configure script, then re-run configure and make.
EOT
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/omnetpp/lib
  fi
fi

