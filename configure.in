dnl Process this file with autoconf to produce a configure script.

AC_INIT(include/omnetpp.h)
AC_CONFIG_AUX_DIR(src/utils)
AC_CANONICAL_HOST()

#
# OMNeT++ version number
#
OMNETPP_VERSION=`cat Version | sed 's/omnetpp-//'`

dnl -------------------------------------------------------------
dnl  Set system/arch specific values
dnl -------------------------------------------------------------
dnl
case $host in
  sparc-sun-*)
    CFLAGS_ARCH="-DSUNSPARC"
    ;;
  *-*-cygwin*)
    cygwin=yes
    ;;
  *-hp-hpux*)
    SO_LIB_SUFFIX=".sl"
    ;;
  *)
    ;;
esac

#
# Location of various components. Can be overridden in configure.user.
#
OMNETPP_ROOT=`pwd`

if test "$cygwin" = yes; then
    OMNETPP_ROOT=`cygpath -w $OMNETPP_ROOT | sed 's|\\\\|/|g'`
fi

OMNETPP_SRC_DIR="$OMNETPP_ROOT/src"
OMNETPP_DOC_DIR="$OMNETPP_ROOT/doc"
OMNETPP_SAMPLES_DIR="$OMNETPP_ROOT/samples"
OMNETPP_TUTORIAL_DIR="$OMNETPP_ROOT/tutorial"
# OMNETPP_MODELS_DIR="$OMNETPP_ROOT/models"
OMNETPP_TEST_DIR="$OMNETPP_ROOT/test"
OMNETPP_BITMAP_PATH=".;./bitmaps;$OMNETPP_ROOT/bitmaps"

OMNETPP_SAMPLES="dyna fddi fifo1 fifo2 hcube hist nim pvmex token demo"

OMNETPP_BIN_DIR="$OMNETPP_ROOT/bin"
OMNETPP_INCL_DIR="$OMNETPP_ROOT/include"
OMNETPP_LIB_DIR="$OMNETPP_ROOT/lib"

OMNETPP_TKENV_DIR="$OMNETPP_SRC_DIR/tkenv"
OMNETPP_GNED_DIR="$OMNETPP_SRC_DIR/gned"
OMNETPP_NEDC_DIR="$OMNETPP_SRC_DIR/nedc"
OMNETPP_PLOVE_DIR="$OMNETPP_SRC_DIR/plove"

#
# Default values for other variables that come from configure.user.
#
build_shared_libs=if-not-cygwin
#build_shared_libs=yes
#build_shared_libs=no

MPI_CFLAGS=
MPI_LIBS=
PVM_CFLAGS=
PVM_LIBS=
TK_CFLAGS=
TK_LIBS=

CFLAGS='-g'
NEDCFLAGS='-Wno-unused'
#CFLAGS='-g -Wall'
#CFLAGS='-O3 -DNDEBUG=1'

LDFLAGS=

# total stack size on NT defaults to 128MB (will be added to LDFLAGS later):
CYGWIN_STACKSIZE=134217728



dnl -------------------------------------------------------------
dnl  Test macro to find a lib in one of the passed directories
dnl -------------------------------------------------------------
dnl
dnl OPP_CHECK_LIB_WITHPATH(LIBNAME, FUNCTION, LOCATION-LIST,
dnl    ACTION-IF-FOUND, ACTION-IF-NOT-FOUND, ADDITIONAL-LIBS)
dnl
AC_DEFUN(OPP_CHECK_LIB_WITHPATH,[
save_LDFLAGS=$LDFLAGS
save_LIBS=$LIBS
LIBS="-l$1 $6"
for lib_path_switch in "" $3; do
  if test -n "$lib_path_switch"; then
    AC_MSG_CHECKING(whether -l$1 is in $lib_path_switch)
    lib_path_switch="-L$lib_path_switch"
  else
    AC_MSG_CHECKING(whether -l$1 is in linker path)
  fi
  LDFLAGS="$save_LDFLAGS $lib_path_switch"
  AC_TRY_LINK([char $2();],$2(),
              [AC_MSG_RESULT(yes);succ=yes;break],
              [AC_MSG_RESULT(no);succ=no])
done
LDFLAGS=$save_LDFLAGS
LIBS=$save_LIBS
if test $succ = yes; then
  :; $4
else
  :; $5
fi
])

#----------------------
# Checks for programs.
#----------------------

AC_PROG_YACC
if test "$YACC" = "yacc"; then
   AC_MSG_WARN(neither bison nor byacc is found...)
fi

AC_PROG_LEX
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB

# doxygen is used for generation of api doc
AC_ARG_VAR(DOXYGEN, The Doxygen documentation tool)
AC_PATH_PROG(DOXYGEN, doxygen, doxygen)

# perl is needed for experimental nedc message subclassing (see feature nedc-subcl)
AC_ARG_VAR(PERL, The Perl interpreter)
AC_PATH_PROG(PERL, perl)

# FIXME: the following lines will need some check
AS="as"
AR="ar cr"
SHLIB_LD="$CXX -shared -fPIC"
SHLIB_CFLAGS="-fPIC"
# NEDC default - maybe overwritten by feature nedc-subcl
NEDC="nedc"
MAKEDEPEND="opp_makedep -Y --objdirtree"

case "$CXX" in
   "cxx") # Tru64 machine
      CXXLIB=cxx
   ;;
   *) # GNU C++ ?
      CXXLIB=stdc++
   ;;
esac

if test "$cygwin" = yes; then
    MYPWD="$OMNETPP_SRC_DIR/utils/cygpwd"
else
    MYPWD=pwd
fi

#
# set default library suffixes. May be already defined
# with system/arch specific values
#
A_LIB_SUFFIX=${A_LIB_SUFFIX:-".a"}
SO_LIB_SUFFIX=${SO_LIB_SUFFIX:-".so"}

if test "$cygwin" = yes; then
    EXE_SUFFIX=".exe"
else
    EXE_SUFFIX=""
fi

if test "$cygwin" = yes; then
    WISH="cygwish80.exe"
else
    WISH=`which wish`
fi

if test "x$WISH" = "x"; then
    AC_MSG_WARN(cannot find wish -- you'll need to manually adjust the Plove script)
fi



#----------------------
# Read in user settings (and allow override the above settings)
#----------------------
. ./configure.user

#----------------------
# set arch specific flags
#----------------------
CFLAGS="$CFLAGS $CFLAGS_ARCH"

#----------------------
# Checks for standard libraries.
#----------------------

SYS_LIBS=""

AC_CHECK_LIB(m, floor,
   SYS_LIBS="-lm $SYS_LIBS",
   AC_MSG_WARN(math library (-lm) not found (maybe part of standard C lib?))
   )

AC_CHECK_LIB(dl, dlopen,
   HAVE_DLOPEN=1; SYS_LIBS="-ldl $SYS_LIBS",
   HAVE_DLOPEN=0; AC_MSG_WARN(dynamic loading of libs not possible (no dlopen() syscall))
   )
if test "$HAVE_DLOPEN" = "1"; then
   AC_CHECK_HEADER(dlfcn.h, ,
      HAVE_DLOPEN=0; AC_MSG_WARN(dynamic loading of libs not possible (no dlfcn.h header))
   )
fi

AC_CHECK_LIB($CXXLIB, main,
   SYS_LIBS="-l$CXXLIB $SYS_LIBS",
   AC_MSG_WARN(standard C++ library (-l$CXXLIB) not found; linking problems are likely)
   )

#----------------------
# Check for MPI.
#----------------------

AC_CHECK_LIB(mpi, MPI_Init,
   MPI_LIBS="-lmpi -lelan",
   AC_MSG_WARN(MPI library not installed!)
   )

#----------------------
# Check for PVM.
#----------------------

if test ! -n "$PVM_CFLAGS"; then
    if test ! -n "$PVM_ROOT"; then
        AC_MSG_WARN(no PVM_CFLAGS set in configure.user, and no PVM_ROOT environment variable!)
        AC_MSG_WARN(may run into problems building SIM_PVM!)
    else
        PVM_CFLAGS="-I$PVM_ROOT/include"
    fi
fi

if test ! -n "$PVM_LIBS"; then
    # test for -lpvm3 and -lgpvm3 at the same time
    OPP_CHECK_LIB_WITHPATH(gpvm3, pvm_joingroup, $PVM_ROOT/lib/$PVM_ARCH,
      PVM_LIBS="$lib_path_switch -lgpvm3 -lpvm3",
      [PVM_LIBS=""
       AC_MSG_WARN(if you *do* have PVM3 then set PVM_ROOT and PVM_ARCH...)
       AC_MSG_WARN(...and re-run configure!)],
       -lpvm3
    )
fi

#----------------------
# Check for MPI.
#----------------------

if test ! -n "$MPI_CFLAGS"; then
    AC_MSG_WARN(FIXME: check for presence of MPI headers not implemented!)
fi

if test ! -n "$MPI_LIBS"; then
    AC_MSG_WARN(FIXME: check for presence of MPI libs not implemented!)
fi

#----------------------
# Check for Tk.
#----------------------

if test ! -n "$TK_CFLAGS"; then
   # FIXME: non-gcc compilers probably need different flag
   case "$CXX" in
      "c++") TK_CFLAGS="-fwritable-strings";;
      *)     TK_CFLAGS= ;;
   esac
fi

if test ! -n "$TK_LIBS"; then

    # X Window
    AC_PATH_X
    if test "$no_x" != "yes"; then
      if test -n "$x_includes"; then
        TK_CFLAGS="-I$x_includes $TK_CFLAGS"
      fi
      if test -n "$x_libraries"; then
        TK_LIBS="-L$x_libraries -lX11 $TK_LIBS"
      fi
    fi

    # try to find Tcl/Tk libraries in different versions (80 is for cygwin)
    tcltk_found=
    for ver in '' 8.4 8.3 8.2 8.1 8.0 80; do
      # here we check for Tcl only, Tk we'll see later
      OPP_CHECK_LIB_WITHPATH(tcl$ver, Tcl_Main, /opt/lib,
                        TK_LIBS="$lib_path_switch -ltk$ver -ltcl$ver $TK_LIBS"
                        tcltk_found=yes,
                        :,
                        $TK_LIBS $SYS_LIBS)
      if test -n "$tcltk_found"; then
        break
      fi
    done

    # now we verify that we have a matching Tk; if not, clear the tcltk_found flag
    if test "$tcltk_found" = "yes"; then
      OPP_CHECK_LIB_WITHPATH(tk$ver, Tk_BindEvent,,
                        :,
                        tcltk_found=,
                        $TK_LIBS $SYS_LIBS)
    fi

    if test "$tcltk_found" != "yes"; then
       AC_MSG_WARN([no Tcl/Tk libraries found, needed for GNED, Tkenv and Plove!])
       AC_MSG_WARN([if you *do* have Tcl/Tk then edit TK_CFLAGS and TK_LIBS...])
       AC_MSG_WARN([...in configure.user and re-run configure!])
       TK_LIBS="-ltk -ltcl $TK_LIBS"
    fi
fi

#----------------------
# Checks for header files.
#----------------------

# FIXME:
#AC_HEADER_STDC
#AC_CHECK_HEADERS(malloc.h unistd.h)


# Checks for typedefs, structures, and compiler characteristics.
#AC_C_CONST
#AC_C_INLINE
#AC_TYPE_SIZE_T
#AC_STRUCT_TM

#----------------------
# Checks for library functions.
#----------------------

AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(select strdup strspn strstr)

#----------------------
# Linker flags
#----------------------

# on NT, set total stack size
if test "$cygwin" = yes; then
  LDFLAGS="$LDFLAGS -s -Xlinker --stack -Xlinker $CYGWIN_STACKSIZE"
fi

#----------------------
# shared or static libraries
#----------------------
# If you change this setting, remember to delete the other set of libraries
# (or at least the soft links from lib/).
if test "$build_shared_libs" = if-not-cygwin; then
    if test "$cygwin" = yes; then
        build_shared_libs=no
    else
        build_shared_libs=yes
    fi
fi
if test "$build_shared_libs" = yes; then
    LIB_SUFFIX='$(SO_LIB_SUFFIX)'
    if test "$cygwin" = yes; then
        CFLAGS="$CFLAGS -DWIN32_DLL"
    else
	CFLAGS="$CFLAGS $SHLIB_CFLAGS"
    fi
else
    LIB_SUFFIX='$(A_LIB_SUFFIX)'
fi

#----------------------
# Conditional build of some components
#----------------------

if test -n "$MPI_LIBS"; then
   SIM_MPI_IF_POSSIBLE=sim_mpi
else
   SIM_MPI_IF_POSSIBLE=missing-mpi-library
fi

if test -n "$PVM_LIBS"; then
   SIM_PVM_IF_POSSIBLE=sim_pvm
else
   SIM_PVM_IF_POSSIBLE=missing-pvm-library
fi

if test -n "$TK_LIBS"; then
   TKENV_IF_POSSIBLE=tkenv
   GNED_IF_POSSIBLE=gned
else
   TKENV_IF_POSSIBLE=missing-library
   GNED_IF_POSSIBLE=missing-library
fi

#----------------------
# Tcl code embedding.
#----------------------

if test "$TKENV_EMBED_TCL" = yes; then
   TKENV_EMBED_SUFFIX=-e
else
   TKENV_EMBED_SUFFIX=
fi

if test "$GNED_EMBED_TCL" = yes; then
   GNED_EMBED_SUFFIX=-e
else
   GNED_EMBED_SUFFIX=
fi

if test "$PLOVE_EMBED_TCL" = yes; then
   PLOVE_VARIANT=plove-exe
elif test "$cygwin" = yes; then
   PLOVE_VARIANT=plove-cyg
else
   PLOVE_VARIANT=plove-sh
fi

#----------------------
# Feature tests
#----------------------

# experimental subclassing
AC_ARG_ENABLE(nedc-subcl,
[  --enable-nedc-subcl     experimental nedc subclassing extension (no support - use at own risk)],
[case "${enableval}" in
   yes|no) ;;
   *)      AC_MSG_ERROR([bad value ${enableval} for nedc-subcl option]) ;;
 esac],
              [enableval=no])
if test "${enableval}" = yes; then
  if test -z "${PERL}" ; then
    AC_MSG_WARN(no perl found - disabling feature nedc-subcl)
  else
    cat 1>&2 << EOT

Warning: You have enabled nedc subclassing which is experimental.
         Please note that it works for unix like systems only and
         that there is no support possible if you encounter problems.
         At least you should read the message subclassing documentation
         ${OMNETPP_NEDC_DIR}/msgdoc.txt

	 Have a look at ${OMNETPP_SAMPLES_DIR}/dyna2 as a sample
	 simulation using nedc subclassing

EOT

  NEDC="${OMNETPP_NEDC_DIR}/nedcwrapper.sh"
  AC_CONFIG_FILES( samples/dyna2/Makefile )
  OMNETPP_SAMPLES="$OMNETPP_SAMPLES dyna2"
  fi
fi


#----------------------
# Files to be generated
#----------------------
AC_CONFIG_FILES(
  Makefile
  src/cmdenv/Makefile
  src/envir/Makefile
  src/gned/Makefile
  src/nedxml/Makefile
  src/nedc/Makefile
  src/plove/Makefile
  src/sim/Makefile
  src/tkenv/Makefile
  src/utils/Makefile
  src/utils/opp_makemake
  samples/dyna/Makefile
  samples/fddi/Makefile
  samples/fifo1/Makefile
  samples/fifo2/Makefile
  samples/hcube/Makefile
  samples/hist/Makefile
  samples/nim/Makefile
  samples/pvmex/Makefile
  samples/token/Makefile
  samples/demo/Makefile
  tutorial/queues/Makefile
  include/Makefile
  test/Makefile
)


#----------------------
# Subtitutions.
#----------------------

AC_SUBST(OMNETPP_VERSION)

AC_SUBST(OMNETPP_BIN_DIR)
AC_SUBST(OMNETPP_INCL_DIR)
AC_SUBST(OMNETPP_LIB_DIR)
AC_SUBST(OMNETPP_BITMAP_PATH)

AC_SUBST(OMNETPP_SRC_DIR)
AC_SUBST(OMNETPP_DOC_DIR)
AC_SUBST(OMNETPP_SAMPLES_DIR)
AC_SUBST(OMNETPP_TUTORIAL_DIR)
AC_SUBST(OMNETPP_TEST_DIR)
dnl AC_SUBST(OMNETPP_MODELS_DIR)

AC_SUBST(OMNETPP_SAMPLES)

AC_SUBST(YACC)
AC_SUBST(LEX)
AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(CPPFLAGS)
AC_SUBST(MYPWD)
AC_SUBST(NEDC)
AC_SUBST(NEDCFLAGS)
AC_SUBST(AS)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(SHLIB_LD)
AC_SUBST(WISH)
AC_SUBST(MAKEDEPEND)

AC_SUBST(DOXYGEN)

AC_SUBST(A_LIB_SUFFIX)
AC_SUBST(SO_LIB_SUFFIX)
AC_SUBST(LIB_SUFFIX)
AC_SUBST(EXE_SUFFIX)

AC_SUBST(HAVE_DLOPEN)
AC_SUBST(TK_CFLAGS)
AC_SUBST(TK_LIBS)
AC_SUBST(MPI_CFLAGS)
AC_SUBST(MPI_LIBS)
AC_SUBST(PVM_CFLAGS)
AC_SUBST(PVM_LIBS)
AC_SUBST(SYS_LIBS)

AC_SUBST(TKENV_IF_POSSIBLE)
AC_SUBST(SIM_PVM_IF_POSSIBLE)
AC_SUBST(SIM_MPI_IF_POSSIBLE)
AC_SUBST(GNED_IF_POSSIBLE)

AC_SUBST(TKENV_EMBED_SUFFIX)
AC_SUBST(GNED_EMBED_SUFFIX)
AC_SUBST(PLOVE_VARIANT)

AC_SUBST(OMNETPP_TKENV_DIR)
AC_SUBST(OMNETPP_GNED_DIR)
AC_SUBST(OMNETPP_PLOVE_DIR)



#
# Generate files
#
AC_OUTPUT()

chmod +x src/utils/opp_makemake

#----------------------
# Check if the path contains omnetpp/bin (it should)
# Note: the method used here also works with Cygwin, but requires
# write permission to $OMNETPP_BIN_DIR.
#----------------------

# first we need to expand the ${HOME} variable and make sure the dir exists..
omnetpp_bin_dir=`eval echo $OMNETPP_BIN_DIR`
if test ! -d $omnetpp_bin_dir; then
   echo "PROBLEM: the $OMNETPP_BIN_DIR directory does not exist!"
else
  # ...then we create a small tmp file to check if the dir is in the path
  probefile=__probe__
  echo '' >$omnetpp_bin_dir/$probefile
  chmod +x  $omnetpp_bin_dir/$probefile
  if ($probefile) >/dev/null 2>/dev/null; then
    echo "Your PATH contains $OMNETPP_BIN_DIR. Good!"
  else
    if test "$cygwin" = yes; then
      opp_bin_dir=`cygpath -u $OMNETPP_BIN_DIR`
      if test -z "$opp_bin_dir"; then opp_bin_dir=$OMNETPP_BIN_DIR; fi
      cat 1>&2 << EOT

WARNING: your PATH doesn't contain $opp_bin_dir!
Add the following line to your startup file, $HOME/.bash_profile:
  export PATH=\$PATH:$opp_bin_dir

EOT
    else
      cat 1>&2 << EOT

WARNING: your PATH doesn't contain $OMNETPP_BIN_DIR!
Add the following line to your startup file:
  export PATH=\$PATH:$OMNETPP_BIN_DIR  # .(bash_)profile if you use sh/bash
  setenv PATH \$PATH:$OMNETPP_BIN_DIR  # .cshrc if you use csh,tcsh etc.

EOT
    fi
  fi
  rm $omnetpp_bin_dir/$probefile
fi

#----------------------
# Check LD_LIBRARY path if we're building shared libs. This is not necessary
# with Cygwin because Windows locates DLLs another way.
#----------------------

if test "$build_shared_libs" = yes -a "$cygwin" != yes; then
  if echo $LD_LIBRARY_PATH | grep `eval echo $OMNETPP_LIB_DIR` >/dev/null; then
    echo "Your LD_LIBRARY_PATH is set. Good!"
  else
    cat 1>&2 << EOT

WARNING: You selected shared libraries in configure.user, but your
LD_LIBRARY_PATH doesn't seem to contain $OMNETPP_LIB_DIR!

So that the dynamic linker can find the OMNeT++ shared libs, you either have
to create symbolic links from /usr/lib to the OMNeT++ shared libraries
(you can do it as root), or better, set the LD_LIBRARY_PATH environment
variable.

Add the corresponding line to your startup file:
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$OMNETPP_LIB_DIR
         # into .(bash_)profile if you use bash or other sh-like shell
  setenv LD_LIBRARY_PATH \$LD_LIBRARY_PATH:$OMNETPP_LIB_DIR
         # into .cshrc if you use tcsh or other csh-like shell

If you prefer static libraries, edit configure.user and change the
build_shared_libs=yes line to build_shared_libs=no, then delete the shared
libraries, re-run configure and make.
EOT
  fi
fi

