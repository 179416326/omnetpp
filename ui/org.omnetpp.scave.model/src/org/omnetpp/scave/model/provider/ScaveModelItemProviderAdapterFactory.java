/**
 */
package org.omnetpp.scave.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.omnetpp.scave.model.util.ScaveModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScaveModelItemProviderAdapterFactory extends ScaveModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ScaveModelItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.Property} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PropertyItemProvider propertyItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.Property}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPropertyAdapter() {
        if (propertyItemProvider == null) {
            propertyItemProvider = new PropertyItemProvider(this);
        }

        return propertyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.Analysis} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AnalysisItemProvider analysisItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.Analysis}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAnalysisAdapter() {
        if (analysisItemProvider == null) {
            analysisItemProvider = new AnalysisItemProvider(this);
        }

        return analysisItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.Inputs} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InputsItemProvider inputsItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.Inputs}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInputsAdapter() {
        if (inputsItemProvider == null) {
            inputsItemProvider = new InputsItemProvider(this);
        }

        return inputsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.InputFile} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InputFileItemProvider inputFileItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.InputFile}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInputFileAdapter() {
        if (inputFileItemProvider == null) {
            inputFileItemProvider = new InputFileItemProvider(this);
        }

        return inputFileItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.BarChart} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BarChartItemProvider barChartItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.BarChart}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBarChartAdapter() {
        if (barChartItemProvider == null) {
            barChartItemProvider = new BarChartItemProvider(this);
        }

        return barChartItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.LineChart} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LineChartItemProvider lineChartItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.LineChart}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLineChartAdapter() {
        if (lineChartItemProvider == null) {
            lineChartItemProvider = new LineChartItemProvider(this);
        }

        return lineChartItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.HistogramChart} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected HistogramChartItemProvider histogramChartItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.HistogramChart}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createHistogramChartAdapter() {
        if (histogramChartItemProvider == null) {
            histogramChartItemProvider = new HistogramChartItemProvider(this);
        }

        return histogramChartItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.ScatterChart} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ScatterChartItemProvider scatterChartItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.ScatterChart}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createScatterChartAdapter() {
        if (scatterChartItemProvider == null) {
            scatterChartItemProvider = new ScatterChartItemProvider(this);
        }

        return scatterChartItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.scave.model.Charts} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ChartsItemProvider chartsItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.scave.model.Charts}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createChartsAdapter() {
        if (chartsItemProvider == null) {
            chartsItemProvider = new ChartsItemProvider(this);
        }

        return chartsItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (propertyItemProvider != null) propertyItemProvider.dispose();
        if (analysisItemProvider != null) analysisItemProvider.dispose();
        if (inputsItemProvider != null) inputsItemProvider.dispose();
        if (inputFileItemProvider != null) inputFileItemProvider.dispose();
        if (barChartItemProvider != null) barChartItemProvider.dispose();
        if (lineChartItemProvider != null) lineChartItemProvider.dispose();
        if (histogramChartItemProvider != null) histogramChartItemProvider.dispose();
        if (scatterChartItemProvider != null) scatterChartItemProvider.dispose();
        if (chartsItemProvider != null) chartsItemProvider.dispose();
    }

}
