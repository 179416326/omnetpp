#
# OMNeT++/OMNEST Makefile for {target}
#
# This file was generated with the command:
#  {progname} {args}
#


# Name of target to be created (-o option)
TARGET = {target}

# User interface (uncomment one) (-u option)
{~allenv?#}USERIF_LIBS = $(TKENV_LIBS) $(CMDENV_LIBS)
{~cmdenv?#}USERIF_LIBS = $(CMDENV_LIBS)
{~tkenv?#}USERIF_LIBS = $(TKENV_LIBS)

# C++ include paths (with -I)
INCLUDE_PATH = {includepath}

# Misc additional object and library files to link with
EXTRA_OBJS = {extraobjs}

# Object files from other directories to link with
EXT_DIR_OBJS = {extdirobjs}

# Timestamps of other directories (used as dependency)
EXT_DIR_TSTAMPS = {extdirtstamps}

# Additional libraries (-L, -l, -t options)
LIBS = {libpath}{libs}{importlibs}

# Output directory
O = {outdir}

# Object files for local .{cc} and .msg files
OBJS = {objs}

# Message files
MSGFILES = {msgfiles}

# C++ files generated from msg files
MSG_CC_FILES = {msgccfiles}
MSG_H_FILES = {msghfiles}

{subdirs:}# Subdirectories to recurse into
{subdirs:}SUBDIRS = {subdirs}
{subdirs:}{nmake:}SUBDIR_TARGETS = {subdirtargets}
{subdirs:}
{mode:}# Default mode (-M option); can be overridden with {nmake?n}make MODE=debug (or =release)
{mode:}{nmake?!}ifndef MODE
{mode:}MODE = {mode}
{mode:}{nmake?!}endif
{mode:}
#------------------------------------------------------------------------------

# Pull in OMNeT++ configuration (Makefile.inc or configuser.vc)
{nmake:}!if "$(OMNETPP_CONFIGFILE)"!=""
{nmake:}CONFIGFILE = $(OMNETPP_CONFIGFILE)
{nmake:}!elseif "$(OMNETPP_ROOT)"!=""
{nmake:}CONFIGFILE = $(OMNETPP_ROOT)/configuser.vc
{nmake:}!else
{nmake:}CONFIGFILE = {configfile}
{nmake:}!endif
{nmake:}
{nmake:}!if !exist($(CONFIGFILE))
{nmake:}!error '$(CONFIGFILE)' does not exist -- specify "configuser.vc" in the OMNETPP_CONFIGFILE variable (as environment variable or command-line nmake argument), or edit or re-generate this makefile.
{nmake:}!endif
{nmake:}
{nmake:}!include $(CONFIGFILE)
{~nmake:}CONFIGFILE = $(shell opp_configfilepath)
{~nmake:}include $(CONFIGFILE)

{rem:}# Check that MODE is valid (not enabled, to allow implementing other MODEs)
{rem:}{nmake:}!if "$(MODE)"!="debug" && "$(MODE)"!="release"
{rem:}{nmake:}error MODE must be "debug" or "release"
{rem:}{nmake:}!endif
{rem:}{~nmake:}ifneq ($(MODE),"debug")
{rem:}{~nmake:}ifneq ($(MODE),"release")
{rem:}{~nmake:}$(error MODE must be "debug" or "release")
{rem:}{~nmake:}endif
{rem:}{~nmake:}endif

# User interface libs
CMDENV_LIBS = {-u}_cmdenv_lib {-l}envir{.lib} {-l}cmdenv{.lib}
TKENV_LIBS = {-u}_tkenv_lib {-l}envir{.lib} {-l}tkenv{.lib} {-l}layout{.lib} $(TK_LIBS) $(ZLIB_LIBS)

# Simulation kernel
KERNEL_LIBS = {-l}sim_std{.lib}

{nmake:}!if "$(WITH_NETBUILDER)"=="yes"
{~nmake:}ifeq ($(WITH_NETBUILDER),yes)
KERNEL_LIBS {~nmake?+}= {nmake?$(KERNEL_LIBS)} {-l}nedxml{.lib} $(XML_LIBS)
{~nmake:}endif
{nmake:}!endif

KERNEL_LIBS {~nmake?+}= {nmake?$(KERNEL_LIBS)} {-l}common{.lib}

{nmake:}!if "$(WITH_PARSIM)"=="yes"
{~nmake:}ifeq ($(WITH_PARSIM),yes)
KERNEL_LIBS {~nmake?+}= {nmake?$(KERNEL_LIBS)} $(MPI_LIBS)
{~nmake:}endif
{nmake:}!endif

# Simulation kernel and user interface libraries
OMNETPP_LIB_SUBDIR = $(OMNETPP_LIB_DIR)/$(TOOLCHAIN_NAME)-$(MODE)
OMNETPP_LIBS = {-L}"$(OMNETPP_LIB_SUBDIR)" {-L}"$(OMNETPP_LIB_DIR)" $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

{nmake:}# When using simkernel in DLL form, declare symbols in simkernel headers as "dllimport"
{nmake:}!if "$(LIB_SUFFIX)"==".dll"
{nmake:}CFLAGS=$(CFLAGS) -DWIN32_DLL
{nmake:}!endif

COPTS = $(CFLAGS) {fordllopt} {defines} $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
MSGCOPTS = $(INCLUDE_PATH) {dllexportmacro}

#------------------------------------------------------------------------------
# User-supplied makefile fragment(s)
# >>>
{makefrags:}{makefrags}
# <<<
#------------------------------------------------------------------------------

# Main target
{exe:}$(TARGET): print-info $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) {subdirs?subdirs} {makefile}
{exe:}	$({nmake?LINK}{~nmake?CXX}) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) $(OMNETPP_LIBS) {link-o}$(TARGET)
{exe:}	@echo{nmake?.} >.tstamp
{so:}$(TARGET): print-info $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) {subdirs?subdirs} {makefile}
{so:}	$(SHLIB_LD) -o $(TARGET) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS)
{so:}	@echo{nmake?.} >.tstamp
{nolink:}$(TARGET): print-info $(OBJS) {subdirs?subdirs} {makefile} .tstamp
{nolink:}	@{nmake?rem}{~nmake?#} Do nothing
{nolink:}
{nolink:}.tstamp: $(OBJS)
{nolink:}	@echo{nmake?.} >.tstamp

print-info:
{~nmake:}	@if [ -d "$(OMNETPP_LIB_SUBDIR)" ]; then echo "*** Info: MODE=$(MODE), using libs from \"$(OMNETPP_LIB_SUBDIR)\""; fi
{~nmake:}	@if [ ! -d "$(OMNETPP_LIB_SUBDIR)" ]; then echo "*** WARNING: Selected libs not available: directory \"$(OMNETPP_LIB_SUBDIR)\" doesn't exist"; fi
{nmake:}	@if exist "$(OMNETPP_LIB_SUBDIR)" echo *** Info: MODE=$(MODE), using libs from "$(OMNETPP_LIB_SUBDIR)"
{nmake:}	@if not exist "$(OMNETPP_LIB_SUBDIR)" echo *** WARNING: Selected libs not available: directory "$(OMNETPP_LIB_SUBDIR)" doesn't exist

{subdirs:}subdirs: $(SUBDIR_TARGETS)
{subdirs:}
{subdirs:}$(SUBDIR_TARGETS):
{subdirs:}{~nmake:}	cd $@ && {makecommand}
{subdirs:}{nmake:}	cd $(@:{_dir}=) && echo [Entering $(@:{_dir}=)] && {makecommand} && echo [Leaving $(@:{_dir}=)]
{subdirs:}
{extdirtstamps:}$(EXT_DIR_TSTAMPS):
{extdirtstamps:}	@echo Error: $(@{nmake?:/=\}) does not exist.
{extdirtstamps:}	@echo This means that at least the above dependency directory has not been built.
{extdirtstamps:}	@echo Maybe you need to do a top-level make?
{extdirtstamps:}	@echo{nmake?.}
{extdirtstamps:}	@exit {nmake?/b }1
{extdirtstamps:}
{msgfiles:}{nmake:}$(MSG_CC_FILES) $(MSG_H_FILES) : $(MSGFILES)
{msgfiles:}{~nmake:}%_m.{cc} %_m.h: %.msg
{msgfiles:}	$(MSGC{nmake?:/=\}) -s _m.{cc} $(MSGCOPTS) $?
{msgfiles:}
.SUFFIXES: .{cc}

{nmake:}{lbrace}.{rbrace}.cc{lbrace}$O{rbrace}.{obj}:
{~nmake:}$O/%.{obj}: %.{cc}
{~nmake:}	@mkdir -p $O
{nmake:}	-@md $(O:/=\) 2>nul
	$(CXX) -c $(COPTS) {nmake?/Fo"$@"}{~nmake?-o $@} {nmake?-Tp} $<

{objs:}$(OBJS): $(MSG_H_FILES)
{objs:}
generateheaders: $(MSG_H_FILES)
{subdirs:}{nmake:}	@if not "$(SUBDIRS)"=="" for %%i in ( $(SUBDIRS) ) do @cd %%i && echo [opp_msgc in %%i] && nmake /nologo /f Makefile.vc generateheaders && cd .. || exit /b 1
{subdirs:}{~nmake:}	for i in $(SUBDIRS); do (cd \$\$i && \$(MAKE) generateheaders) || exit 1; done

clean:
{nmake:}	-cd /d $(O:/=\) && del $(VC_AUX_FILES) .tstamp *.obj $(TARGET) $(TARGET:.exe=.lib) $(TARGET:.dll=.lib) 2>NUL
{~nmake:}	-cd $O && rm -f .tstamp *.obj $(TARGET)
	-{nmake?del}{~nmake?rm -f} *_n.{cc} *_n.h *_m.{cc} *_m.h {nmake?2>nul}
	-{nmake?del}{~nmake?rm -f} *.vec *.sca {nmake?2>nul}
{subdirs:}{nmake:}	-if not "$(SUBDIRS)"=="" for %%i in ( $(SUBDIRS) ) do cd %%i && echo [clean in %%i] && nmake /nologo /f Makefile.vc clean && cd .. || exit /b 1
{subdirs:}{~nmake:}	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -f Makefile.vc -- *.{cc}
{nmake:}	if not "$(SUBDIRS)"=="" for %%i in ( $(SUBDIRS) ) do cd %%i && echo [depend in %%i] && nmake /nologo /f Makefile.vc depend && cd .. || exit /b 1
{~nmake:}	for i in $(SUBDIRS); do (cd $$i && $(MAKE) depend) || exit 1; done

makefiles:
	{progname} {args}
{nmake:}	if not "$(SUBDIRS)"=="" for %%i in ( $(SUBDIRS) ) do cd %%i && echo [makemake in %%i] && nmake /nologo /f Makefile.vc makefiles && cd .. || exit /b 1
{~nmake:}	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefiles) || exit 1; done

# DO NOT DELETE THIS LINE -- make depend depends on it.
{deps}
