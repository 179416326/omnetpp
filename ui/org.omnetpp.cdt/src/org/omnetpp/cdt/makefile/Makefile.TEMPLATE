#
# OMNeT++/OMNEST Makefile for {target}
#
# This file was generated with the command:
#  {progname} {args}
#


# Name of target to be created (-o option)
TARGET = {target}

# User interface (uncomment one) (-u option)
{~allenv?#}USERIF_LIBS = $(ALL_ENV_LIBS) # that is, $(TKENV_LIBS) $(CMDENV_LIBS)
{~cmdenv?#}USERIF_LIBS = $(CMDENV_LIBS)
{~tkenv?#}USERIF_LIBS = $(TKENV_LIBS)

# C++ include paths (with -I)
INCLUDE_PATH = {includepath}

# Additional object and library files to link with
EXTRA_OBJS = {extraobjs}

# Additional libraries (-L, -l options)
LIBS = {libpath}{@lib:libs} {-l}{lib}{.lib}{/@}

# Output directory
O = {outdir}/$(CONFIGNAME)/{subpath}

# Object files for local .{cc} and .msg files
OBJS = {objs}

# Message files
MSGFILES = {msgfiles}

# C++ files generated from msg files
MSG_CC_FILES = {msgccfiles}
MSG_H_FILES = {msghfiles}

{submakedirs:}# Subdirectories to recurse into
{submakedirs:}SUBMAKE_DIRS = {submakedirs}
{submakedirs:}
{defaultmode:}# Default mode (-M option); can be overridden with {nmake?n}make MODE=debug (or =release)
{defaultmode:}{nmake?!}ifndef MODE
{defaultmode:}MODE = {defaultmode}
{defaultmode:}{nmake?!}endif
{defaultmode:}
# Other makefile variables (-K)
{@d:makefiledefines}{d}
{/@}

#------------------------------------------------------------------------------

# Pull in OMNeT++ configuration (Makefile.inc or configuser.vc)
{nmake:}!if "$(OMNETPP_CONFIGFILE)"!=""
{nmake:}CONFIGFILE = $(OMNETPP_CONFIGFILE)
{nmake:}!elseif "$(OMNETPP_ROOT)"!=""
{nmake:}CONFIGFILE = $(OMNETPP_ROOT)/configuser.vc
{nmake:}!else
{nmake:}CONFIGFILE = {configfile}
{nmake:}!endif
{nmake:}
{nmake:}!if !exist($(CONFIGFILE))
{nmake:}!error '$(CONFIGFILE)' does not exist -- set the OMNETPP_CONFIGFILE variable to point to configuser.vc, or edit/regenerate this makefile.
{nmake:}!endif
{nmake:}
{nmake:}!include $(CONFIGFILE)

{~nmake:}ifneq ("$(OMNETPP_CONFIGFILE)","")
{~nmake:}CONFIGFILE = $(OMNETPP_CONFIGFILE)
{~nmake:}else
{~nmake:}ifneq ("$(OMNETPP_ROOT)","")
{~nmake:}CONFIGFILE = $(OMNETPP_ROOT)/Makefile.inc
{~nmake:}else
{~nmake:}CONFIGFILE = $(shell opp_configfilepath)
{~nmake:}endif
{~nmake:}endif
{~nmake:}
{~nmake:}ifeq ("$(wildcard $(CONFIGFILE))","")
{~nmake:}$(error Config file '$(CONFIGFILE)' does not exist -- add the OMNeT++ bin directory to the path so that opp_configfilepath can be found, or set the OMNETPP_CONFIGFILE variable to point to Makefile.inc)
{~nmake:}endif
{~nmake:}
{~nmake:}include $(CONFIGFILE)

{rem:}# Check that MODE is valid (not enabled, to allow implementing other MODEs)
{rem:}{nmake:}!if "$(MODE)"!="debug" && "$(MODE)"!="release"
{rem:}{nmake:}error MODE must be "debug" or "release"
{rem:}{nmake:}!endif
{rem:}{~nmake:}ifneq ($(MODE),"debug")
{rem:}{~nmake:}ifneq ($(MODE),"release")
{rem:}{~nmake:}$(error MODE must be "debug" or "release")
{rem:}{~nmake:}endif
{rem:}{~nmake:}endif

# Simulation kernel and user interface libraries
OMNETPP_LIB_SUBDIR = $(OMNETPP_LIB_DIR)/$(TOOLCHAIN_NAME)
{exe:}OMNETPP_LIBS = {-L}"$(OMNETPP_LIB_SUBDIR)" {-L}"$(OMNETPP_LIB_DIR)" $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)
{sharedlib:}OMNETPP_LIBS = {-L}"$(OMNETPP_LIB_SUBDIR)" {-L}"$(OMNETPP_LIB_DIR)" {-l}envir$D{.lib} $(KERNEL_LIBS) $(SYS_LIBS)

COPTS = $(CFLAGS) {defines} $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
MSGCOPTS = $(INCLUDE_PATH){dllsymbol? -P}{dllsymbol}{dllsymbol?_API}

#------------------------------------------------------------------------------
# User-supplied makefile fragment(s)
# >>>
{makefrags:}{makefrags}
# <<<
#------------------------------------------------------------------------------

# Main target
all: $O/$(TARGET)

{exe:}$O/$(TARGET): generateheaders $(OBJS) {submakedirs?submakedirs} $(EXTRA_OBJS) {makefile}
{exe:}{nmake:}	-@md $(O:/=\) 2>nul
{exe:}{~nmake:}	@mkdir -p $O
{exe:}	$({nmake?LINK}{~nmake?CXX}) $(LDFLAGS) {-out}$O/$(TARGET) {nmake_inlinefile} $(OBJS) $(EXTRA_OBJS) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS) {nmake_inlineend}
{exe:}{nmake:}	echo @^%~dp0\$(O:/=\)\$(TARGET) ^%* > $(TARGET:.exe=.cmd)
{exe:}{~nmake:}ifeq ("$(EXE_SUFFIX)",".exe")
{exe:}{~nmake:}	echo "@%~dp0\\\\$(subst /,\\\\,$O)\\\\$(TARGET) %*" > $(subst .exe,.cmd,$(TARGET))
{exe:}{~nmake:}else
{exe:}{~nmake:}	ln -s -f $O/$(TARGET) .
{exe:}{~nmake:}endif
{sharedlib:}$O/$(TARGET): generateheaders $(OBJS) {submakedirs?submakedirs} $(EXTRA_OBJS) {makefile}
{sharedlib:}{nmake:}	-@md $(O:/=\) 2>nul
{sharedlib:}{~nmake:}	@mkdir -p $O
{sharedlib:}	$(SHLIB_LD) {-out}$O/$(TARGET) {nmake_inlinefile} $(OBJS) $(EXTRA_OBJS) $(LIBS) {nmake?$(OMNETPP_LIBS)} {nmake_inlineend}
{staticlib:}$O/$(TARGET): generateheaders $(OBJS) {submakedirs?submakedirs} $(EXTRA_OBJS) {makefile}
{staticlib:}{nmake:}	-@md $(O:/=\) 2>nul
{staticlib:}{~nmake:}	@mkdir -p $O
{staticlib:}	$(AR) {nmake?/out:}$O/$(TARGET) {nmake_inlinefile} $(OBJS) $(EXTRA_OBJS) {nmake_inlineend}
{nolink:}$O/$(TARGET): generateheaders $(OBJS) {submakedirs?submakedirs} {makefile}
{nolink:}	@{nmake?rem}{~nmake?#} Do nothing

{submakedirs:}submakedirs:
{submakedirs:}{nmake:}	@if not "$(SUBMAKE_DIRS)"=="" for %%i in ( $(SUBMAKE_DIRS:/=\) ) do @pushd %%i && echo [Entering %%i] && nmake /nologo /f Makefile.vc && echo [Leaving %%i] && @popd || exit /b 1
{submakedirs:}{~nmake:}	for i in $(SUBMAKE_DIRS); do (cd $$i && $(MAKE)) || exit 1; done

.SUFFIXES: .{cc}

{~nmake:}$O/%.{obj}: %.{cc}
{~nmake:}	@mkdir -p $(dir $@)
{~nmake:}	$(CXX) -c $(COPTS) -o $@ $<
{nmake:}{lbrace}.{rbrace}.{cc}{lbrace}$O{rbrace}.{obj}:
{nmake:}	-@md $(O:/=\) 2>nul
{nmake:}	$(CXX) -c $(COPTS) /Fo"$@" -Tp $<
{@dir:sourcedirs,bsdir:backslashedsourcedirs}
{nmake:}{lbrace}{dir}{rbrace}.{cc}{lbrace}$O/{dir}{rbrace}.{obj}:
{nmake:}	-@md $(O:/=\)\{bsdir} 2>nul
{nmake:}	$(CXX) -c $(COPTS) /Fo"$@" -Tp $<
{/@}
{msgfiles:}{~nmake:}%_m.{cc} %_m.h: %.msg
{msgfiles:}{~nmake:}	$(MSGC) -s _m.{cc} $(MSGCOPTS) $?
{msgfiles:}{~nmake:}
generateheaders: $(MSGFILES)
	$(MSGC{nmake?:/=\}) -s _m.{cc} $(MSGCOPTS) $(MSGFILES)
{submakedirs:}{nmake:}	@if not "$(SUBMAKE_DIRS)"=="" for %%i in ( $(SUBMAKE_DIRS:/=\) ) do @pushd %%i && echo [opp_msgc in %%i] && nmake /nologo /f Makefile.vc generateheaders && @popd || exit /b 1
{submakedirs:}{~nmake:}	for i in $(SUBMAKE_DIRS) ""; do if [ "$$i" != "" ]; then (cd $$i && $(MAKE) generateheaders) || exit 1; fi; done;

clean:
{nmake:}	-rmdir /s /q $(O:/=\) 2>nul
{~nmake:}	-rm -rf $O
{@dir:sourcedirs}
{~nmake:}	-rm -f {dir}/*_m.{cc} {dir}/*_m.h {/@}
{@bsdir:backslashedsourcedirs}
{nmake:}	-del {bsdir}\*_m.{cc} {bsdir}\*_m.h 2>nul {/@}
{submakedirs:}{nmake:}	-if not "$(SUBMAKE_DIRS)"=="" for %%i in ( $(SUBMAKE_DIRS:/=\) ) do @pushd %%i && echo [clean in %%i] && nmake /nologo /f Makefile.vc clean && @popd || exit /b 1
{submakedirs:}{~nmake:}	for i in $(SUBMAKE_DIRS) ""; do if [ "$$i" != "" ]; then (cd $$i && $(MAKE) clean); fi; done;

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -f Makefile{nmake?.vc} -P{nmake?^}{~nmake?\$}$O/ -- *.{cc}{@d:sourcedirs} \
	    {d}/*.{cc}{/@}

{nmake:}	if not "$(SUBMAKE_DIRS)"=="" for %%i in ( $(SUBMAKE_DIRS:/=\) ) do @pushd %%i && echo [depend in %%i] && nmake /nologo /f Makefile.vc depend && @popd || exit /b 1
{~nmake:}	for i in $(SUBMAKE_DIRS) ""; do if [ "$$i" != "" ]; then (cd $$i && $(MAKE) depend) || exit 1; fi; done;

makefiles:
	{progname} {args}
{nmake:}	if not "$(SUBMAKE_DIRS)"=="" for %%i in ( $(SUBMAKE_DIRS:/=\) ) do @pushd %%i && echo [makemake in %%i] && nmake /nologo /f Makefile.vc makefiles && @popd || exit /b 1
{~nmake:}	for i in $(SUBMAKE_DIRS) ""; do if [ "$$i" != "" ]; then (cd $$i && $(MAKE) makefiles) || exit 1; fi; done;

# DO NOT DELETE THIS LINE -- make depend depends on it.
{deps}

