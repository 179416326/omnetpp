/*--------------------------------------------------------------*
  Copyright (C) 2006-2008 OpenSim Ltd.

  This file is distributed WITHOUT ANY WARRANTY. See the file
  'License' for details on this and other legal matters.
*--------------------------------------------------------------*/

package org.omnetpp.cdt.build;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.eclipse.cdt.core.settings.model.ICConfigurationDescription;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.omnetpp.cdt.CDTUtils;
import org.omnetpp.common.project.NedSourceFoldersConfiguration;
import org.omnetpp.common.project.ProjectUtils;
import org.omnetpp.common.util.StringUtils;

/**
 * Generate a Makefile for testing the C++ build of different project feature combinations.
 *
 * @author Andras
 */
public class ProjectFeatureTester {
    // add any of these labels to project features (labels="..") that only contain examples so that they are grouped separately in the generated Makefile
    public static final String EXAMPLES_LABELS = "example examples sample samples simulation simulations";

    private IProject project;
    private ProjectFeaturesManager features;
    private BuildSpecification buildSpec;
    private NedSourceFoldersConfiguration nedSourceFoldersConfig;
    private ICConfigurationDescription[] configurations;
    private ICConfigurationDescription activeConfiguration;


    public ProjectFeatureTester(IProject project, ProjectFeaturesManager features, BuildSpecification buildSpec,
            NedSourceFoldersConfiguration nedSourceFoldersConfig,
            ICConfigurationDescription[] configurations, ICConfigurationDescription activeConfiguration) {
        this.project = project;
        this.features = features;
        this.buildSpec = buildSpec;
        this.nedSourceFoldersConfig = nedSourceFoldersConfig;
        this.configurations = configurations;
        this.activeConfiguration = activeConfiguration;
    }

    public String makeMakefile(String filename, IProgressMonitor monitor) throws CoreException, InterruptedException {
        // note: modified version of exportMakemakefiles() in ProjectMakemakePropertyPage

        int numFeatures = features.getFeatures().size();
        monitor.beginTask("Generating test cases...", 4 + 2*numFeatures);

        // prelude
        String text =
            "#\n" +
            "# Generated by the OMNeT++ IDE.\n" +
            "#\n" +
            "# This is a makefile that compiles the project with all features being enabled,\n" +
            "# with all features being disabled, and with various other feature combinations.\n" +
            "# It is useful for developers of the project for finding compile errors caused\n" +
            "# by unwanted feature interdependencies.\n" +
            "#\n";

        if (CDTUtils.isMsvcConfiguration(activeConfiguration)) {
            text +=
                "# Usage: nmake -f " + filename + "\n#\n\n" + // note use of nmake
                "PRINT_BANNER = @echo // && echo // $@ && echo //\n" +
                "MAKEMAKE = opp_makemake\n" +  // note: no need for the -n (--nmake) option, as the translated MakemakeOptions will already contain it
                "RUNTEST = nmake -f Makefile.vc clean && nmake -f Makefile.vc\n" +  // note: nmake -f Makefile.vc
                "\n";
        }
        else {
            text +=
                "# Usage: make -f " + filename + "\n#\n\n" +
                "PRINT_BANNER = @echo // && echo // $@ && echo //\n" +
                "MAKEMAKE = opp_makemake\n" +
                "RUNTEST = $(MAKE) clean && $(MAKE)\n" +
                "\n";
        }

        // variables for referenced projects
        String extraMakemakeOptions = "";
        IProject[] referencedProjects = ProjectUtils.getAllReferencedProjects(project, false, false);
        boolean hasReferencedProjects = referencedProjects.length > 0;
        if (hasReferencedProjects) {
            for (IProject refProj : referencedProjects) {
                String variable = Makemake.makeSymbolicProjectName(refProj);
                IPath path = MakefileTools.makeRelativePath(refProj.getLocation(), project.getLocation());
                text += variable + " = " + path + "\n";
                extraMakemakeOptions += "-K" + variable + "=$(" + variable + ") ";
            }
            text += "PROJREFS = " + extraMakemakeOptions + "\n\n";
            extraMakemakeOptions = "$(PROJREFS)"; // use macro instead
        }
        bump(monitor);

        // save current state
        List<ProjectFeature> saveEnabledFeatures = features.getEnabledFeatures();

        try {
            //
            // tweak the project:
            // - all features disabled
            // - for each feature: only that feature is enabled (rest is disabled)
            // - all features enabled
            // - for each feature: only that feature is disabled (rest is enabled)
            //

            final String _ONLY = "_only";
            final String _DISABLED = "_disabled";
            final String ALL_DISABLED = "all_disabled";
            final String ALL_ENABLED = "all_enabled";

            // generate the test case targets
            String body = "";
            setAllEnabled(false);
            body += makeMakefileFragment(ALL_DISABLED, extraMakemakeOptions);
            bump(monitor);

            for (ProjectFeature f : features.getFeatures()) {
                features.setFeatureEnabledRec(configurations, nedSourceFoldersConfig, f, true);
                body += makeMakefileFragment(f.getId()+_ONLY, extraMakemakeOptions);
                setAllEnabled(false);
                bump(monitor);
            }

            setAllEnabled(true);
            body += makeMakefileFragment(ALL_ENABLED, extraMakemakeOptions);
            bump(monitor);

            for (ProjectFeature f : features.getFeatures()) {
                features.setFeatureEnabledRec(configurations, nedSourceFoldersConfig, f, false);
                body += makeMakefileFragment(f.getId()+_DISABLED, extraMakemakeOptions);
                setAllEnabled(true);
                bump(monitor);
            }

            // generate "all" target
            List<String> only = new ArrayList<String>();
            List<String> except = new ArrayList<String>();
            List<String> onlyEx = new ArrayList<String>();
            List<String> exceptEx = new ArrayList<String>();
            Collection<String> exampleLabels = Arrays.asList(EXAMPLES_LABELS.split(" "));
            for (ProjectFeature f : features.getFeatures()) {
                boolean isExample = CollectionUtils.containsAny(f.getLabels(), exampleLabels);
                if (!isExample) {
                    only.add(f.getId()+_ONLY);
                    except.add(f.getId()+_DISABLED);
                }
                else {
                    onlyEx.add(f.getId()+_ONLY);
                    exceptEx.add(f.getId()+_DISABLED);
                }
            }
            List<String> nonemptyTargetGroups = new ArrayList<String>();
            if (!only.isEmpty()) {
                nonemptyTargetGroups.add("$(ONLY_TARGETS)");
                text += "ONLY_TARGETS = " + StringUtils.join(only, " ") + "\n";
            }
            if (!onlyEx.isEmpty()) {
                nonemptyTargetGroups.add("$(ONLY_TARGETS_EX)");
                text += "ONLY_TARGETS_EX = " + StringUtils.join(onlyEx, " ") + "\n";
            }
            if (!except.isEmpty()) {
                nonemptyTargetGroups.add("$(EXCEPT_TARGETS)");
                text += "EXCEPT_TARGETS = " + StringUtils.join(except, " ") + "\n";
            }
            if (!exceptEx.isEmpty()) {
                nonemptyTargetGroups.add("$(EXCEPT_TARGETS_EX)");
                text += "EXCEPT_TARGETS_EX = " + StringUtils.join(exceptEx, " ") + "\n";
            }
            bump(monitor);

            // assemble the makefile
            text += "\n";
            text += "all: " + ALL_DISABLED + " " + ALL_ENABLED + " " + StringUtils.join(nonemptyTargetGroups, " ") + "\n\n";
            text += body;
            return text;

        }
        finally {
            // restore original state
            for (ProjectFeature f : features.getFeatures())
                features.setFeatureEnabled(configurations, nedSourceFoldersConfig, f, saveEnabledFeatures.contains(f));
        }
    }

    protected void setAllEnabled(boolean enable) throws CoreException {
        for (ProjectFeature f : features.getFeatures())
            features.setFeatureEnabled(configurations, nedSourceFoldersConfig, f, enable);
    }

    protected String makeMakefileFragment(String targetName, String extraNMakeOptions) throws CoreException {
        if (!extraNMakeOptions.equals(""))
            extraNMakeOptions = extraNMakeOptions.trim() + " ";
        String text = targetName + ":\n";
        for (IContainer folder : buildSpec.getMakemakeFolders()) {
            if (folder.exists()) {
                MakemakeOptions translatedOptions = MetaMakemake.translateOptions(folder, buildSpec, activeConfiguration);
                text += "\t$(PRINT_BANNER)\n";
                text += "\t";
                if (!folder.equals(project))
                    text += "cd " + folder.getProjectRelativePath().toString() + " && ";
                text += "$(MAKEMAKE) " + extraNMakeOptions + translatedOptions.toString() + "\n";
                text += "\t$(RUNTEST)\n";
                text += "\n";
            }
        }
        return text;
    }

    protected void bump(IProgressMonitor monitor) throws InterruptedException {
        monitor.worked(1);
        if (monitor.isCanceled())
            throw new InterruptedException();
    }
}
