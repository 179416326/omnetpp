- olyan toolt nem lehet felvenni ami source file-t general. (ld msg compiler)
  ha a tool megvaltoztatja az output directoryt (ImanagedOutpuFileNameProvider) 
  es a source filemelle teszi a kimenetet nem medig a target/config dirbe, 
  akkor a compiler utana mar iszont nem a target/config
  be teszi az object file-t hanem szinten a source melle...
- ha include ban pl: ${workspace_loc:/inetfw/Src/Nodes} van megadva es a konyvtar nem letezik akkor egy ures -I opciot general
  ami hibat okoz mert a compiler lenyeli a kovetkezo opciot. (ne genraljon ilyenkor -I-t)
? nem lehet egy meglevo toolhoz/project tipushoz hozzaadni mondjuk egy macroSupplier osztalyt
  az egyetlen megioldas ha a teljes toolchain-t lemasolom es ujrairom.
- ha uj project tiust veszek fel (ami orokol egy regibol), 
  akkor ha abban definialok egy uj config-t (az oroklottek melle) es a new project wizardban 
  ilyen konfigot valasztok, akkor jol jon letre a project az uj tipussal, ha azonben
  olyan configot valasztok amit orokolt, akkor a project tipus nema kivalasztott lesz
  hanem a base project type (meg akkor is, ha tenyleg az uj project tipus volt kivalasztva)
- pre and postbuild steps run *only* if cc files are not up to date. needs a checkbox
  to run the buildsteps even if the cc files up to date
- CWizardHandler.canFinich !!!


patform:
- the ${} parser should match the correct ending }. 
  constructs like ${var1:${var2}} are not working




=====================================================================
For cdt-dev: Documentation campaign, anyone?

Javadoc comments in CDT sources are sporadic at best.
This is in sharp contrast with the platform and other Eclipse projects,
which are thoroughly commented. I have personally spent a lot of time
figuring out things that should have been in the Javadoc in the first place.

Is there some documentation writing campaign planned? I, for one, would be 
happy to take part.

--

Many (most?) CDT sources (not only *.internal.* ones) lack proper Javadoc class and
method comments. I am currently looking at ManagedBuildManager which has about a zillion 
static methods, about half of which are completely undocumented. This makes it VERY hard 
to figure out things. A random sample of other classes that almost completely lack 
documentation: CfgInfoContext, IBuildProperties, IBuildProperty, IBuildPropertyManager, 
IBuildObject, ..., but I guess I could look anywhere. Other example: in Core, 
org.eclipse.cdt.core.parser.* -- almost everything there written by jcamelon, 
practically not documented.

=====================================================================

For cdt-dev: 

Why is it not supported to contribute tools, macro resolvers etc to EXISTING toolchains?
In the Eclipse platform, I don't have to subclass from Perspective, View etc
definitions in plugin.xml to be able to contribute things (actions etc) to them!

reported as: https://bugs.eclipse.org/bugs/show_bug.cgi?id=212127
also "[cdt-dev] Proposal on toolchain extensibility" on Dec 10 2007






