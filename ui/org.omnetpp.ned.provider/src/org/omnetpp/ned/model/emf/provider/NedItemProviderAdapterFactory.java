/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.omnetpp.ned.model.emf.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.omnetpp.ned.model.emf.util.NedAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NedItemProviderAdapterFactory extends NedAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection supportedTypes = new ArrayList();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public NedItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);		
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Channel} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ChannelItemProvider channelItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Channel}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createChannelAdapter() {
        if (channelItemProvider == null) {
            channelItemProvider = new ChannelItemProvider(this);
        }

        return channelItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.ChannelAttr} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ChannelAttrItemProvider channelAttrItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.ChannelAttr}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createChannelAttrAdapter() {
        if (channelAttrItemProvider == null) {
            channelAttrItemProvider = new ChannelAttrItemProvider(this);
        }

        return channelAttrItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.CompoundModule} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CompoundModuleItemProvider compoundModuleItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.CompoundModule}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createCompoundModuleAdapter() {
        if (compoundModuleItemProvider == null) {
            compoundModuleItemProvider = new CompoundModuleItemProvider(this);
        }

        return compoundModuleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.ConnAttr} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnAttrItemProvider connAttrItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.ConnAttr}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createConnAttrAdapter() {
        if (connAttrItemProvider == null) {
            connAttrItemProvider = new ConnAttrItemProvider(this);
        }

        return connAttrItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Connection} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectionItemProvider connectionItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Connection}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createConnectionAdapter() {
        if (connectionItemProvider == null) {
            connectionItemProvider = new ConnectionItemProvider(this);
        }

        return connectionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Connections} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectionsItemProvider connectionsItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Connections}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createConnectionsAdapter() {
        if (connectionsItemProvider == null) {
            connectionsItemProvider = new ConnectionsItemProvider(this);
        }

        return connectionsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.DisplayString} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DisplayStringItemProvider displayStringItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.DisplayString}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createDisplayStringAdapter() {
        if (displayStringItemProvider == null) {
            displayStringItemProvider = new DisplayStringItemProvider(this);
        }

        return displayStringItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.ForLoop} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ForLoopItemProvider forLoopItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.ForLoop}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createForLoopAdapter() {
        if (forLoopItemProvider == null) {
            forLoopItemProvider = new ForLoopItemProvider(this);
        }

        return forLoopItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Gate} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GateItemProvider gateItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Gate}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createGateAdapter() {
        if (gateItemProvider == null) {
            gateItemProvider = new GateItemProvider(this);
        }

        return gateItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Gates} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GatesItemProvider gatesItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Gates}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createGatesAdapter() {
        if (gatesItemProvider == null) {
            gatesItemProvider = new GatesItemProvider(this);
        }

        return gatesItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Gatesize} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GatesizeItemProvider gatesizeItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Gatesize}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createGatesizeAdapter() {
        if (gatesizeItemProvider == null) {
            gatesizeItemProvider = new GatesizeItemProvider(this);
        }

        return gatesizeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Gatesizes} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GatesizesItemProvider gatesizesItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Gatesizes}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createGatesizesAdapter() {
        if (gatesizesItemProvider == null) {
            gatesizesItemProvider = new GatesizesItemProvider(this);
        }

        return gatesizesItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Import} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ImportItemProvider importItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Import}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createImportAdapter() {
        if (importItemProvider == null) {
            importItemProvider = new ImportItemProvider(this);
        }

        return importItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.NedFile} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NedFileItemProvider nedFileItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.NedFile}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createNedFileAdapter() {
        if (nedFileItemProvider == null) {
            nedFileItemProvider = new NedFileItemProvider(this);
        }

        return nedFileItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Network} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NetworkItemProvider networkItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Network}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createNetworkAdapter() {
        if (networkItemProvider == null) {
            networkItemProvider = new NetworkItemProvider(this);
        }

        return networkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Param} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParamItemProvider paramItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Param}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createParamAdapter() {
        if (paramItemProvider == null) {
            paramItemProvider = new ParamItemProvider(this);
        }

        return paramItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Params} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParamsItemProvider paramsItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Params}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createParamsAdapter() {
        if (paramsItemProvider == null) {
            paramsItemProvider = new ParamsItemProvider(this);
        }

        return paramsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.SimpleModule} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimpleModuleItemProvider simpleModuleItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.SimpleModule}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createSimpleModuleAdapter() {
        if (simpleModuleItemProvider == null) {
            simpleModuleItemProvider = new SimpleModuleItemProvider(this);
        }

        return simpleModuleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Submodule} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SubmoduleItemProvider submoduleItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Submodule}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createSubmoduleAdapter() {
        if (submoduleItemProvider == null) {
            submoduleItemProvider = new SubmoduleItemProvider(this);
        }

        return submoduleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Submodules} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SubmodulesItemProvider submodulesItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Submodules}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createSubmodulesAdapter() {
        if (submodulesItemProvider == null) {
            submodulesItemProvider = new SubmodulesItemProvider(this);
        }

        return submodulesItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Substparam} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SubstparamItemProvider substparamItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Substparam}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createSubstparamAdapter() {
        if (substparamItemProvider == null) {
            substparamItemProvider = new SubstparamItemProvider(this);
        }

        return substparamItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.omnetpp.ned.model.emf.Substparams} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SubstparamsItemProvider substparamsItemProvider;

    /**
     * This creates an adapter for a {@link org.omnetpp.ned.model.emf.Substparams}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter createSubstparamsAdapter() {
        if (substparamsItemProvider == null) {
            substparamsItemProvider = new SubstparamsItemProvider(this);
        }

        return substparamsItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (channelItemProvider != null) channelItemProvider.dispose();
        if (channelAttrItemProvider != null) channelAttrItemProvider.dispose();
        if (compoundModuleItemProvider != null) compoundModuleItemProvider.dispose();
        if (connAttrItemProvider != null) connAttrItemProvider.dispose();
        if (connectionItemProvider != null) connectionItemProvider.dispose();
        if (connectionsItemProvider != null) connectionsItemProvider.dispose();
        if (displayStringItemProvider != null) displayStringItemProvider.dispose();
        if (forLoopItemProvider != null) forLoopItemProvider.dispose();
        if (gateItemProvider != null) gateItemProvider.dispose();
        if (gatesItemProvider != null) gatesItemProvider.dispose();
        if (gatesizeItemProvider != null) gatesizeItemProvider.dispose();
        if (gatesizesItemProvider != null) gatesizesItemProvider.dispose();
        if (importItemProvider != null) importItemProvider.dispose();
        if (nedFileItemProvider != null) nedFileItemProvider.dispose();
        if (networkItemProvider != null) networkItemProvider.dispose();
        if (paramItemProvider != null) paramItemProvider.dispose();
        if (paramsItemProvider != null) paramsItemProvider.dispose();
        if (simpleModuleItemProvider != null) simpleModuleItemProvider.dispose();
        if (submoduleItemProvider != null) submoduleItemProvider.dispose();
        if (submodulesItemProvider != null) submodulesItemProvider.dispose();
        if (substparamItemProvider != null) substparamItemProvider.dispose();
        if (substparamsItemProvider != null) substparamsItemProvider.dispose();
    }

}
