<!-- BUILDID, BUILD_DIRECTORY and ECLIPSE_HOME must be specified as environment variables -->
<project default="omnetpp">
	<property environment="env" />
	<property name="forceContextQualifier" value="${env.BUILDID}"/>
	<property name="baseLocation" value="${env.ECLIPSE_HOME}"/>
	<property name="buildDirectory" value="${env.BUILD_DIRECTORY}"/>
	<property file="build.properties" />

        <!-- This taget can be used to download the CDT repository which contains binaries for all platforms.
             Required to build IDE for multiple platforms. Can be called maually only. Not called during the
             build process. -->
	<target name="sync-target-cdt">
                <echo>Starting download of CDT repo into ${baseLocation}/target/cdt</echo>
		<p2.mirror>
			<repository location="${baseLocation}/target/cdt" name="Local CDT repo" append="false" />
			<source>
				<repository location="http://download.eclipse.org/eclipse/updates/3.8" />
				<repository location="http://download.eclipse.org/releases/juno" />
			</source>
			<iu id="org.eclipse.cdt.feature.group"/>
			<slicingoptions followStrict="true" />
		</p2.mirror>
	</target>

        <!-- This taget can be used to download the linuxtools repository which contains binaries for all platforms.
             Required to build IDE for multiple platforms. Can be called maually only. Not called during the
             build process. -->
	<target name="sync-target-linuxtools">
                <echo>Starting download of LinuxTools repo into ${baseLocation}/target/linuxtools</echo>
		<p2.mirror>
			<repository location="${baseLocation}/target/linuxtools" name="Local LinuxTools repo" append="false" />
			<source>
				<repository location="http://download.eclipse.org/linuxtools/update" />
			</source>
			<!-- <iu id="org.eclipse.linuxtools.feature.group"/> -->
			<slicingoptions followStrict="true" />
		</p2.mirror>
	</target>
	<target name="clean">
		<delete dir="${buildDirectory}" />
	</target>

	<target name="init">
		<mkdir dir="${buildDirectory}" />
		<mkdir dir="${srcDirectory}" />
		<mkdir dir="${srcDirectory}/plugins" />
		<mkdir dir="${srcDirectory}/features" />
		<copy todir="${srcDirectory}/plugins">
			<fileset dir="../">
				<include name="org.omnetpp.*/**" />
				<include name="org.swtworkbench.*/**" />
				<include name="org.visigoths.*/**" />
				<exclude name="*/bin/**" />
				<exclude name="org.omnetpp.ide/**" />
				<exclude name="org.omnetpp.ide.academic/**" />
				<exclude name="org.omnetpp.ide.commercial/**" />
				<exclude name="org.omnetpp.ide.scave/**" />
				<exclude name="org.omnetpp.samples/**" />
				<exclude name="org.omnetpp.runtime/**" />
				<exclude name="org.omnetpp.animation/**" />
				<exclude name="org.omnetpp.scave.old/**" />
				<exclude name="org.omnetpp.scave.autoimport/**" />
				<exclude name="org.omnetpp.test.*/**" />
				<exclude name="org.omnetpp.experimental.*/**" />
			</fileset>
		</copy>
		<copy todir="${srcDirectory}/features">
			<fileset dir="../">
				<include name="org.omnetpp.ide/**" />
				<include name="org.omnetpp.ide.commercial/**" />
				<include name="org.omnetpp.ide.academic/**" />
			</fileset>
		</copy>
	</target>

	<!-- prepare for a commercial build / replace OMNeT++ strings to OMNEST etc. -->
	<target name="init-omnest" depends="init">
		<replace dir="${srcDirectory}" token="OMNeT++" value="OMNEST">
			<include name="**/*.java" />
			<include name="**/*.htm" />
			<include name="**/*.html" />
			<include name="**/*.xml" />
			<include name="**/MANIFEST.MF" />
			<include name="**/*.properties" />
			<include name="**/*.product" />
		</replace>
		<replace dir="${srcDirectory}" token="Academic Edition, not for commercial use" value="Commercial Edition">
			<include name="**/*.xml" />
		</replace>
		<replace dir="${srcDirectory}" token="IS_COMMERCIAL = false;" value="IS_COMMERCIAL = true;">
			<include name="**/*.java" />
		</replace>
		<copy file="${srcDirectory}/plugins/org.omnetpp.product/omnest-ide.product" tofile="${srcDirectory}/plugins/org.omnetpp.product/ide.product" />
		<move file="${srcDirectory}/plugins/org.omnetpp.main/icons/intro-omnest.png" tofile="${srcDirectory}/plugins/org.omnetpp.main/icons/intro-image.png" />
		<property name="main_feature_group" value="org.omnetpp.ide.commercial.feature.group"/>
	</target>

	<!-- prepare for academic build / throw out commercial features etc. -->
	<target name="init-omnetpp" depends="init">
		<replace dir="${srcDirectory}" token="IS_COMMERCIAL = true;" value="IS_COMMERCIAL = false;">
			<include name="**/*.java" />
		</replace>
		<copy file="${srcDirectory}/plugins/org.omnetpp.product/omnetpp-ide.product" tofile="${srcDirectory}/plugins/org.omnetpp.product/ide.product" />
		<move file="${srcDirectory}/plugins/org.omnetpp.main/icons/intro-omnetpp.png" tofile="${srcDirectory}/plugins/org.omnetpp.main/icons/intro-image.png" />
		<property name="main_feature_group" value="org.omnetpp.ide.academic.feature.group"/>
	</target>

	<target name="pde-build">
		<replace dir="${srcDirectory}" token="##BUILDID##" value="${env.BUILDID}">
			<include name="**/*.java" />
			<include name="**/*.htm" />
			<include name="**/*.html" />
			<include name="**/*.xml" />
			<include name="**/MANIFEST.MF" />
			<include name="**/*.properties" />
			<include name="**/*.product" />
		</replace>
		<replace dir="${srcDirectory}" token="##VERSION##" value="${env.VERSION}">
			<include name="**/*.java" />
			<include name="**/*.htm" />
			<include name="**/*.html" />
			<include name="**/*.xml" />
			<include name="**/MANIFEST.MF" />
			<include name="**/*.properties" />
			<include name="**/*.product" />
		</replace>

		<!-- Check that we have a deltapack -->
		<available property="haveDeltaPack" file="${deltapack}" />
		<fail unless="haveDeltaPack" message="The deltapack is required to build this product.  Please edit buildProduct.xml or set the &quot;deltapack&quot; property." />
		<available property="haveCdt" file="${cdt}" />
		<fail unless="haveCdt" message="CDT mirror repo is required in the ${eclipse_home}/target directory. Use the 'sync-target-cdt' target to download from eclipse.org" />
		<available property="haveImageexport" file="${imageexport}" />
		<fail unless="haveImageexport" message="Image export feature required in the ${eclipse_home}/target directory." />

		<ant antfile="${eclipse.pdebuild.scripts}/productBuild/productBuild.xml" />
	</target>

	<!-- Extract / rearange the output for a single configuration
		config: platform.windowingsystem.architecture (triplet as specified in "configs" property),
		platdir: the directory name for the specific platform launcher and p2 profile dir -->
	<target name="package-config">
          <unzip src="${buildDirectory}/${buildLabel}/${archivePrefix}-${config}.zip"
                 dest="${buildDirectory}/${buildLabel}">
            <patternset excludes="${archivePrefix}/plugins/** ${archivePrefix}/features/**"/>
            <globmapper from="${archivePrefix}/*" to="${archivePrefix}/${platdir}/*"/>
          </unzip>
          <unzip src="${buildDirectory}/${buildLabel}/${archivePrefix}-${config}.zip"
                 dest="${buildDirectory}/${buildLabel}">
            <patternset includes="${archivePrefix}/plugins/** ${archivePrefix}/features/**"/>
          </unzip>
	</target>

	<!-- create the final IDE layout by extracting the launcher and p2 profile into
             separate platform specifc directory for ALL configurations -->
	<target name="package">
          <ant target="package-config">
            <property name="config" value="win32.win32.x86"/>
            <property name="platdir" value="win32"/>
          </ant>
          <ant target="package-config">
            <property name="config" value="linux.gtk.x86"/>
            <property name="platdir" value="linux"/>
          </ant>
          <ant target="package-config">
            <property name="config" value="linux.gtk.x86_64"/>
            <property name="platdir" value="linux64"/>
          </ant>
          <ant target="package-config">
            <property name="config" value="macosx.cocoa.x86"/>
            <property name="platdir" value="macosx"/>
          </ant>
	</target>

<!-- clean, init-omnetpp, pde-build -->
    <target name="create-repo">
        <p2.mirror source="file:${buildDirectory}/buildRepo" destination="${updateRepo}" description="OMNeT++ updates">
          <iu id="${main_feature_group}" />
          <iu id="org.omnetpp.ide.source.feature.group" />
          <slicingOptions includeFeatures="true" followStrict="true"/>
        </p2.mirror>
    </target>

	<target name="omnetpp" depends="clean, init-omnetpp, pde-build, package, create-repo">
		<chmod file="${buildDirectory}/${buildLabel}/${archivePrefix}/linux/omnetpp" perm="755" />
		<chmod file="${buildDirectory}/${buildLabel}/${archivePrefix}/linux64/omnetpp" perm="755" />
		<chmod file="${buildDirectory}/${buildLabel}/${archivePrefix}/macosx/omnetpp.app/Contents/MacOS/omnetpp" perm="755" />
	</target>

	<target name="omnest" depends="clean, init-omnest, pde-build, package, create-repo">
		<chmod file="${buildDirectory}/${buildLabel}/${archivePrefix}/linux/omnest" perm="755" />
		<chmod file="${buildDirectory}/${buildLabel}/${archivePrefix}/linux64/omnest" perm="755" />
		<chmod file="${buildDirectory}/${buildLabel}/${archivePrefix}/macosx/omnest.app/Contents/MacOS/omnest" perm="755" />
	</target>
</project>
