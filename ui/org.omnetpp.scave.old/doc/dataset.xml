<?xml version="1.0" encoding="UTF-8"?>
<dataset>
  <files>
    <file filename="X:/Eclipse-3.1/runtime-workspace/aa/demo.sca" type="scalar">
      <run id="1" name="1 (at line 4)"/>
      <run id="2" name="2 (at line 14)"/>
      <run id="3" name="3 (at line 24)"/>
      <run id="4" name="4 (at line 34)"/>
    </file>
  </files>

  <dataset>
    <!--
    optimize-subset(idlist, mode={include|exclude}):
      s0 := basic_estimate(idlist);
      write: "<$mode basic-estimate-params>"
          optimize-subset(s0 minus idlist, include)   /*add missing*/
          optimize-subset(idlist minus s0, exclude)   /*remove extra*/
      write: "</$mode>"

    // NOTE: optimize-subset must converge to the solution, i.e.
    // both recursive calls MUST operate on SMALLER (and not eq) subsets
    // What follows for basic_estimate for this?

    basic_estimate(idlist):
      // note: this OVERestimates -- can be done better
      1. let um = getUniqueModuleNames(s0), am = getAllModuleNames(file)
      2. if (#um =~ #am)  {
               include mod="*" and exclude (am minus um)
         } else {
               include am
         }
      3. let un = getUniqueNames(idList), an = getAllNames(file)
      4. as step 2, only with un and an.
      5. return
    -->

    <include mod="*" name="processed frames|name2|name3">
	    <include ...>
	    </include>
	    <exclude>
	      <set ...>
	    </exclude>
    </set>


    <include mod="mod1|mod2|mod3|mod4" name="processed frames|name2|name3"/>

  </dataset>




</dataset>
