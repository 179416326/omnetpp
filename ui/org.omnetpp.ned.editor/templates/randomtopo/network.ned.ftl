<@setoutput path=targetMainFile?default("")/>
${bannerComment}

// Created: ${date} for project ${rawProjectName}

<#if nedPackageName!="">package ${nedPackageName};</#if>
<#if gateName==""><#assign gateName = "g"></#if>
<#assign gateName = StringUtils.makeValidIdentifier(gateName)>

<#if !NedUtils.isVisibleType(nodeType,targetFolder)>
<#assign nodeType = StringUtils.makeValidIdentifier(nodeType)>
module ${nodeType} {
    parameters:
        @display("i=abstract/router_vs");
    gates:
        inout ${gateName}[];
}
</#if>

<#if !NedUtils.isVisibleType(channelType,targetFolder)>
<#assign channelType = StringUtils.makeValidIdentifier(channelType)>
channel ${channelType} extends ned.DatarateChannel {
    parameters:
        int cost = default(0);
}
</#if>

<#assign numNodes = numNodes?number>
<#assign numLinks = numLinks?number>
<#assign seed = seed?number>
<#assign param1 = param1Times100?number / 100.0>
<#assign param2 = param2Times100?number / 100.0>

<#assign topo = LangUtils.newInstance("org.example.Topogen")>
<@do topo.setNodes(numNodes) !/>
<@do topo.setEdges(numLinks) !/>
<@do topo.setSeed(seed) !/>
<@do topo.setParam1(param1) !/>
<@do topo.setParam2(param2) !/>
<#assign neighborLists = topo.generate()>

//
// Graph generated by Topogen (${numNodes} nodes, ${numLinks} edges, seed=${seed}).
//
network ${targetTypeName} {
    submodules:
<#list 0..neighborLists.size()-1 as i>
        node${i} : ${nodeType};
</#list>
    connections:
<#list 0..neighborLists.size()-1 as i>
  <#assign neighborList = neighborLists[i] >
  <#list neighborList as neighbor>
     <#if (i < neighbor)>
        node${i}.${gateName}++ <--> ${channelType} <--> node${neighbor}.${gateName}++;
     </#if>
  </#list>
</#list>
}
