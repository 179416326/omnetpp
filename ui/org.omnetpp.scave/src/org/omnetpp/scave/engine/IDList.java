/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.omnetpp.scave.engine;

public class IDList {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected IDList(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IDList obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      ScaveEngineJNI.delete_IDList(swigCPtr);
    }
    swigCPtr = 0;
  }

    public Long[] toArray() {
        int sz = (int) size();
        Long[] array = new Long[sz];
        for (int i=0; i<sz; i++)
            array[i] = Long.valueOf(get(i));
        return array;
    }
    public static IDList fromArray(Long[] array) {
        IDList list = new IDList();
        for (int i=0; i<array.length; i++)
            list.add(array[i].longValue());
        return list;
    }

  public IDList() {
    this(ScaveEngineJNI.new_IDList__SWIG_0(), true);
  }

  public IDList(long sz) {
    this(ScaveEngineJNI.new_IDList__SWIG_1(sz), true);
  }

  public IDList(IDList ids) {
    this(ScaveEngineJNI.new_IDList__SWIG_2(IDList.getCPtr(ids)), true);
  }

  public long size() {
    return ScaveEngineJNI.IDList_size(swigCPtr);
  }

  public boolean isEmpty() {
    return ScaveEngineJNI.IDList_isEmpty(swigCPtr);
  }

  public void clear() {
    ScaveEngineJNI.IDList_clear(swigCPtr);
  }

  public void set(IDList ids) {
    ScaveEngineJNI.IDList_set__SWIG_0(swigCPtr, IDList.getCPtr(ids));
  }

  public void add(long x) {
    ScaveEngineJNI.IDList_add(swigCPtr, x);
  }

  public long get(int i) {
    return ScaveEngineJNI.IDList_get(swigCPtr, i);
  }

  public void set(int i, long x) {
    ScaveEngineJNI.IDList_set__SWIG_1(swigCPtr, i, x);
  }

  public void erase(int i) {
    ScaveEngineJNI.IDList_erase(swigCPtr, i);
  }

  public void substract(long x) {
    ScaveEngineJNI.IDList_substract__SWIG_0(swigCPtr, x);
  }

  public void merge(IDList ids) {
    ScaveEngineJNI.IDList_merge(swigCPtr, IDList.getCPtr(ids));
  }

  public void substract(IDList ids) {
    ScaveEngineJNI.IDList_substract__SWIG_1(swigCPtr, IDList.getCPtr(ids));
  }

  public void intersect(IDList ids) {
    ScaveEngineJNI.IDList_intersect(swigCPtr, IDList.getCPtr(ids));
  }

  public IDList getSubsetByIndices(int[] array) {
    return new IDList(ScaveEngineJNI.IDList_getSubsetByIndices(swigCPtr, array), true);
  }

  public IDList dup() {
    return new IDList(ScaveEngineJNI.IDList_dup(swigCPtr), true);
  }

  public void sortByFileAndRunRef(ResultFileManager mgr) {
    ScaveEngineJNI.IDList_sortByFileAndRunRef(swigCPtr, ResultFileManager.getCPtr(mgr));
  }

  public int itemTypes() {
    return ScaveEngineJNI.IDList_itemTypes(swigCPtr);
  }

  public boolean areAllScalars() {
    return ScaveEngineJNI.IDList_areAllScalars(swigCPtr);
  }

  public boolean areAllVectors() {
    return ScaveEngineJNI.IDList_areAllVectors(swigCPtr);
  }

  public void sortByDirectory(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortByDirectory(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortByFileName(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortByFileName(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortByRun(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortByRun(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortByModule(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortByModule(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortByName(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortByName(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortScalarsByValue(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortScalarsByValue(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortVectorsByLength(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortVectorsByLength(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortVectorsByMean(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortVectorsByMean(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void sortVectorsByStdDev(ResultFileManager mgr, boolean ascending) {
    ScaveEngineJNI.IDList_sortVectorsByStdDev(swigCPtr, ResultFileManager.getCPtr(mgr), ascending);
  }

  public void reverse() {
    ScaveEngineJNI.IDList_reverse(swigCPtr);
  }

  public void toByteArray(byte[] array) {
    ScaveEngineJNI.IDList_toByteArray(swigCPtr, array);
  }

  public void fromByteArray(byte[] array) {
    ScaveEngineJNI.IDList_fromByteArray(swigCPtr, array);
  }

}
