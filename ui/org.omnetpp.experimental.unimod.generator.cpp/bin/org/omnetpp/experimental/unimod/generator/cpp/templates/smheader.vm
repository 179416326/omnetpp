#set($smTool = $modelTool.getSMTool($sm))
/******************************************
 State machine class: $sm.Name          
 ******************************************/
class ${smTool.ClassName}: ${modelTool.BaseMachineClassName}
	{
	public:
		/* Constructor of state machine $sm.Name */
		${smTool.ClassName}($modelTool.ClassName& aModel): ${modelTool.BaseMachineClassName}(aModel), iState($smTool.getStateTool($sm.Top).Const) {}
		
        void HandleL($modelTool.ClassName::EEvent aEvent, $contextClass& aContext);
		
#listHeader($smTool.COAssocs "Controlled objects setters" 8)
#foreach($assoc in $smTool.COAssocs)
		void ${smTool.getSetterName($assoc)}($assoc.target.ImplName* ${smTool.getParamName($assoc)}) {${smTool.getInstanceName($assoc)} = ${smTool.getParamName($assoc)};}
#end

#listHeader($smTool.SMAssocs "Referenced state machines setters" 8)
#foreach($assoc in $smTool.SMAssocs)
		void ${smTool.getSetterName($assoc)}($modelTool.getSMTool($assoc.target).ClassName* ${smTool.getParamName($assoc)}) {${smTool.getInstanceName($assoc)} = ${smTool.getParamName($assoc)};}
#end

	private:
		enum EState 
            {
#foreach ($state in $smTool.States)
            $smTool.getStateTool($state).Const,
#end
            UNKNOWN_STATE
            };

        EState iState;

#listHeader($smTool.COAssocs "Controlled objects" 8)
#foreach ($assoc in $smTool.COAssocs)
		$assoc.target.ImplName* ${smTool.getInstanceName($assoc)};
#end

#listHeader($smTool.SMAssocs "Referenced state machines" 8)
#foreach ($assoc in $smTool.SMAssocs)
		$modelTool.getSMTool($assoc.target).ClassName* ${smTool.getInstanceName($assoc)};
#end

		TBool IsStable(EState aState) const;
		EState GetSuperstate(EState aState) const;
		const TDesC& StateName(EState aState) const; 
		const TDesC& MachineName() const;
		EState TransiteOnEventL($modelTool.ClassName::EEvent aEvent, $contextClass& aContext);
		EState TransiteToStableL(EState aState, $contextClass& aContext);
		void EnterStateL(EState aState, $contextClass& aContext);
		void InvokeSubmachinesL($modelTool.ClassName::EEvent aEvent, $contextClass& aContext);
	};
