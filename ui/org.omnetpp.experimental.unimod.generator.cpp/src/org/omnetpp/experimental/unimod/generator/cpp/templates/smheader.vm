#set($smTool = $modelTool.getSMTool($sm))
/**
 * State machine $sm.Name
 */
class ${smTool.ClassName}: ${modelTool.BaseMachineClassName}
{
    public:
        /* Constructor of state machine $sm.Name */
        ${smTool.ClassName}($modelTool.ClassName& aModel): ${modelTool.BaseMachineClassName}(aModel), iState($smTool.getStateTool($sm.Top).Const) {}

        void handle($modelTool.ClassName::EEvent aEvent, $contextClass& aContext);

#listHeader($smTool.COAssocs "Controlled objects setters" 8)
#foreach($assoc in $smTool.COAssocs)
        void ${smTool.getSetterName($assoc)}($assoc.target.ImplName* ${smTool.getParamName($assoc)}) {${smTool.getInstanceName($assoc)} = ${smTool.getParamName($assoc)};}
#end

#listHeader($smTool.SMAssocs "Referenced state machines setters" 8)
#foreach($assoc in $smTool.SMAssocs)
        void ${smTool.getSetterName($assoc)}($modelTool.getSMTool($assoc.target).ClassName* ${smTool.getParamName($assoc)}) {${smTool.getInstanceName($assoc)} = ${smTool.getParamName($assoc)};}
#end

    private:
        enum EState
        {
#foreach ($state in $smTool.States)
            $smTool.getStateTool($state).Const,
#end
            UNKNOWN_STATE
        };

        EState iState;

#listHeader($smTool.COAssocs "Controlled objects" 8)
#foreach ($assoc in $smTool.COAssocs)
        $assoc.target.ImplName* ${smTool.getInstanceName($assoc)};
#end

#listHeader($smTool.SMAssocs "Referenced state machines" 8)
#foreach ($assoc in $smTool.SMAssocs)
        $modelTool.getSMTool($assoc.target).ClassName* ${smTool.getInstanceName($assoc)};
#end

        /**
         * Checks whether given state of automaton ${sm.Name} is stable.
         */
        boolean isStable(EState aState) const;

        /**
         * Returns the superstate of the given state of automaton ${sm.Name}
         */
        EState getSuperstate(EState aState) const;

        /**
         * Returns the name of the given state of automaton ${sm.Name}
         */
        const char *stateName(EState aState) const;

        /**
         * Returns name of the state machine
         */
        const char *machineName() const;

        EState transitOnEvent($modelTool.ClassName::EEvent aEvent, $contextClass& aContext);
        EState transitToStable(EState aState, $contextClass& aContext);

        /**
         * Executes on enter actions of the given state of automaton ${sm.Name}
         */
        void enterState(EState aState, $contextClass& aContext);

        void invokeSubmachines($modelTool.ClassName::EEvent aEvent, $contextClass& aContext);
};
