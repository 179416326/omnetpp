#set($smTool = $modelTool.getSMTool($sm))

///////////////////////////////////////////////////////////////////////////
// Automaton $sm.Name section
///////////////////////////////////////////////////////////////////////////
#macro(executeActions $actions $offset)
#foreach($action in $actions)
${modelTool.offset($offset)}$modelTool.getAction($action);
#end
#end
#macro(transite $transition $targetVar $offset)
#executeActions($transition.OutputActions $offset)
${modelTool.offset($offset)}$targetVar = $smTool.getStateTool($transition.TargetState).Const;
${modelTool.offset($offset)}LogTransiteL(StateName($sourceVar), StateName($targetVar));
${modelTool.offset($offset)}EnterStateL($targetVar, aContext);
#end

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/enter-state.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/is-stable.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/state-name.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/machine-name.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/get-superstate.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/transite-to-stable.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/transite-on-event.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/invoke-submachines.vm")

void $smTool.ClassName::HandleL($modelTool.ClassName::EEvent aEvent, $contextClass& aContext)
	{
	// Init state machine $sm.Name if it is in its top state
	if (iState == EState::$smTool.getStateTool($sm.Top).Const)
		{
		iState = TransiteToStableL(EState::${smTool.getStateTool($sm.Top).Const}, aContext);
		}

	LogBeginL(StateName(iState), aEvent);
	EState newState = TransiteOnEventL(aEvent, aContext);
	iState = TransiteToStableL(newState, aContext);
	InvokeSubmachinesL(aEvent, aContext);
	LogEndL(StateName(iState), aEvent);
	}

