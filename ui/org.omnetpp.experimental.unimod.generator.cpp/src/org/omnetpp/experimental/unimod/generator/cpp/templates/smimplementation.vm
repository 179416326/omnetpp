#set($smTool = $modelTool.getSMTool($sm))

///////////////////////////////////////////////////////////////////////////
// Automaton $sm.Name section
///////////////////////////////////////////////////////////////////////////
#macro(executeActions $actions $indent)
#foreach($action in $actions)
${modelTool.offset($indent)}$modelTool.getAction($action);
#end
#end
#macro(transit $transition $targetVar $indent)
#executeActions($transition.OutputActions $indent)
${modelTool.offset($indent)}$targetVar = $smTool.getStateTool($transition.TargetState).Const;
${modelTool.offset($indent)}logTransition(stateName($sourceVar), stateName($targetVar));
${modelTool.offset($indent)}enterState($targetVar, aContext);
#end

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/enter-state.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/is-stable.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/state-name.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/machine-name.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/get-superstate.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/transit-to-stable.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/transit-on-event.vm")

#parse("org/omnetpp/experimental/unimod/generator/cpp/templates/invoke-submachines.vm")

void $smTool.ClassName::handle($modelTool.ClassName::EEvent aEvent, $contextClass& aContext)
{
    // Init state machine $sm.Name if it is in its top state
    if (iState == EState::$smTool.getStateTool($sm.Top).Const)
    {
        iState = transitToStable(EState::${smTool.getStateTool($sm.Top).Const}, aContext);
    }

    //LogBeginL(stateName(iState), aEvent);
    EState newState = transitOnEvent(aEvent, aContext);
    iState = transitToStable(newState, aContext);
    invokeSubmachines(aEvent, aContext);
    //LogEndL(stateName(iState), aEvent);
}

