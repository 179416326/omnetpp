/******************************************
 Model engine class: $model.Name
 ******************************************/
class ${modelTool.ClassName}
    {
#foreach($sm in $modelTool.StateMachines)
		friend class ${modelTool.getSMTool($sm).ClassName};
#end

	public:
		static ${modelTool.ClassName}* NewL(
#modelEngineConstructorParameters(12 ");")

		static ${modelTool.ClassName}* NewLC(
#modelEngineConstructorParameters(12 ");")

		virtual ~${modelTool.ClassName}();

	private:

		void ConstructL(
#modelEngineConstructorParameters(12 ");")

	public:
		enum EEvent
            {
#foreach ($event in $modelTool.Events)
            $modelTool.getEventConst($event),
#end
            ANY_OTHER
            };

		void HandleL(EEvent aEvent);

		$contextClass& Context() {return iContext;}

		RWriteStream* Log() {return iLog;}

		const TDesC& EventName(EEvent anEvent) const;

	private:
		// State machine context
		$contextClass iContext;

	    // Statemachines are owned by ${modelTool.ClassName}
#foreach($sm in $modelTool.StateMachines)
		${modelTool.getSMTool($sm).ClassName}* ${modelTool.getInstanceName($sm)};
#end

		// Logger stream isn't owned by CAutoAnswererModelEngine
		RWriteStream* iLog;
	};
