Further plans...
~~~~~~~~~~~~~~~~
Aug 25 1998, somewhat updated in Aug 1999 and Jan 2000


COMPREHENSIVE TEST SUITE
~~~~~~~~~~~~~~~~~~~~~~~~
would be really useful to test the integrity of the sim. library after
code changes!!!


documentation
~~~~~~~~~~~~~
to be documented:
 - send() functions with cGate* arg
 - multi-stage initialization
fill TBD's
general polishing


better MSVC support
~~~~~~~~~~~~~~~~~~~
replace the coroutine library with Win32 fibers
wizard interface to create OMNeT++ projects and add .ned files to projects
maybe makemake should support creating MSVC makefiles? (someone needs this?)


distribute binaries for NT
~~~~~~~~~~~~~~~~~~~~~~~~~~
demo executable with all samples and Tkenv (with InstallShield)
libraries & utils compiled with MSVC (with InstallShield)


move towards XML
~~~~~~~~~~~~~~~~
release NED's XML binding (preliminary DTD already exists)
find or write suitable DOM library (for parser, use expat)
move GNED's and NEDC's internal data structure to DOM
this would enable:
 - easier presentation, importing/exporting of NED files via XML
 - building a model directly from NED or XML, without nedc compilation 


improve the simulation core
~~~~~~~~~~~~~~~~~~~~~~~~~~~
direct support for message subclassing (1st priority but takes time)
use "generation gap" oo design pattern for the generated code (modules, 
  channels etc).
proper connection objects
more flexible connections
--
bidirectional gates (?)
propagate state info over connections ("statistic wires")
multi-thread simple modules


develop GNED
~~~~~~~~~~~~
GNED's TODO file has a nice list, plus some very remote plans:

support for module/gate vectors, conditional sections and 
other NED niceties.

turn GNED into a general development IDE: project management
(automatic makefile creation, running 'make', executing the 
resulting simulation program etc.)

find out the possibility of integrating GNED with Tkenv 


NED, nedc
~~~~~~~~~
write white paper about future NED extensions and architecture

extensions:
 - add inheritance to the NED language. A derived module could add new
   parameters and gates, give values to parameters, fix gate vector sizes.
   This would allow NED descriptions to follow simple module inheritance tree.
 - data structure descriptions
 - references to parameters of sibling submods
 - arbitrary parameters for channels 
 - 'generation gap' design pattern
  - ...

foundations towards a consistent model library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conventions for development of protocol models so that 
models models from different people can directly work together:
message passing conventions, conventions on message parameter names,
module gate names etc.

make a library of abstract models: abstract queue, bus, router,
application packet dispatcher, transport protocol abstraction etc.
They could serve as skeletons for development (one could use them
by deriving new simple module classes from them).

add more simulation models
~~~~~~~~~~~~~~~~~~~~~~~~~~
most important: TCP and IP models


OMNeT++ community
~~~~~~~~~~~~~~~~~
maintain FAQ
set up and maintain a repository for contributed models/utilities
advertise request for contributions

