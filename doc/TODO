Further plans...
~~~~~~~~~~~~~~~~
Aug 25, 1998, somewhat updated in Aug 1999


improve the simulation core
~~~~~~~~~~~~~~~~~~~~~~~~~~~
direct support for message subclassing (1st priority but takes time)
use "generation gap" oo design pattern for the generated code (modules, 
  channels etc).
proper connection objects
more flexible connections
--
bidirectional gates (?)
propagate state info over connections ("statistic wires")
multi-thread simple modules


develop GNED
~~~~~~~~~~~~
GNED's TODO file has a nice list, plus some very remote plans:

support for module/gate vectors, conditional sections and 
other NED niceties.

turn GNED into a general development IDE: project management
(automatic makefile creation, running 'make', executing the 
resulting simulation program etc.)

find out the possibility of integrating GNED with Tkenv 


NED, nedc
~~~~~~~~~
add inheritance to the NED language. A derived module could add new
parameters and gates, give values to parameters, fix gate vector sizes.
This would allow NED descriptions to follow simple module inheritance tree.


foundations towards a consistent model library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conventions for development of protocol models so that 
models models from different people can directly work together:
message passing conventions, conventions on message parameter names,
module gate names etc.

make a library of abstract models: abstract queue, bus, router,
application packet dispatcher, transport protocol abstraction etc.
They could serve as skeletons for development (one could use them
by deriving new simple module classes from them).

 
documentation
~~~~~~~~~~~~~
update exman.doc
split html versions of manuals into chapters (that is, modify utils/prephtml)
general polishing


add more simulation models
~~~~~~~~~~~~~~~~~~~~~~~~~~
most important: TCP and IP models


OMNeT++ community
~~~~~~~~~~~~~~~~~
maintain FAQ
set up and maintain a repository for contributed models/utilities
advertise request for contributions

