TO DO:

(things that just came to my mind, in no particular order)

Aug 25, 1998

in usman.doc
~~~~~~~~~~~~
message subclassing
cPacket


rewrite makefiles and configure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
makefiles are pretty lousy (very rough dependencies,
non-standard usage of CC, CFLAGS etc).

the configure script could also be replaced by something
more standard, like GNU autoconf or Cygnus configure.


develop GNED
~~~~~~~~~~~~
Another great place for hacking if you like it. Ideas:

load/save NED files directly, without any intervening graphical 
format.

load available module declarations and if someone creates a 
submodule, check its gates and parameters against the loaded
declarations. Make checks and suggestions for module parameter
and gate usage etc.

make GNED a two-way tool: one could edit both the graphics and
the textual NED descriptions, and they are automatically kept 
cosistent (like Borland Delphi).

support for module/gate vectors, conditional sections and 
other NED niceties.

turn GNED into a general development IDE: project management
(automatic makefile creation, running 'make', executing the 
resulting simulation program etc.)

find out the possibility of integrating GNED with Tkenv 

further ideas in GNED's readme file


NED, nedc
~~~~~~~~~
add inheritance to the NED language. A derived module could add 
new parameters and gates, give values to parameters, fix gate vector sizes.
This would allow NED descriptions to follow simple module inheritance tree.


foundations towards a consistent model library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conventions for development of protocol models so that 
models models from different people can directly work together:
message passing conventions, conventions on message parameter names,
module gate names etc.

make a library of abstract models: abstract queue, bus, router,
application packet dispatcher, transport protocol abstraction etc.
They could serve as skeletons for development (one could use them
by deriving new simple module classes from them).

 
implement Dario's suggestions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bidirectional gates
proper connection objects
more flexible connections
propagate state info over connections ("statistic wires")
multi-thread simple modules
...


documentation
~~~~~~~~~~~~~
update exman.doc
split html versions of manuals into chapters (that is, modify utils/prephtml)
general polishing
please send in what you miss from the docs!


OMNeT++ community
~~~~~~~~~~~~~~~~~
maintain FAQ
set up and maintain a repository for contributed models/utilities
advertise request for contributions
