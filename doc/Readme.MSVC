Using OMNeT++ with Microsoft Visual C++
=======================================

This is a HOWTO for OMNeT++ for Microsoft Visual C++ version 6.0.

Part of this documentation comes from a readme written by Balazs
KELEMEN (kelemen@sch.bme.hu) in March 2000.


1. Requirements
~~~~~~~~~~~~~~~

You need to have Microsoft Visual Studio, Microsoft Visual C++ 6.0 installed
your system. The minimal install requires about 30 Mbytes free space on your
hard disk to compile OMNeT++ and to install all related packages.
(And about +20MB temporary space for the downloaded packages and documentations.)

Win95/98/ME users:
------------------
The Makefile.vc file mentioned at several places in this doc is only meant for
NT4.0, W2K and XP.

*** WINDOWS 95, 98 AND ME ARE NOT SUPPORTED !

The reason is that on the latter systems, the shell lacks the power needed to
write robust makefiles. If you're interested in the details, see Appendix C
at the end of this file. The provided Makefile.98 file is a not too successful
attempt to produce a working makefile for these systems. Anyway it is highly
recommended to use a stable operating system (ie. NT) for development with
OMNeT++.


2. Packages to download and install
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First download the following packages:
 - OMNeT++
 - Tcl/Tk
 - Gnuplot
 - bison/flex (only if you want to modify nedc or gned)
Some sites where all this stuff can be found are listed at the end of
this file (Appendix B).

To unpack .tgz or .tar.gz (gzipped, tar packed) files you can use gzip and tar,
or WinZip.

After installation, check if you have the necessary environment variables set.
(See Appendix A!) These variables should be set by the install program of
the related package. Unfortunately this is not always done, so you may have to
set these manually (My Computer-->Properties-->Environment tab).


3. Compiling OMNeT++
~~~~~~~~~~~~~~~~~~~~

Download the omnetpp source code and documentation from the omnetpp site.
If you downloaded a zip file, extract its contents to the installation
directory. If you downloaded a tgz file, copy it to the directory where
you want to install OMNeT++, and extract the archive using the command:

    tar zxvf omnetpp.tgz

A subdirectory called something like omnetpp-2.0 will be created which
will contain the simulator files. In this text we'll assume this directory
is c:\omnetpp-2.0.

Make sure the MSVC executables (nmake,cl,link,...) are in the path.
The BIN directories of the VC should appear in the PATH environment variable.
They are C:\PROGRA~1\MICROS~1\VC98\BIN and C:\PROGRA~1\MICROS~1\MSDEV98\BIN
by default.

It is also recommended that you put the c:\omnetpp-2.0\bin directory
into the path.

Check the configuser.vc file to make sure it contains the proper settings.
You'll probably have to correct the following settings in it:
    OMNETPP_ROOT=c:\omnetpp-2.0
    TK_DIR=e:/tcl
    TK_VER=8.2

Then type
    nmake -f Makefile.vc
(NT/Win2000 only; if you have Win95/98/ME, type nmake -f Makefile.98.)
This should build the executables and the libraries and copy them to the bin
and lib subdirectories within the top-level omnetpp directory.

Note: As the Visual Studio IDE (and makefiles exported from the IDE)
accept only .cpp as an extension of a C++ file, the .cc files in the
samples/ directory will be renamed.

If you only want to create the executables or the libraries, type
    nmake -f Makefile.vc progs
    nmake -f Makefile.vc libs

To delete all built files, type
    nmake -f Makefile.vc clean .

As the result of the compilation the following files should have been created:
In the BIN directory:
    seedtool.exe nedc.exe gned.exe

In the LIB directory:
    tkenv.lib sim_std.lib envir.lib cmdenv.lib


4. Building the samples from the MSVC IDE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To build a sample simulation, start MSVC and open the workspace (.dsw) file.
The simulation should build without any project file adjustment.

The top-level makefile automatically renames the .cc files to .cpp;
but if you want to do it manually, you can run samples/cc2cpp.bat.
The top-level makefile also automatically configures the project (.dsp)
files by substituting the correct Tcl/Tk version and library location.

To change from Tkenv to Cmdenv or vica versa, choose Build|Set active
configuration from the menu and select one of 'Debug-Tkenv', 'Release-Tkenv',
'Debug-Cmdenv', 'Release-Cmdenv', then re-link the executable.

If you have big models, you'll probably have to increase the stack size.
You'll find the setting under Project|Settings --> 'Link' tab --> choose
'Output' from combo --> Stack allocations, Reserve. Be aware that if you
don't specify anything here, MSVC defaults to 1MB -- way too small.

If you need to modify the names of the Tcl/Tk libs (because you installed
a Tcl/Tk version other than 8.2), see Project|Settings --> 'Link' tab -->
choose 'Input' from combo --> Libraries.


5. Creating project files for your simulations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Some instructions to build project files for your own simulations or
to have the standard samples compile in a different directory:

 1. Start by copying and renaming one of the .dsp files from the samples
    directory. It already contains the Tkenv/Cmdenv configurations, etc.

 2. Adjust the project settings so that MSVC will find OMNeT++'s components
    that are needed to build simulation programs. Make sure you enter these
    settings for *all* configurations (In the Project|Settings dialog,
    select 'All configurations' from the combo in the top-left corner.)
    - include path: You must tell MSVC the location of omnetpp.h and other
      header files.  Add omnetpp/src/sim to the include path in
      Project|Settings --> 'C/C++' tab --> 'Preprocessor' category -->
      Additional include directories.
    - library path: MSVC needs to know where to find sim_std.lib, envir.lib
      and other libraries. Add omnetpp/lib to the linker path in
      Project|Settings --> 'Link' tab --> 'Input' category -->
      Additional library path.
    - nedc: It's advisable to put OMNeT++'s bin directory into the PATH
      so that MSVC will find the NED compiler. (An alternative is to enter
      explicit nedc path for each NED file's Custom build step, but that's
      much more cumbersome.)

 3. Add C++ files to the project. Note that they need to have .cpp extension.
    You might need to rename your .cc files to .cpp (ren *.cc *.cpp) and add
    them to the project.

 4. Add the .ned files to the project and set custom build option for them:
       Description:  NED Compiling $(InputPath)
       Command:      nedc -s _n.cpp $(InputPath)
       Outputs:      $(InputPath)_n.cpp
    Hint: you can select all .ned files together, and 'All configurations'
    from the combo at the left of the Settings dialog, and then you have to
    type this settings only once.
    Note: If you copied one of the sample projects, you'll have to adjust
    Command, because they contain explicit nedc path (..\..\bin\nedc).

 5. For each .ned file, add a corresponding _n.cpp file.
    Hint: if you 'Compile' the .ned files, the _n.cpp files will be created,
    and you can select them all at once in the 'Add files' dialog.

 6. Make sure to turn off exception handling and RTTI (they interfere with the
    coroutine library), and set the necessary reserved stack size.

 7. Choose the appropriate configuration from Build|Set active configuration...
    Note: for Tkenv, the simulation will be linked with sim_std.lib, envir.lib,
    tkenv.lib and the Tcl/Tk libraries (link as Win32 Console app...).
    For Cmdenv, this will be sim_std.lib, envir.lib, and cmdenv.lib.

It is planned to create wizards in the future to ease some of these steps.


7. Reconfiguring the libraries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you need to recompile the OMNeT++ libraries with different flags (e.g.
for debugging or optimized for speed), then cd to the top-level omnetpp
directory, edit configuser.vc accordingly, then say:

    nmake -f Makefile.vc clean
    nmake -f Makefile.vc

If you want to recompile just a single library, then cd to the directory
of the library and type:

    nmake -f Makefile.vc clean
    nmake -f Makefile.vc

NOTE: the 'install-local' make target found in earlier OMNeT++ versions
was removed in 2.0beta4. The built libraries and programs are immediately
copied to the lib/ and bin/ subdirs.


8. Using DLLs
~~~~~~~~~~~~~

Currently it's possible to build DLLs from the OMNeT++ libraries and
link a simulation program which uses them. However, because of some
obscure technical problems associated with loading the DLLs, the resulting
simulation program will not run :-(

(Well in case you're interested why: A DLL, while initializing, cannot write
outside its address space. OMNeT++, however, would rely on this mechanism
to build global registration lists ("modules", "networks", etc). Each item
in a registration list is an object whose constructor would add the object
to the global list (an object outside the DLL), and it seems like constructors
of global objects run as part of the DLL initialisation code (DLLMain())).

To build the DLLs anyway, set the desired library suffix to ".dll" in
configuser.vc:
  LIB_SUFFIX=.dll
After re-building OMNeT++, the DLLs should appear in the lib/ directory,
together with the respective import libraries which have the .ilib suffix.
(You may want to rename them manually to .lib.)

There's one trick when using the DLLs: when you compile your model sources,
you must have the WIN32_DLL symbol #defined! It is best to pass them
to the compiler from your makefile (or if you use the IDE, add it to
Settings --> C/C++ --> Preprocessor --> Preprocessor definitions). If you
fail to do so, you'll get undefined linker symbols!


9. Using Plove
~~~~~~~~~~~~~~

If you want to use Plove, you should download and install Gnuplot.
You'll also need a couple of Unix tools like grep and awk, the easiest way
to get them is to download and install the Cygwin package from www.cygnus.com.

When you have everything installed, start Plove and set the appropriate
configuration in Options|External programs. If you entered everything correctly,
Plove should work.

A usual caveat is that Gnuplot expects forward slashes in filenames and Plove
supplies backslashes or vica versa (there are multiple incompatible builds of
Gnuplot on NT); if you suspect this might be the problem, reverse the
slash/backslash setting in Options|External programs.


Have fun!


Appendix A
~~~~~~~~~~
Check the existence of these environment variables (<variable>=<example value>):

MSVC variables:
 INCLUDE=%INCLUDE%;C:\PROGRA~1\MICROS~1\VC98\INCLUDE
 LIB=%LIB%;C:\PROGRA~1\MICROS~1\VC98\LIB
 Path=%PATH%;C:\PROGRA~1\Tcl\bin;C:\PROGRA~1\MICROS~1\Common\msdev98\BIN;C:\PROGRA~1\MICROS~1\VC98\BIN

Tcl/Tk variables:
 TCL_LIBRARY=C:\PROGRA~1\TCL\LIB\TCL8.3

Note:
- Visual C++: As we use command line compilation, the BIN
  directory of the Visual C++ and the DLL directory of the Visual Studio
  should appear in the PATH environment variable.
  The lib and include directories should appear in the LIB and INCLUDE
  environment variables.

- Tcl/Tk requires the following:
  - the DLL directory of Tcl should appear in the PATH.
  - the TCL_LIBRARY environment variable should be set to the directory
    which contains init.tcl. It is usually the C:/PROGRA~1/TCL/LIB/TCLx.x
    directory.


Appendix B
~~~~~~~~~~

* OMNeT++: (Ver 2.0b4) The official site of OMNeT++ is
      http://www.hit.bme.hu/phd/vargaa/omnetpp.htm you can download the latest
      version of OMNeT++ from http://www.hit.bme.hu/anonftp/omnetpp/latest/ .
  File format: .tgz (gzipped tar)

* Tcl/Tk: (Ver 8.3) You can find installable executables in
      ftp://ftp.scriptics.com/pub/tcl/ .
      The 8.3 setup is ftp://ftp.scriptics.com/pub/tcl/tcl8_3/tcl83b2.exe .

* Gnuplot: Good Win32 ports are available from ...

* gzip and tar: These are GNU tools. There are several ports of these software
      one is ftp://sourceware.cygnus.com/pub/cygwin/ . Recommended to use UNTGZ
      Decompression Utility 0.95 freeware version ftp://garbo.uwasa.fi/pc/unix/
      (untgz095.zip)
  File Format: Zip
  Usage: untgz32.exe xxx.tgz

* WinZip: (Ver 7.0) Official site http://www.winzip.com/ download evaluation
      version from there or recommended to use http://www.tucows.com/ .

* flex / bison: They are included in the Cygwin package (http://www.cygnus.com)
      another option is http://www.monmouth.com/~wstreett/lex-yacc/lex-yacc.html


Appendix C
~~~~~~~~~~
Patching the makefiles for Win95/98, a posting from the mailing list:

Subject: Re: Questions of installation with OMNet++ on MSVC
From: Andras Varga <avarga@freemail.hu>
Date: Mon, 19 Jun 2000 20:20:57 +0200

> I've encountered some problems while installing OMNet++ on my system
> (VC6.0 + Windows 98).
> After executing nmake, the prompted message are as following:
>
> C:\omnetpp>nmake -f makefile.vc
>
[output from failed build]

Win98 doesn't seem to support '&&' and '||' as command separators,
and its cd command doesn't have the /D option (=change drive too).
I didn't test the MSVC makefiles on Win98 as I have only NT4...
When will all win32 platforms finally be equal???

I just received a nice trick (dirty hack?) from a guy at my
university to get omnetpp compiled on Win98. First, create a cdm.bat
with the following contents in the toplevel omnetpp dir:

-------
@echo off
if "%1" == "/d" shift
set DIR="%1%"
shift
shift
cd %DIR%
echo Executing %1 in %DIR% with arguments %2 %3 %4 %5 %6 %7 %8 %9
%1 %2 %3 %4 %5 %6 %7 %8 %9
-------

Then replace each 'cd' in the toplevel Makefile.vc with 'cdm'.
You may also need (I'm not sure) to remove the 'check-env' dependency
from the 'all' target in Makefile.vc line 30 if it causes problems.

With this modification you should be able to build everything but the
samples. I haven't verified though if it really works, and I won't
be able to support it... Hope it helps though.

Oops, and it doesn't hurt to enlarge the environment space for
the command prompt where you compile.

If you try this and you can refine it, you're most welcome to post an
update here...

