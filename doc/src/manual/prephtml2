#!/usr/bin/perl
#
# prephtml - tidy up usman.html (generated by l2h from usman.tex).
#            Add page heading, table of contents etc.
#


# *** check settings below -- also ltoh.specs for \opp definition! ***
#$product = "OMNEST";
$product = "OMNeT++";
$opp_version = "4.2";
$templatefile = "omnetpp.thtml";
#$templatefile = "omnest.thtml";

$fname = $ARGV[0];
$quiet = 0;
$singlePage = 1;
$ext = "html";
$apidir = "../api";
$tagfile = "../../api/opptags.xml";


while (@ARGV)
{
    $arg = shift @ARGV;
    if ($arg eq "--split" || $arg eq "-s") {
        $singlePage = 0;
    }
    elsif ($arg eq "--apidir") {
        $apidir = shift @ARGV;
    }
    elsif ($arg eq "--tagfile") {
        $tagfile = shift @ARGV;
    }
    elsif ($arg eq "--template") {
        $templatefile = shift @ARGV;
    }
    elsif ($arg =~ /^-/) {
          die("unrecognized option: $arg");
    }
    else {
        $fname = $arg;
    }
}

#
# read template file
#
print "reading template $templatefile\n" unless $quiet;
open(T, $templatefile) || die "cannot open $templatefile";
read(T, $template, 1000000) || die "cannot read $templatefile";

#
# read file into variable
#
print "reading $fname\n" unless $quiet;
open( htmlf, $fname ) || die "cannot open $fname";
read( htmlf, $html, 1000000 ) || die "cannot read $fname";

#
# kill unwanted formatting
#
print "removing unnecessary formatting and parts\n" unless $quiet;

if ($product ne "OMNEST") {
   $html =~ s/\@ifcommercial\@.*?\@fi\@//sg;
} else {
   $html =~ s/\@ifcommercial\@//sg;
   $html =~ s/\@fi\@//sg;
}

# add IDs to headers
$ctr=100;
$html =~ s/(\<h[0-9]\>)/$1."<a name=\"sec".$ctr++."\"\/>"/gie;

#
# Do some more LaTeX formatting, not done by L2H
#
$html =~ s/\\'([AEOUaeuo])/&$1acute;/g;
$html =~ s/\\"([OUuo])/&$1uml;/g;
$html =~ s/\\-//g;

#
# kill <p> inside <pre>...
#
$html =~ s|(\<pre\>.*?\</pre\>)|kill_p_tag($1)|sgei;

sub kill_p_tag ()
{
      my $txt = shift @_;
      $txt =~ s/\<p\>//sgi;
      return $txt;
}

#
# collect heading info from document
#
print "collecting headings\n" unless $quiet;
$scrap = $html;
$i = 0;
while ($scrap =~ s/\<h([0-9])\>(.*?)\<\/h[0-9]\>//si)
{
      $level[$i] = $1;
      $2 =~ m/\<a name\=\"(.*?)\"\/\>(.*)/si;
      $label[$i] = $1;
      $title[$i] = $2;
      $aname2index{$1} = $i;
      $i++;
}
$nheadings = $i;

#
# calculate heading numbers
#
print "adding heading numbers\n" unless $quiet;
for ($l=1; $l<10; $l++) {$hnum[$l]=0;}
for ($i=0; $i<$nheadings; $i++)
{
      # advance numbering
      $hnum[$level[$i]]++;
      for ($j=$level[$i]+1; $j<10; $j++) {
         $hnum[$j] = 0;
      }

      # assemble current heading number, e.g. "1.4.2."
      $number[$i] = '';
      for ($j=1; $j<=$level[$i]; $j++) {
         $number[$i] .= $hnum[$j].'.';
      }
      $number[$i] =~ s/\.$//;

      # store chapter number
      $chapnum[$i] = $hnum[1];
}

#
# insert numbers into manual body
#
for ($i=0; $i<$nheadings; $i++)
{
      # search replace phrases like this: <a name="_Toc473901724">Expressions</A>
      $html =~ s/(\<a name=\"$label[$i]\"\/>)/\1$number[$i] /sgi;
}

#
# find cross-references and associate them with the section
#  1. set up mapping: xref labels to the sections containing them
#  2. modify xrefs accordingly
#
for ($i=0; $i<$nheadings; $i++)
{
      $label2name{$label[$i]} = $number[$i];
}

$scrap = $html;
$afilename = ""; #if singlePage
while ($scrap =~ s/\<a name="([^"]+)"//si)
{
      $aname = $1;
      if ($aname =~ /^sec[0-9]/)  {
          $cursection = $aname;
          if (!$singlePage) {
              my $i = $aname2index{$aname};
              my $c = $chapnum[$i];
              $afilename = "chap$c.$ext";
          }
      } elsif ($aname =~ /^fig/) {
          # leave figures alone
          $xref{$aname} = "$afilename#$aname";
          $xrefname{$aname} = "below";
      } else {
          # adjust other xrefs to point to the section containing them
          $xref{$aname} = "$afilename#$cursection";
          $xrefname{$aname} = "[$label2name{$cursection}]";
          if ($xrefname{$aname} eq '[]') {$xrefname{$aname} = "[click]";}
          print "  $aname --> $cursection: $xrefname{$aname}\n";
      }
}
#foreach $aname (keys %xref) {
#      print "$aname    -->    $xref{$aname}      (txt:$xrefname{$aname})\n";
#}



$html =~ s|\<A HREF=\"#([^\"]+)\"\>\[click\]\</A\>|\<a href=\"$xref{$1}\"\>$xrefname{$1}\</a\>|sgi;

#
# create 'chapters' table
#
print "creating Topics and TOC tables\n" unless $quiet;
if ($singlePage) {
      $chapters = "<h1>Chapters</h1>\n<p>\n";
} else {
      $navbar="<p><b><hr><a href=\"toc.$ext\">[Table of Contents]</a><hr></b></p>";
      $chapters = $navbar . "<h1>$product User Manual -- Chapters</h1>\n<p>\n";
}
for ($i=0; $i<$nheadings; $i++)
{
      if ($level[$i]==1)
      {
           $link = $singlePage ? "#toc_$number[$i]" : "chap$chapnum[$i].$ext";
           $entry = "<b><a href=\"$link\" class=\"toc\">$number[$i] $title[$i]</a></b><br>";
           $chapters .= "$entry\n";
      }
}
$chapters .= "</p>";

#
# create table of contents
#
if ($singlePage) {
      $toc = "<h1>Table of Contents</h1>\n<p>\n";
} else {
      $navbar="<p><b><hr><a href=\"usman.$ext\">[Chapters]</a><hr></b>\n</p>";
      $toc = $navbar . "<h1>Table of Contents</h1><p>\n";
}
for ($i=0; $i<$nheadings; $i++)
{
      $link = $singlePage ? "#$label[$i]" : "chap$chapnum[$i].$ext#$label[$i]";
      $entry = "<a name=\"toc_$number[$i]\"/><a href=\"$link\" class=\"toc\">$number[$i] $title[$i]</A>";
      for ($j=0; $j<$level[$i]; $j++) {$entry = "&nbsp;&nbsp;$entry";}
      if ($level[$i]==1)    {$entry = "<br><font size=+1><b>$entry</b></font>";}
      elsif ($level[$i]==2) {$entry = "<b>$entry</b>";}
      $toc .= "$entry<br>\n";
}
$toc .= "</p>";

sub spaces($) {
    my $n = shift; my $s = '';
    for (my $i=0; $i<$n; $i++) {$s.=' ';}
    return $s;
}

#
# create eclipse-style table of contents (toc.xml)
#
$tocxml = '<?xml version="1.0" encoding="utf-8" standalone="no"?>
<toc label="OMNeT++ Manual" topic="index.html">
';

for (my $i=0; $i<$nheadings; $i++)
{
      for (my $j=$level[$i-1]-1; $j>=$level[$i]; $j--) {
          $tocxml .= spaces(2*$j) . "</topic>\n";
      }
      my $link = $singlePage ? "usman.$ext#$label[$i]" : "chap$chapnum[$i].$ext#$label[$i]";
      my $title = $title[$i];
      $title =~ s|"|&quot;|g;
      $title =~ s|</?[a-z0-9]+>||gi;  # remove <b></b>, <tt></tt>
      # to limit the index depth to XX levels for eclipse, change 99 to the desired level
      if ($level[$i] <= 99)
      {
          $entry = spaces(2*$level[$i]) . "<topic label=\"$number[$i] $title\" href=\"$link\"";
          $entry .= ($i!=$nheadings-1 && $level[$i+1]>$level[$i]) ? ">" : "/>";
          $tocxml .= "$entry\n";
      }
}
$tocxml .= "</toc>";


#
# load Doxygen tags.xml...
#
# <compound kind="class">
#    <name>cAccuracyDetection</name>
#    <filename>classcAccuracyDetection.html</filename>
# </compound>
#
print "adding hyperlinks on class names (tagfile=$tagfile)\n" unless $quiet;
open(INFILE, $tagfile) || die "cannot open $tagfile";
read(INFILE, $tags, 1000000) || die "cannot read $tagfile";
$components = ();
while ($tags =~ s|\<compound +kind="class".*?\>(.*?)\</compound\>||s)
{
      $tag = $1;
      $tag =~ s|\<member .*?\>(.*?)\</member\>||sg;
      if ($tag =~ m|\<name\>(.*?)\</name\>|) {$name = $1; push(@components,$name);} else {next;}
      if ($tag =~ m|\<filename\>(.*?)\</filename\>|)  {$htmlfile{$name} = $1;}
      #print "DBG: $name, $htmlfile{$name}\n";
}
#print join(' ', @components);

#
# ...and put hyperlinks on class names
#
$names = join('|',@components);
$html =~ s!\b($names)\b!'<a href="'.$apidir.'/'.$htmlfile{$1}.'">'.$1.'</a>'!gse unless($names eq '');


if ($singlePage)
{
      print "writing page\n" unless $quiet;
      $new_html = $template;
      $body = "<h1><b>User Manual</b></h1><h3>$product version $opp_version</h3>$chapters<hr>$toc$html";
      $new_html =~ s/__BODY__/$body/;
      open(FILE,">usman.$ext");
      print FILE $new_html;
      close FILE;
}
else
{
      #
      # split up to chapters along H1 headings
      #
      print "splitting up to chapters\n" unless $quiet;
      $nchapters = 0;
      $scrap = $html;
      while ($scrap =~ s/(\<h1\>.*?)\<h1\>/\<h1\>/si)
      {
            $chapter[++$nchapters] = $1;
      }
      $chapter[++$nchapters] = $scrap;

      #
      # create navigation bars for each chapter
      #
      for ($i=1; $i<=$nchapters; $i++)
      {
            $navbar[$i] = "<p><hr><b>";
            if ($i>1) {$t=$i-1; $navbar[$i] .= "<a href=\"chap$t.$ext\">[Prev]</A>";}
            if ($i<$nchapters) {$t=$i+1; $navbar[$i] .= "&nbsp;<a href=\"chap$t.$ext\">[Next]</A>";}
            $navbar[$i] .= "&nbsp;<a href=\"toc.$ext#toc_$i.\">[TOC]</a>";
            $navbar[$i] .= "&nbsp;<a href=\"usman.$ext\">[Chapters]</a>";
            $navbar[$i] .= "</b><hr></p>";
      }

      #
      # write each chapter into a separate file
      #
      print "writing chapter files\n" unless $quiet;
      for ($i=1; $i<=$nchapters; $i++)
      {
            $new_html = $template;
            $new_html =~ s/__BODY__/$navbar[$i]$chapter[$i]$navbar[$i]/;
            open(FILE,">chap$i.$ext");
            print FILE $new_html;
            close FILE;
      }

      #
      # write chapters file (usman.html)
      #
      print "writing chapters file\n" unless $quiet;
      $new_html = $template;
      $body = "<h1><b>User Manual</b></h1><h3>$product version $opp_version</h3>$chapters";
      $new_html =~ s/__BODY__/$body/;
      open(FILE,">usman.$ext");
      print FILE $new_html;
      close FILE;

      #
      # write toc file (toc.html)
      #
      print "writing toc file\n" unless $quiet;
      $new_html = $template;
      $new_html =~ s/__BODY__/$toc/;
      open(FILE,">toc.$ext");
      print FILE $new_html;
      close FILE;
}

#
# write eclipse toc file (toc.xml)
#
print "writing toc.xml\n" unless $quiet;
open(FILE,">toc.xml");
print FILE $tocxml;
close FILE;

print "done\n" unless $quiet;


