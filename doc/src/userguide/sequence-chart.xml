<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="seq-chart">
  <title>Sequence Charts</title>

  <sect1>
    <title>Introduction</title>
    <para>
      The Sequence Chart and the Event Log Table are part of the OMNeT++ IDE and they are
      based on the eventlog feature of OMNeT++ 4.0. They aim to help understanding complex
      simulation models and to help correctly implementing the desired component
      behaviors. Using these tools you will be able to easily examine every minute detail
      of the simulation back and forth in terms of simulation time or step-by-step
      focusing on the behavior instead of the statistical results of your model.
    </para>
    <para>
      Refer to the OMNeT++ 4.0 User Manual for further details on what an eventlog file
      is, what its format and how to set up the simulation kernel to automatically record
      it during simulation.
    </para>
  </sect1>

  <sect1>
    <title>Configuration</title>
    <para>
      The Inifile Editor provides a small group of widgets in the Output Files section to
      configure the eventlog feature. To enable recording simply put a checkmark next to
      its checkbox.
    </para>
    <picture file="pictures/INI-Eventlog.png">
      Inifile Editor - Output Files section - Eventlog
    </picture>
    <para>
      The eventlog file should have the file extension <filename>log</filename> as the
      example shows above so that OMNeT++ IDE tools will be able to recognize it
      automatically. To open an eventlog file simply double click on it in the Project
      Explorer view.
      <note>
	To open a file in an editor other than its default editor right click on it and
	choose an item from the <guisubmenu>Open With</guisubmenu> submenu.
      </note>
    </para>
    <para>
      All the other eventlog specific parameters described in the OMNeT++ 4.0 User Manual
      can also be set using the Inifile Editor in the usual way.
    </para>
  </sect1>

  <sect1>
    <title>Tools</title>
    <para>
      There are two tools called the Sequence Chart and the Eventlog Table (often just
      referred as tools in the rest of this chapter) in the OMNeT++ IDE to inspect the
      contents of an eventlog file. Both tools can be used as an editor and a view. The
      difference between being an editor or a view is quite important from the user's
      point of view, because there is only at most one instance of a view of the same
      kind. It means that even if multiple eventlog files are open in editors there are no
      more than one Eventlog Table view. This singleton view will automatically display
      the eventlog file of the active editor remembering its position and state when
      switching among editors back and forth. For more details on what an editor and a
      view is and what are the differences see the Eclipse documentation.
    </para>
    <para>
      It is possible to open the same eventlog file in multiple editors and to navigate to
      different locations or use different filters in them. Once an eventlog is open in an
      editor you can use the <guimenuitem>Window|New Editor</guimenuitem> to open it
      again.
      <note>
	Dragging one of the editors from the tabbed pane to one of the sides of the editor
	area allows to interact with the two simultaneously.
      </note>
    </para>    
    <sect2>
      <title>Large File Support</title>
      <para>
	Since an eventlog file might be several Gbytes therefore both tools are designed
	in a way that allows efficiently displaying such a file without requiring large
	amounts of physical memory to load it at once. As you navigate through the file
	physical memory is filled up with the content lazily. Since it is difficult to
	reliably identify in a platform independent way when the system is going low on
	physical memory it is left up to the user to release the allocated memory when
	needed. This operation although usually not required at all is available from the
	popup menu as <guimenuitem>Release Memory</guimenuitem>. Executing it will not
	affect the user interface in any way.
      </para>
      <para>
	The eventlog file being loaded lazily (and optionally filtered) also means that
	the exact number of events and rows it contains cannot be cheaply determined. This
	affects the way scrollbars work in the lazy direction, horizontal for the Sequence
	Chart and vertical for the Eventlog Table. Basically these scrollbars act as a non
	linear approximation in that direction which most of the time remains unnoticable
	for the user unless the file is really small.
      </para>
    </sect2>
    <sect2>
      <title>Live Data</title>
      <para>
	Despite the simulation kernel keeps the eventlog file open for writing while the
	simulation is running it may be opened in the OMNeT++ IDE simultaneously. Both
	tools can be instructed by pressing the <keycap>END</keycap> key to follow the end
	of the eventlog as new content is appended to it.
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Eventlog Table</title>
    <para>
      The Eventlog Table can display the content of an eventlog file recorded during a
      simulation both as a view and as an editor in the OMNeT++ IDE. It is also capable to
      display filtered eventlog files whether they were created via the Eventlog Tool
      filter command, by a custom filter tool or by on the fly in memory filtering.
    </para>
    <para>
      The table has three columns where the first two called event number and simulation
      time show the values corresponding to the event where the line was recorded. The
      third column called details contains the actual data which varies for each kind. The
      different kind of lines can be easily recognized by their icon. Some lines such as
      sending a message through a sequence of gates relate with each other and are
      indented for easier recognition.
    </para>
    <para>
      There are various options which control how and what the Eventlog Table
      displays. Some of these are available from the toolbar while some others are
      accessible only from the popup menu.
    </para>
    <sect2>
      <title>Display Mode</title>
      <para>
	The eventlog file content may be displayed in two different notations. The
	<guilabel>Raw</guilabel> data notation shows exactly what is present in the file.
      </para>	
      <picture file="pictures/EventlogTable-RawMode.png">
	<guilabel>Raw</guilabel> notation
      </picture>
      <para>
	On the other hand the <guilabel>Descriptive</guilabel> notation displays the log
	file after some preprocessing into a human readable form. It also resolves
	references and types so that less navigation is required to understand what was
	going on. To switch between the two use the <guilabel>Display Mode</guilabel>
	<icon name="displaymode.png"/> option from the toolbar or the context menu.
      </para>
      <picture file="pictures/EventlogTable-DescriptiveMode.png">
	<guilabel>Descriptive</guilabel> notation
      </picture>
    </sect2>
    <sect2>
      <title>Name Mode</title>
      <para>
	There are three different ways to display names in the Eventlog table configurable
	by the <guilabel>Name Mode</guilabel> <icon name="namemode.gif"/> option. Full
	path and full name shows what is expected while the smart mode uses the context
	where the line is to decide whether a full path or a full name should be
	displayed. For each event line it always uses the full path and for all other
	lines if the name is the same as the enclosing event's module name then it shows
	the full name only.
      </para>
    </sect2>
    <sect2>
      <title>Type Mode</title>
      <para>
	The option called <guilabel>Type Mode</guilabel> can be used to switch between
	displaying the C++ class name or the NED type name in a parenthesis just before
	the name of modules. This is only available from the context menu.
      </para>
    </sect2>
    <sect2>
      <title>Line Filter</title>
      <para>
	The Eventlog Table may be filtered by using the <guilabel>Line Filter</guilabel>
	<icon name="filter.png"/> selector on the toolbar or from the context menu which
	allows filtering lines with specific kinds. There are some predefined filters but
	also custom filter patterns may be specified referring to fields present in
	the <guilabel>Raw</guilabel> mode. The following is a custom filter example which
	shows message sends where the class of the message is AirFrame.
	<screen>BS and c(AirFrame)</screen>
	See the OMNeT++ User Manual for more details on match expressions.
      </para>
      <note>
	Event lines marked with green circles <icon name="event.png"/> are always shown in
	the Eventlog Table independently of the line filter.
      </note>
    </sect2>
    <sect2>
      <title>Navigation</title>
      <para>
	Standard keyboard and mouse navigation and multiple selection within the Eventlog
	Table is done just like in any other table but there are extra navigation options
	in the context menu. 
      </para>
      <para>
	The simplest are the <guilabel>Goto Event</guilabel> and the <guilabel>Goto
	Simulation Time</guilabel> which simply jump to given location.
      </para>
      <para>
	There are navigation options to go to the previous (<keycap>ALT + ARROW UP</keycap>)
	or next (<keycap>ALT + ARROW UP</keycap>) event in general and to go to the previous
	(<keycap>SHIFT + ARROW UP</keycap>) or next (<keycap>SHIFT + ARROW DOWN</keycap>)
	event in the same module.
      </para>
      <para>
	Some of the navigation options focus on the causes of events and consequences of
	message sends. To go to the cause event press <keycap>CONTROL + ARROW UP</keycap>
	and to go to the arrival of a message send press <keycap>CONTROL + ARROW DOWN</keycap>
	while the selection is on the message being sent.
      </para>
      <picture file="pictures/EventlogTable-NavigationMenu.png">Context menu</picture>
    </sect2>
    <sect2>
      <title>Searching</title>
      <para>
	For performance reasons the search <icon name="Search.gif"/> function works
	directly on the eventlog file and not the text displayed in the Eventlog table. It
	means that some static text present in <guilabel>Descriptive</guilabel> mode
	cannot be found. Usually it is easier to figure out what to search for
	in <guilabel>Raw</guilabel> mode where the content of the eventlog file is
	directly displayed. The search can work in both directions from the current
	selection and be case insensitive. To repeat the last search use
	the <guilabel>Find Next</guilabel> <icon name="SearchNext.gif"/> command.
      </para>
    </sect2>
    <sect2>
      <title>Bookmarks</title>
      <para>
	For easier navigation the Eventlog table supports navigation history accessible
	from the standard IDE toolbar and bookmarks <icon name="bkmrk_nav.gif"/> available
	from the context menu. Bookmarked events are highlighted with a different
	background color.  
      </para>
      <picture file="pictures/EventlogTable-Bookmark.png">Bookmark</picture>
      <para>
	Use the bookmark view to jump to bookmarks even after restarting the IDE.
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Sequence Chart</title>
    !!! TODO !!!
    <picture file="pictures/sequencechart1.png">Message detail</picture>
    <para>
      The Sequence Chart also displays the content of an eventlog file focusing on the
      causes and consequences of events and message sends recorded during the simulation.
      It is also capable to display filtered eventlog files just like the Eventlog Table.
    </para>
    <picture file="pictures/sequencechart6.png">Sequence Chart</picture>
    <para>
      The horizontal axis of the Sequence Chart corresponds to the simulation time in four
      different ways. Linear and event number mean that the simulation time and event
      number is proportional to the distance measured in pixels respectively. While non
      linear and step mean that there is a non linear transformation between distance
      measured in pixels and simulation time. The goal of this non linear transformation
      is to get a compact figure even if there are longer and shorter periods of
      simulation time intervals between events. You can switch between timeline modes from
      the toolbar or the context menu.
    </para>
    <picture file="pictures/sequencechart7.png">Timeline mode</picture>
    <para>
      It is quite common in simulation models that multiple events occur at the very same
      simulation time. This is shown as grey areas indicating that the simulation time
      does not change along the horizontal axis within the area.
    </para>
    <para>
      The vertical axis of the Sequence Chart corresponds to modules in the simulation. By
      default all modules are displayed as a single solid line and events occurred in that
      module are shown as filled circles. A green circle represents the processing of a
      self message while a red circle is an event caused by receiving a message from
      another module. Axes can be reordered manually, by module name, by module id or by
      (approximately) minimizing the number of crossing arrows between them.
    </para>
    <para>
      Both the top and the bottom of the Sequence Chart display the simulation times
      corresponding to the currently visible part. The left side of the top simulation
      time gutter displays the common simulation time prefix which should be added to each
      individual simulation time shown at the vertical hairlines. The right side of the
      figure displays the simulation time range currently visible within the sequence
      chart window.
    </para>
    <picture file="pictures/sequencechart8.png">Gutter</picture>
    <para>
      The Sequence Chart represents message sends via blue arrows. The arrow starts at the
      module which is sending the message and ends at the module which processed that
      message. The simulation times corresponding to the start and end points are also
      important. Sometimes a message send goes far away on the figure in which case the
      line is broken into two small parts displayed at the two ends pointing towards each
      other but without actually linked with a continuous line.
    </para>
    <picture file="pictures/sequencechart9.png">A message arriving from far away</picture>
    <para>
      There is a green arrow representing message reuses. When a message arrives to a
      module which neither deletes nor sends but rather stores it and later on sends the
      very same message to another module then the events where the message arrived and
      where the message was actually sent are in message reuse relationship.
    </para>
    <para>
      It is possible to attach Vector data to individual axes from the context menu by
      right clicking on the axis. The vector to be displayed must be of type enum and be
      registered with the C++ macro Register_Enum. In this case the solid line of the axis
      will be turned into a thick colored bar based on the enum values present in the
      vector.
    </para>
    <picture file="pictures/sequencechart10.png">
      Vector data with enum type displayed on module axis
    </picture>
    <para>
      Filtering the Sequence Chart is also possible. This actually means that some of the
      events are not displayed on the chart so that the user can focus on the relevant
      parts. When filtering is turned on (displayed in the status line) some of the
      message arrows might be decorated with a filter sign (a double zigzag crossing the
      arrow line's center). Such a message arrow means that there is a message going out
      from the source module which after some processing in some other filtered modules
      reaches the target module. The message names correspond to the first and the last
      message in the chain of filtered message sends.
    </para>
    <picture file="pictures/sequencechart11.png">
      A chain of filtered message sends represented as a single arrow
    </picture>
    <para>
      The Sequence Chart supports documentation purposes by being able to export
      continuous parts into SVG format.
    </para>
  </sect1>

  <sect1>
    <title>On The Fly Filter Tool</title>
    !!! TODO !!!
    <para>
      The content of the eventlog file may be filtered on the fly by opening the filter
      configuration.
    </para>
    <picture file="pictures/sequencechart12.png">
      Opening the filter configuration
    </picture>
    <para>
      On the fly filtering means that the result of the filter is not saved into a file
      but it is rather lazily computed and stored within memory. This allows rapid
      switching between various views on the same eventlog data within both the sequence
      chart and the Eventlog Table.
    </para>
    <para>
      The filter configuration dialog has four tabs each restricting the content of the
      eventlog on its own. The individual tabs may be turned on and off independently of
      each other.
    </para>
    <picture file="pictures/sequencechart13.png">Filter configuration dialog</picture>
    <para>
      The general filter is the simplest one which filters out events from the beginning
      and from the end of the eventlog file. This might help to reduce the computation
      time when defining filters which otherwise would be very expensive to compute for
      the whole eventlog.
    </para>
    <para>
      The module and message filter tabs each have three inner tabs. These inner tabs
      restrict the content to events matching any condition present in them. Both the
      module and message filters allow selecting modules and messages by expression, type,
      name and id.
    </para>
    <para>
      The trace filter allows filtering for causes and consequence of particular event
      specified by its event number. The cause/consequence relation between two events
      means that there is message send path from the cause event to the consequence event.
    </para>
    <note>
      Since computing the causes and consequences far away in the log file from the traced
      event might be a time consuming task therefore there are extra limits around the
      traced event to be set.
    </note>
    <picture file="pictures/sequencechart14.png">Trace tab</picture>
  </sect1>

</chapter>
