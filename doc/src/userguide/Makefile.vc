FOP=$(TOOLS_DIR)\fop\fop.bat
XSLTPROC=$(TOOLS_DIR)\libxslt\bin\xsltproc
DOCBOOK=$(TOOLS_DIR)\docbook

all: pdf html

icons:
	perl icons.pl

html: catalog
	$(XSLTPROC) --nonet --xinclude --output tmp.xml trans.xsl userguide.xml
	$(XSLTPROC) --nonet --output userguide.html  $(DOCBOOK)/html/docbook.xsl tmp.xml
	del tmp.xml

eclipse: catalog
	$(XSLTPROC) --nonet --xinclude --output tmp.xml trans.xsl userguide.xml
	$(XSLTPROC) --nonet --output userguide.html  $(DOCBOOK)/eclipse/eclipse.xsl tmp.xml
	del tmp.xml

pdf: chart-properties.xml processing-operations.xml catalog
	$(XSLTPROC) --nonet --xinclude --output tmp.xml trans.xsl userguide.xml
	perl -pe "s!\@DOCBOOK_STYLESHEET\@!file:///$(TOOLS_DIR:\=/)/docbook/fo/docbook.xsl!g" custom-fo-docbook.xsl >custom-fo-docbook-tmp.xsl
	$(XSLTPROC) --nonet --output tmp.fo custom-fo-docbook-tmp.xsl tmp.xml
	call $(FOP) -fo tmp.fo -pdf userguide.pdf
	del custom-fo-docbook-tmp.xsl tmp.fo tmp.xml

# the following target should be called manually because it depends on binary file (scavetool) which is  
# created only later durnig the run of the automatic build script. 
# Re-run this target if any of the chart properties change in the CHART_POP_DIR, and check in the results  
# into the repository 

generate-tables: chart-properties processing-operations 

catalog:
	set XML_CATALOG_FILES=../docbook-dtd/catalog.xml
	
CHART_PROP_DIR = ..\..\..\ui\org.omnetpp.scave\src\org\omnetpp\scave\charting\properties

chart-properties: generate.pl $(CHART_PROP_DIR)\*Properties.java
	perl generate.pl chart-properties $(CHART_PROP_DIR) >chart-properties.xml

processing-operations: generate.pl
	perl generate.pl processing-operations >processing-operations.xml

