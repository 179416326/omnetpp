<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "custom-docbook.dtd">
<appendix id="computed-scalar-spec" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Specification of the 'Compute Scalars' operation</title>

  <para>This appendix describes the ``Compute Scalars'' operation in details.
  Some fields of the operation can contain expressions, so we first describe the expressions.
  The ``Compute Scalars'' operation is described in the following section.</para>

  <sect1>
    <title>Expressions</title>
    <para> An expression is composed of constants, scalar values, vector or histogram fields,
    variables, operators, and functions.
    </para>

    <simplesect>
    <title>Constants</title>
    <para>Numeric contants are accepted in the standard format.</para>
    <para>Examples: [[-1]], [[3.14159]], [[4.2e1]]</para>
    <para>String constants must be enclosed with double quotes. Double quotes within the string must be preceded by a
    backslash character.</para>
    <para>Examples: [["xyz"]], [["This string contains a \" character"]]</para>
    </simplesect>
    <!-- [0-9]+(\.[0-9]*)?([eE][+-]?[0-9]+)? -->

    <simplesect><title>Scalars</title>
    <para>The values of scalars in the input dataset can be accessed in two ways:</para>
    <itemizedlist>
    <listitem><formalpara><title>Simple names</title>
    <para>Using the name of a scalar in the expression refers to all scalar with that name.
    If the name of the scalar contains non-alphanumeric characters, it must be enclosed with
    apostrophies.</para></formalpara></listitem>

    <listitem><formalpara><title>Qualified names</title>
    <para>Qualified names are in the form [[&lt;module&gt;.&lt;scalar&gt;]]. Here [[&lt;module&gt;]]
    is a pattern (see ...) that matched to the full name of the module of the scalar; [[&lt;scalar&gt;]]
    is the name of the scalar (quoted if needed). As a special case, [[&lt;module&gt;]] can
    also be the full name of the module.</para></formalpara></listitem>
    </itemizedlist>

    <para>Note that the scalar references may produce multiple values. Consequently the expression
    that contains them may also produce multiple values by iterating on the values of the scalars.
    The iteration is defined differently for the two types of scalars references:
    <itemizedlist>
    <listitem><para>Scalars referenced by their simple names are restricted to come from the same module.
    For example, if we have four scalars recorded by two modules, [[m1.a]], [[m1.b]], [[m2.a]], [[m2.b]],
    then [[a+b]] produces two values: [[m1.a+m1.b]] and [[m2.a+m2.b]].</para></listitem>

    <listitem><para>Scalars referenced by their qualified names are iterated independently on their modules.
    This means that if there are several such pattern in the expression, than the computation is performed
    on their cartesian product. With the input of the previous example, [[*.a+*.b]] produces
    four values: [[m1.a+m1.b]], [[m1.a+m2.b]], [[m2.a+m1.b]], and [[m2.a+m2.b]].</para>
    <para>
    The iteration can be restricted by binding some part of the module name to variables,
    and use those variables in other patterns. The [[${x=&lt;pattern&gt;}]] syntax in a module name
    pattern binds the part of the module name matched to pattern to a variable named [[x]].
    These variables can be referred as [[${x}]] in other patterns. The [[${...}]] syntax allows to write
    any expression in the pattern (like [[${x+1}]]).</para>
    </listitem>
    </itemizedlist>
    </para>


    <para>Examples: [[iaTime]], [['sentPk:count']], [[Aloha.server.duration]],
                    [[cli${i={0..2}}.pkSent]], [[**.host[${i+2}].'end-to-end-delay']]</para>
    
    <note><para>Simple scalars references can be viewed as a shortcut for qualified references, where
    the module part is [[${m=**}]] in the first reference, and [[${m}]] in the subsequent references
    (here [[m]] is a fresh variable name). E.g. if [[a]], and [[b]] are scalars, then [[a*b]] is equivalent
    to [[${m=**}.a * ${m}.b]].</para></note>
    </simplesect>

    <simplesect><title>Vectors and Histograms</title>
    <para>To refer to a field of a vector or histogram, use [[count(&lt;name&gt;)]],
    [[mean(&lt;name&gt;)]], [[min(&lt;name&gt;)]], [[max(&lt;name&gt;)]],
    [[stddev(&lt;name&gt;)]], and [[variance(&lt;name&gt;)]].
    Here [[&lt;name&gt;]] is the simple or qualified name of the vector or histogram.</para>
    <para>The same rules apply to qualified names and iterations over modules, as in the
    case of scalars.</para>
    </simplesect>

    <simplesect><title>Patterns</title>
    <para>Patterns can be used to specify the module name of an input statistic, or as the right-hand-side
    of the pattern matching operator ([[=~]]). Characters of the patterns are matched literally, except
    the following:</para>
    <informaltable>
      <tgroup cols="2">
        <colspec colwidth="1in" />
        <colspec colwidth="2*" />
        <thead>
          <row>
            <entry>Pattern</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>?</entry>
            <entry>matches any character</entry>
          </row>
          <row>
            <entry>*</entry>
            <entry>matches zero or more characters except '.'</entry>
          </row>
          <row>
            <entry>**</entry>
            <entry>matches zero or more characters (any character)</entry>
          </row>
          <row>
            <entry>{a-z}</entry>
            <entry>matches a character in range a-z</entry>
          </row>
          <row>
            <entry>{^a-z}</entry>
            <entry>matches a character not in range a-z</entry>
          </row>
          <row>
            <entry>{32..255}</entry>
            <entry>any number (i.e. sequence of digits) in range 32..255 (e.g. "99")</entry>
          </row>
          <row>
            <entry>[32..255]</entry>
            <entry>any number in square brackets in range 32..255 (e.g. "[99]")</entry>
          </row>
          <row>
            <entry>${x=**}</entry>
            <entry>matches a pattern, and binds the matched substring to x</entry>
          </row>
          <row>
            <entry>${x+1}</entry>
            <entry>evaluates an expression, and matches the characters of the result</entry>
          </row>
          <row>
            <entry>\</entry>
            <entry>takes away the special meaning of the subsequent character</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    </simplesect>

    <simplesect><title>Variables</title>
    <para>Variables can be defined by using the [[${&lt;var&gt;=...}]] notation in patterns. The scope of
    the variable is to the right of its definition. There can also be some predefined variables, and
    variables defined in one expression can be accessible in another.</para>
    <para>Predefined variables</para>
    <variablelist>
    <varlistentry><term>in ``Grouping expression''</term>
    <listitem><para>[[module]], [[name]], [[run]], run attributes of the current statistics,
    [[value]] if the current statistics is a scalar</para></listitem></varlistentry>
    <varlistentry><term>in ``Value expression''</term>
    <listitem><para>[[group]] is the value of the grouping expression</para></listitem></varlistentry>
    <varlistentry><term>in ``Target module''</term>
    <listitem><para>[[group]] is the value of the grouping expression</para></listitem></varlistentry>
    </variablelist>
    </simplesect>

    <simplesect><title>Operators</title>
    <para>The following operators are interpreted as usual:</para>
    <informaltable>
      <tgroup cols="2">
        <colspec colwidth="1in" />
        <colspec colwidth="2*" align="center"/>
        <tbody>
          <row>
            <entry>Arithmetic</entry>
            <entry>[[+ - * / ^ %]]</entry>
          </row>
          <row>
            <entry>Bitwise</entry>
            <entry>[[~ | &amp; # &lt;&lt; &gt;&gt;]]</entry>
          </row>
          <row>
            <entry>Concatenation</entry>
            <entry>[[++]]</entry>
          </row>
          <row>
            <entry>Comparision</entry>
            <entry>[[== != &lt; &gt; &lt;= &gt;=]]</entry>
          </row>
          <row>
            <entry>Boolean</entry>
            <entry>[[! || &amp;&amp;]]</entry>
          </row>
          <row>
            <entry>Conditional</entry>
            <entry>[[?:]]</entry>
          </row>
          <row>
            <entry>Pattern matching</entry>
            <entry>[[=~]]</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para> Arithmetic, bitwise, concatenation, boolean, and comparision operators always evaluate
    their arguments; binary operators evaluate their left arguments first.
    Arithmetic, bitwise, and comparision operators implicitly convert their arguments to numeric values,
    the concatenation operator converts them to strings, the boolean operators converts them to boolean
    values. A runtime error occurs if the conversion fails.
    </para>
<!--
    <para>
    If the operand of a unary operator has muliple values (because of scalar references),
    then the expression also yields multiple values. The operation is performed on each
    value sequentially.
    </para>
    <para>For binary operators, the right operand is evaluated after the left operand,
    and their right operand migth refer variables defined in their left operand.
    If their operands yield multiple values, than the operator expression also yields
    multiple values. For example the evaluation of the [[+]] operator is described by the
    following pseudo code:
    <programlisting><![CDATA[
foreach ((lval,env1) in eval(leftarg, env))
  foreach ((rval, env2) in eval(rightarg, env1))
    yield (lval+rval, env2)]]>
    </programlisting>
    Here the [[env]] variables stores the defined variables and their values, and the [[eval]]
    function expects an expression, and an environment, and yields a list of [[(value,env)]] pairs.
    </para>
 -->
    <para>The conditional operator ([[cond ? a : b]]) is special, because it does not evaluate all operands.
    If the condition is true, then the second, otherwise the third operand is evaluated.</para>

    <para>The pattern matching operator [[=~]] expects a string expression as the left, and
    a pattern as the right operand. If the pattern matches with the string, then the result is
    the string, otherwise [[false]].</para>
    </simplesect>

    <simplesect><title>Functions</title>
    <para>The following functions compute an aggregated value from a set of values:</para>
    <informaltable>
      <tgroup cols="2">
        <colspec colwidth="1.5in" />
        <colspec colwidth="2*" /> <!-- There is a warning if 1* is used, bug in docbook/fo? -->
        <thead>
          <row>
            <entry>Function</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>[[count(&lt;expr&gt;)]]</entry>
            <entry>count of the values produced by [[&lt;expr&gt;]]</entry>
          </row>
          <row>
            <entry>[[sum(&lt;expr&gt;)]]</entry>
            <entry>sum of the values produced by [[&lt;expr&gt;]]</entry>
          </row>
          <row>
            <entry>[[min(&lt;expr&gt;)]]</entry>
            <entry>minimum of the values produced by [[&lt;expr&gt;]]</entry>
          </row>
          <row>
            <entry>[[max(&lt;expr&gt;)]]</entry>
            <entry>maximum of the values produced by [[&lt;expr&gt;]]</entry>
          </row>
          <row>
            <entry>[[mean(&lt;expr&gt;)]]</entry>
            <entry>mean of the values produced by [[&lt;expr&gt;]]</entry>
          </row>
          <row>
            <entry>[[stddev(&lt;expr&gt;)]]</entry>
            <entry>standard deviation of the values produced by [[&lt;expr&gt;]]</entry>
          </row>
          <row>
            <entry>[[variance(&lt;expr&gt;)]]</entry>
            <entry>variance of the values produced by [[&lt;expr&gt;]]</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The following functions are not aggregating functions; if their arguments has multiple values,
    then the applying the function also produces multiple values by iterating on them. </para>

    <informaltable>
      <tgroup cols="2">
        <colspec colname="fun" colwidth="2.8in" align="left"/>
        <colspec colname="desc" colwidth="2*" /> <!-- There is a warning if 1* is used, bug in docbook/fo? -->
        <spanspec spanname="category" namest="fun" nameend="desc" align="left" />
        <thead>
          <row>
            <entry>Function</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry spanname="category">``Math functions''</entry>
          </row>
          <row>
            <entry>[[sin(x), cos(x), tan(x), asin(x), acos(x), atan(x), atan2(x,y), exp(x), log(x),]]
                   [[log10(x), sqrt(x), cbrt(x), hypot(x,y), sinh(x), cosh(x), tanh(x), ]]
                   [[ceil(x), floor(x), round(x), signum(x), min(x,y), max(x,y)]]</entry>
            <entry>These functions produce the same value as the similarly named methods of
            the [[java.lang.Math]] class in Java.</entry>
          </row>
          <row>
            <entry>[[deg(x), rad(x)]]</entry>
            <entry>Conversion from radians to degrees, and from degrees to radians</entry>
          </row>
          <row>
            <entry>[[fabs(x)]]</entry>
            <entry>Absolute value of [[x]]</entry>
          </row>
          <row>
            <entry>[[rem(x,y)]]</entry>
            <entry>IEEE floating point remainder of [[x]] and [[y]]</entry>
          </row>
          <row>
            <entry spanname="category">``String functions''</entry>
          </row>
          <row>
            <entry>[[length(s)]]</entry>
            <entry>Returns the length of the string.</entry>
          </row>
          <row>
            <entry>[[contains(s, substr)]]</entry>
            <entry>Returns true if string [[s]] contains [[substr]] as substring.</entry>
          </row>
          <row>
            <entry>[[substring(s, pos, len?)]]</entry>
            <entry>Return the substring of [[s]] starting at the given position, either to the end of the string or maximum [[len]] characters.</entry>
          </row>
          <row>
            <entry>[[substringBefore(s, substr)]]</entry>
            <entry>Returns the substring of [[s]] before the first occurrence of [[substr]], or the empty string if [[s]] does not contain [[substr]].</entry>
          </row>
          <row>
            <entry>[[substringAfter(s, substr)]]</entry>
            <entry>Returns the substring of [[s]] after the first occurrence of [[substr]], or the empty string if [[s]] does not contain [[substr]].</entry>
          </row>
          <row>
            <entry>[[substringBeforeLast(s, substr)]]</entry>
            <entry>Returns the substring of [[s]] before the last occurrence of [[substr]], or the empty string if [[s]] does not contain [[substr]].</entry>
          </row>
          <row>
            <entry>[[substringAfterLast(s, substr)]]</entry>
            <entry>Returns the substring of [[s]] after the last occurrence of [[substr]], or the empty string if [[s]] does not contain [[substr]].</entry>
          </row>
          <row>
            <entry>[[startsWith(s, substr)]]</entry>
            <entry>Returns true if [[s]] begins with the substring [[substr]].</entry>
          </row>
          <row>
            <entry>[[endsWith(s, substr)]]</entry>
            <entry>Returns true if [[s]] ends with the substring [[substr]].</entry>
          </row>
          <row>
            <entry>[[tail(s, len)]]</entry>
            <entry>Returns the last [[len]] character of [[s]], or the full [[s]] if it is shorter than [[len]] characters.</entry>
          </row>
          <row>
            <entry>[[replace(s, substr, repl, startPos?)]]</entry>
            <entry>Replaces all occurrences of [[substr]] in [[s]] with the string repl.
            If [[startPos]] is given, search begins from position [[startPos]] in [[s]].</entry>
          </row>
          <row>
            <entry>[[replaceFirst(s, substr)]]</entry>
            <entry>Replaces the first occurrence of [[substr]] in [[s]] with the string [[repl]].
            If [[startPos]] is given, search begins from position [[startPos]] in [[s]].</entry>
          </row>
          <row>
            <entry>[[trim(s)]]</entry>
            <entry>Discards whitespace from the start and end of [[s]], and returns the result.</entry>
          </row>
          <row>
            <entry>[[indexOf(s, substr)]]</entry>
            <entry>Returns the position of the first occurrence of substring [[substr]] in [[s]],
            or -1 if [[s]] does not contain [[substr]].</entry>
          </row>
          <row>
            <entry>[[choose(index, s)]]</entry>
            <entry>Interprets [[s]] as a space-separated list, and returns the item at the given [[index]].
            Negative and out-of-bounds indices cause an error.</entry>
          </row>
          <row>
            <entry>[[toUpper(s)]]</entry>
            <entry>Converts [[s]] to all uppercase, and returns the result.</entry>
          </row>
          <row>
            <entry>[[toLower(s)]]</entry>
            <entry>Converts [[s]] to all lowercase, and returns the result.</entry>
          </row>
          <row>
            <entry>``Misc functions''</entry>
          </row>
          <row>
            <entry>[[select(index, ...)]]</entry>
            <entry>Returns the [[index]]th item from the rest of the argument list; numbering starts from 0.</entry>
          </row>
          <row>
            <entry>[[locate(x, ...)]]</entry>
            <entry>Returns the zero-based index of the first argument that is greater than or equal to [[x]]. If no such element,
            then it returns the number of elements (index of last element + 1). Example: [[locate(42, 0,10,20,50,100) == 3]]</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    </simplesect>

    <simplesect><title>Implicit conversions</title>
    <para>The value of an expression can be a boolean, a double, an integer, or a string.
    During the evaluation, values are converted to the expected types of functions and operators
    automatically. The rules of these conversions are:</para>

    <itemizedlist>
    <listitem><para>when a double is expected, then string values are parsed; boolean values are
    converted to 1 ([[true]]), or 0 ([[false]])</para></listitem>
    <listitem><para>when an integer is expected, then values are converted to double and are rounded</para></listitem>
    <listitem><para>when a boolean is expected, then 0 converted to [[false]], anything else to [[true]].
    String values are first converted to numeric, then to boolean.</para></listitem>
    <listitem><para>when a string is expected, then numbers are converted to their decimal notation,
    booleans are converted to "0" or "1".</para></listitem>
    </itemizedlist>

    </simplesect>

    <simplesect><title>Parsing ambiguities</title>
    <para>Expressions like ``a.b*c.d'' can be parsed as a reference to the ``d'' statistic of modules
    whose names matches the ``a.b*c'' pattern, or as the product of ``a.b'' and ``c.d''. The expression
    parser always prefers the first meaning, i.e. ``*'' and ``?'' characters are interpreted as part of
    the pattern. If you want to enter the product or conditional expression, you can add spaces around
    the operators. Patterns can not contain unquoted spaces, so the parse will be unambigous.
    </para>There is another ambiguity that arises from the use of simple names. If you use e.g. ``s''
    in an expression, it can refer a scalar or a variable. In this case the name is first tried to be
    resolved as a variable reference, and if it was unsuccessful, then as a statistic name. However
    quoted names (e.g. ``'s''') always refer to statistics.
    </simplesect>
  </sect1>

  <sect1>
    <title>Computing Scalars</title>

    <para>The ``Compute Scalars'' operation is specified by the following attributes:</para>
    <informaltable>
      <tgroup cols="2">
        <colspec colwidth="1.5in" />
        <colspec colwidth="2*" /> <!-- There is a warning if 1* is used, bug in docbook/fo? -->
        <thead>
          <row>
            <entry>Attribute</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>group</entry>
            <entry>a string expression that generates a group identifier for an input statistic</entry>
          </row>
          <row>
            <entry>value</entry>
            <entry>a numeric expression that produces the values of the new scalars</entry>
          </row>
          <row>
            <entry>name</entry>
            <entry>the name of the new scalars, may contain expressions within ${...}</entry>
          </row>
          <row>
            <entry>module</entry>
            <entry>the module of the new scalars, may contain expressions within ${...}</entry>
          </row>
          <row>
            <entry>averageReplications</entry>
            <entry>a boolean value, if true, then the computed scalars are averaged for each measurement, and add
            only the averages to the dataset</entry>
          </row>
          <row>
            <entry>computeStddev</entry>
            <entry>a boolean value, if true, then the standard deviation of the computed scalars are also added
            to the dataset</entry>
          </row>
          <row>
            <entry>computeMinMax</entry>
            <entry>a boolean value, if true, then the minimum/maximum of computed scalars are also added to the
            dataset</entry>
          </row>
          <row>
            <entry>computeConfInt</entry>
            <entry>a boolean value, if true then the half length of the symmetric confidence interval is also
            added to the dataset</entry>
          </row>
          <row>
            <entry>confIntLevel</entry>
            <entry>a number between 0 and 1, the confidence level of the computed confidence interval</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
    The generation of the scalars follows the following steps:
    <orderedlist>
      <listitem><para>Group input statistics by their run. The computation of scalars is performed in each
      run independently. You can not combine the statistics of different runs, other than computing
      the averages described in step 4.</para></listitem>

      <listitem><para>Within each run, group the input statistics further by their group identifier.
        The group identifier of a statistic is computed by evaluating the ``group'' expression.
        The following variables can be used in the expression to access the fields of the current statistic:</para>
        <itemizedlist>
        <listitem><para>[[name]]: the name of the statistic</para></listitem>
        <listitem><para>[[module]]: the module that generated the statistic</para></listitem>
        <listitem><para>[[value]]: the value of the statistics if it is a scalar, otherwise NaN</para></listitem>
        <listitem><para>[[run]]: the name of the run in which the statistics was generated</para></listitem>
        <listitem><para>[[configname]], [[datetime]], [[experiment]], [[measurement]], and other attributes of the run</para></listitem>
        </itemizedlist>
        <para>The group identifier will be available in Step 3 as the [[group]] variable.
        The ``group'' expression is optional, by default each scalar belongs to the same group.
        </para>
      </listitem>

      <listitem>
        <para>Within each group, evaluate the ``value'' expression. The evaluation can produce multiple values.
        For each value generate a name and a module by evaluating the ``name'' and ``module'' expressions.
        The ``value'', ``name'', and ``module'' expressions can refer to the [[group]] variable, and to any variable
        that is defined in the ``group'' expression and is constant within a group. The ``name'' and ``module''
        expressions can also refer to variables defined in the ``value'' expression.
        </para>
      </listitem>

      <listitem><para>If the ``averageReplications'' field is false, then the computation produces the
      scalars whose modules and values were computed in Step 3. Otherwise the values that belongs to the
      same module and to the same measurement, and has the same name are collected, and their mean is computed.
      If requested, then standard deviation, minimum, maximum, and confidence interval of the mean is also be computed.
      The name of these additinal scalars will be [[scalar:stddev]], [[scalar:min]], [[scalar:max]], [[scalar:confint]],
      where [[scalar]] is the name of mean as specified in the ``name'' field of the computation.</para>
      <para>A new run identifier also generated to refer to the set of runs from which the average was computed.
      This run identifier has the form [[runs-xxxxx]], where [[xxxxx]] is a hash computed from the identifiers of the members.
      The new run will have the attributes that has the same value in the individual runs.
      </para>
      </listitem>
    </orderedlist>
    </para>
  </sect1>
</appendix>
