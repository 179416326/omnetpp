<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="launcher">

  <sect1>
    <title>Running a Simulation</title>
    <para>
      In previous versions of OMNeT++, executing a simulation or carrying out experiments
      was done by manually launching the executable file from the windowing environment or
      from a command line shell. Experiments that needed several runs with different
      parameters required external scripts to be written and executed. The new version of
      the OMNeT++ IDE allows for running simulations and simulation batches directly from
      the IDE.
    </para>
    <sect2>
      <title>Creating launch configuration</title>
      <para>
        OMNeT++ IDE adds a new Eclipse launch configuration type that supports launching
        simulation executables. This launch type, OMNeT++ Simulation, is available from
        the Run dialog. To create a new run configuration, select Open Run Dialog... from
        the Run menu. A dialog appears, with the possible launch types on the left.
         Select OMNeT++ Simulation, click the New launch configuration icon, then enter a
        configuration name at the top of the dialog form that appears.
      </para>
      <picture file="pictures/Launch-RunDialog.png">The Simulation Launcher</picture>
      <para>
        The main tab of the configuration dialog was designed to make the launching of
        simulation as easy as possible. The only required field is the simulation program,
        all others have defaults. If you only select the simulation program, it will run
        Run 0 of the first configuration from the omnetpp.ini file in the working
        directory.
      </para>
      <tip>
        Hover your mouse above the controls in this dialog and you will receive tooltip
        help for the particular control.
      </tip>
      <itemizedlist>
        <listitem>
          <para>
            Working directory: set it to your working directory. Several of the below
            entries are treated as relative to this directory. Changing the working
            directory invalidates all previously selected entries in other fields of the
            dialog.
          </para>
        </listitem>
        <listitem>
          <para>
            Simulation program: you must set the name of the simulation executable here.
            This path is relative to the workspace root. You may use the
            <guibutton>Browse...</guibutton>
            button to select the executable directly.
          </para>
          <warning>
            If you want to debug your simulation, be sure to select the 'debug' version of
            your executable here.
          </warning>
        </listitem>
        <listitem>
          <para>
            Dynamic libraries: A simulation may load additional DLLs or shared libraries
            before execution. The
            <guibutton>Browse</guibutton>
            button is available to select one or more files (use
            <keycap>CTRL</keycap>
            click for multiple selection). This option can be used to load simulation code
            (i.e. simple modules), user interface libraries, or other extension libraries
            (scheduler, output file managers, etc)
          </para>
          <warning>
            You must ensure that the executable part has access to the shared library. On
            Windows you must set the PATH, on Linux and Mac you must set the
            LD_LIBRARY_PATH to point to the directory where the DLLs or shared libraries
            are located. You can set these variables either globally or in the Environment
            tab in the Launcher Configuration Dialog.
          </warning>
        </listitem>
        <listitem>
          <para>
            NED Source Path: The directories where the NED files are read from. (Relative
            to the first selected INI file.) If left empty, calculates the path from the
            project settings.
            <tip>
              The variable ${ned_path} refers to the automatically calculated path. i.e.
              If you want to add additional NED folders to the automatically calculated
              list, use the ${ned_path:/my_project_path}:/my/additional/path syntax.
            </tip>
          </para>
        </listitem>

        <listitem>
          <para>
            Initialization file(s): You should specify an INI file(s) that will be used to
            launch the simulation. If no filename is specified here, omnetpp.ini will be
            assumed in the current working directory. Specifying more than one file simply
            loads all those files in the specified order.
          </para>
        </listitem>
        <listitem>
          <para>
            Configuration name: Once you specified a legal INI file, the box will present
            all of the Config and Scenario sections in that file. In addition it will
            display the description of that section and the info that which Config section
            is extended by this section). You may select which Configuration should be
            launched.
            <note>
              The working directory and the INI file must contain valid entries before
              trying to set this option.
            </note>
          </para>
        </listitem>
        <listitem>
          <para>
            Run number: It is possible to specify which run number(s) must be executed for
            the simulation. If the executable name and the INI file was already selected
            and a Scenario was specified for the configuration name, it is possible to
            hover above the field to get more info about the possible run numbers. You can
            use comma and .. to separate the run numbers; for example, 1,2,5..9,20
            corresponds to run numbers 1,2,5,6,7,8,9,20. Entering a single asterisk (*)
            corresponds to all run numbers. Running several simulations in this manner is
            called batch execution. If you do not specify anything here, Run 0 will be
            executed.
          </para>
          <note>
            Batch execution is possible only if you run your program in command line
            environment. (simulation was built to support command line environment
            (Cmdenv) and the User interface selection is 'Command line'. (see User
            interface selection)
          </note>
        </listitem>
        <listitem>
          <para>
            Processes to run in parallel: with batch execution, it is possible to tell the
            launcher to keep two or more simulations running at a time. This way you can
            take advantage of multiple CPUs or CPU cores.
          </para>
          <note>
            This is usually an easier and more efficient way to exploit multiprocessing
            power than parallel simulation (PDES).
          </note>
          <warning>
            Use this option carefully, only if your simulation is CPU-limited, and you
            have enough physical RAM to support all of the processes at the same time. Do
            not set it higher than the number of physical processors you have in your
            machine.
          </warning>
        </listitem>
        <listitem>
          <para>
            User interface: You can specify which UI environment should be used during
            execution, currently command line (Cmdenv) and Tcl/Tk (Tkenv) is supported.
            The executable must be linked with the correct UI library or the UI should be
            loaded dynamically.
          </para>
          <note>
            Batch execution and progress feedback during execution is supported only for
            command line environment.
          </note>
        </listitem>
        <listitem>
          <para>
            Additional arguments: any other command line argument can be specified here
            and will be passed to the simulation process.
          </para>
        </listitem>
        <listitem>
          <para>
            Show Debug View on Launch: convenience function to open the debug view on
            simulation execution. Debug View allows you to see and terminate the processes
            you have launched and allows to switch between their output in the console
            view.
          </para>
        </listitem>
      </itemizedlist>
      <sect3>
        <title>Related command line arguments</title>
        <para>
          Most settings in the dialog simply translate to command-line options to the
          simulation executable. This is summarized in the following list:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Dynamically loaded libraries: maps to multiple “-l &lt;library&gt;” options
            </para>
          </listitem>
          <listitem>
            <para>
              Initialization files: maps to multiple “-f &lt;inifile&gt;” options
            </para>
          </listitem>
          <listitem>
            <para>Configuration name: adds a “-c &lt;configname&gt;” option</para>
          </listitem>
          <listitem>
            <para>Run number:adds a “-r &lt;runnumber&gt;” option</para>
          </listitem>
          <listitem>
            <para>User interface: adds a “-u &lt;userinterface&gt;” option</para>
          </listitem>
        </itemizedlist>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Batch Execution</title>
    <para>
      In previous versions of OMNeT++ to run a simulation several times with different
      parameters, you had to create an external script that created an INI file for each
      run and started the simulation with the specified file. In OMNeT++ 4.0 it is no
      longer needed. The vastly improved INI file syntax allows you to specify loops for
      specific parameters so you no longer need separate INI files for each run. In
      addition the IDE itself supports starting your simulation several times.
    </para>
    <picture file="pictures/Launch-BatchRun.png">
      Iteration variable in the INI file
    </picture>
    <note>Batch running is supported only in command line environment.</note>
    <para>
      If you create a Configuration with one or more iteration variables, you will be able
      to run your simulations using each possible value of these variables. Practically
      the IDE creates the cartesian product from these variables and assigns a run number
      to each product. It is possible to execute one, more or all runs of the simulation
      by specifying the
      <literal>Run number</literal>
      field in the Run Dialog. You can specify a single number (e.g. 3), and a combination
      of more numbers (e.g. 2,3,6,7..11) or all run numbers (using *).
    </para>
    <tip>
      If you already have specified your executable and the configuration which should be
      run, you may try to hover over the
      <literal>Run Number</literal>
      field. This will give you a description of the possible runs and how they are
      associated with the iteration variable values.
    </tip>
    <picture file="pictures/Launch-BatchRun2.png">
      Iteration variable in the INI file
    </picture>
    <para>
      If you have a multi-core or multi-processor system and have ample of memory, you may
      try to set the
      <literal>Processes to run parallel</literal>
      field to a higher number. This will allow the IDE to start more simulation process
      in parallel resulting in a much lower overall simulation time for the whole batch.
    </para>
    <warning>
      Be aware that you need enough memory to run all these processes in parallel. We
      recommend to use this feature only if your simulation is CPU bound. If you do not
      have enough memory your operating system may start to use virtual memory
      dramatically decreasing the overall performance.
    </warning>
  </sect1>

  <sect1>
    <title>Debugging a Simulation</title>
    <para>
      The OMNeT++ IDE integrates with the CDT (C/C++ Development Tooling). If you want to
      debug your application you have to do it by starting it from the
      <guimenuitem>Run|Open Debug Dialog</guimenuitem>
      . You should launch your debugging session exactly the same way you were running it.
    </para>
    <note>
      If you have problems with starting the debug session check whether:
      <itemizedlist>
        <listitem>your executable is built with debug info</listitem>
        <listitem>
          you can run the same executable without problem (using the same launch
          configuration)
        </listitem>
        <listitem>
          the Debugger type is set properly on the Debugger tab of the Launch dialog.
        </listitem>
      </itemizedlist>
    </note>
    <warning>
      Batch (and parallel) execution is not possible in this launch type, so you may
      specify only a single run number.
    </warning>
  </sect1>

  <sect1>
    <title>Controlling the execution and progress reporting</title>
    <para>
      After starting a simulation process or simulation batch we can keep track of the
      started processes in the Debug View. To open the Debug View automatically during
      launch, check the Show Debug View on Launch in the run configuration dialog, or
      select
      <guimenuitem>Window / Show View... / Other... / Debug / Debug</guimenuitem>
      . Select a process and click the terminate button to stop a specific simulation run
      or use the context menu for more options to control the process execution.  
    </para>
    <picture file="pictures/Launch-DebugView.png">Debug View</picture>
    <tip>
      Place the debug view to a different tab group than the console so you will be able
      to switch between the process outputs and see the process list at the same time.
    </tip>
    <note>
      You can terminate all currently running processes by selecting the root of the
      launch. This will not cancel the whole batch only the currently active processes. If
      you want to cancel the whole batch, open the Progress View and cancel the simulation
      batch there.
    </note>
    <para>
      Clicking on the process in the Debug View switches to the output of that process in
      the Console view. The process may ask user input via the console too. Switch to the
      appropriate console and enter the requested paameters.
    </para>
    <picture file="pictures/Launch-ConsoleView.png">
      Displaying the output of a simulation process in Console View
    </picture>
    <note>
      By default the Console View automatically activates when a process is writing to it.
      If you are running several processes in parallel this might be an annoying behavior
      and might prevent you to switch to the Progress View. You can switch off the auto
      activation by disabling the
      <guibutton>Show Console When Standard Out/Error Changes</guibutton>
      in the Console View toolbar.
    </note>

    <sect3>
    <title>Progress reporting</title>
      <para>
        If you have executed the simulation in the command line environment, you can
        monitor the progress of the simulation in the Progress View. See the status line
        for the overall progress indicator and click on it to open the detailed progress
        view. It is possible to terminate the whole batch by clicking on the cancel button
        in the Progress View.
      </para>
      <picture file="pictures/Launch-ProgressView.png">
        Progress reporting running four processes parallel
      </picture>
      <note>
        When Progress View displays "Waiting for user input" the simulation is waiting for
        the user. Switch to the appropriate console and provide the requested input for
        the simulation.
      </note>
      <note>
        By default cmdenv reports progress only on every 100000th event. If you feel that
        the progress should be more often reported set the
        <literal>cmdenv-status-frequency</literal>
        option in your INI file to a lower value.
      </note>
    </sect3>
  </sect1>
</chapter>
