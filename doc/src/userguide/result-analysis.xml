<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="result-anal" xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Analyzing the Results</title>

  <sect1>
    <title>Overview</title>

    <para>[from feature-list.doc:]</para>

    <para>
      Scave is the result analysis tool of OMNeT++, and its task is to help the user
      process and visualize simulation results saved into vector and scalar files. Scave
      is designed so that the user can work equally well on the output of a single
      simulation run (one or two files) and the result of simulation batches (which may be
      several hundred files, possibly in multiple directories). Ad-hoc browsing of the
      data is supported just as well as systematic and repeatable processing. The latter
      means that all processing and charts are stored as "recipes"; for example, if
      simulations need to be re-run due to a model bug or misconfiguration, existing
      charts need not be drawn all over again, but simply replacing the old result files
      with the new ones will result in the charts being automatically displayed with the
      new data.
    </para>
    
    <para>[from Gabor:]</para>

    <para>
      While it might be powerful in facilitating quick debugging to view how simulations
      work in the Tkenv environment, in most cases the result of the final simulations
      will be recorded as scalar values (e.g. average load: 75%), or vector values (e.g.
      queue length over time) or histograms. These values will be recorded at the end of
      the simulation as well as during runtime and provide real insight into the scenario
      you are looking at.
    </para>

    <para>[from Gabor:]</para>

    <para>
      In OMNEST/OMNeT++ 4.0, statistical analysis becomes a lot more powerful. Not only is
      the statistical analysis tool integrated into the Eclipse environment, your settings
      -- your recipe for finding results from the raw data -- will be recorded in analysis
      files (.anf) and become instantly reproducible. Even if you need to replace some of
      the underlying data in your experiments, you do not need to re-develop the recipe
      (filters, operations, graphs) to squeeze the results you want out of the system.
    </para>

    <para>[from the simutools2008 paper:]</para>

    <para>
      Analyzing the simulation result is a lengthy and time consuming process. In most
      cases the user wants to see the same type of data for each run of the simulation or
      display the same graphs for different modules in the model, so automation is very
      important. (The user does not want to repeat the steps of re-creating charts every
      time simulations have to be re-run for some reason.) The lack of automation support
      drives many users away from existing GUI analysis tools, and forces them to write
      scripts.
    </para>

    <para>
      OMNeT++ solves this by making result analysis rule-based. Simulations and series of
      simulations produce various result files. The user selects the input of the analysis
      by specifying file names or file name patterns (e.g. "adhoc-*.vec"). Data of
      interest can be selected into datasets by further pattern rules. The user completes
      datasets by adding various processing, filtering and charting steps, all using the
      GUI (Figure 7). Whenever the underlying files or their contents change, dataset
      contents and charts are recalculated. The editor only saves the "recipe" and not the
      actual numbers, so when simulations are re-run and so result files get replaced,
      charts are automatically up-to-date. Data in result files are tagged with meta
      information: experiment, measurement and replication labels are added to the result
      files to make the filtering process easy. It is possible to create very
      sophisticated filtering rules, for example, all 802.11 retry counts of host[5..10]
      in experiment X, averaged over replications. In addition datasets can use other
      datasets as their input so datasets can build on each other.
    </para>

  </sect1>

  <sect1>
    <title>Creating Analysis Files</title>
    
    <para>
      To create a new analysis file choose
      <guimenuitem>File|New|Analysis File</guimenuitem> from the menu.
      Select the folder the new file created in and enter file name.
      Press <guibutton>Finish</guibutton> and an empty analysis file is created
      and opened.
    </para>
    
    <picture file="pictures/ANF-NewAnalysisFileDialog.png">New Analysis File dialog</picture>
    
    <para>
      There is a quick way to create an analysis file for a result file.
      Just double click on the result file in the Navigator View to open the
      New Analysis File dialog. The folder and file name is filled in according to
      the location and name of the result file. Press <guibutton>Finish</guibutton>
      and a new analysis file created containing the vector and scalar files whose
      names corresponds to the result file. If the name of the result file contained
      a numeric suffix (e.g. aloha-10.vec), then all files with the same prefix added
      the the analysis file (i.e. aloha-*.vec and aloha-*.sca).
    </para>
    
    <tip>
      <para>
        If the analysis file already exists, double clicking on the result file will open
        it.
      </para>
    </tip>

  </sect1>

  <sect1>
    <title>Using the Analysis Editor</title>

    <para>
      Scave is implemented as a multi-page editor. What the editor edits is the "recipe":
      what result files to take as inputs, what data to select from them, what (optional)
      processing to apply, and what kind of charts to create from them. The pages (tabs)
      of the editor roughly correspond to these steps. You will see that Scave is much
      more than just a union of the OMNeT++ 3.x Scalars and Plove tools.
    </para>
    
    <sect2>
      <title>Input files</title>
      
      <sect3>
        <title>Selecting input files</title>
        
        <para>
          The first page displays the result files that serve as input to the analysis. The
          upper half specifies what files to select, by explicit filenames or by wildcards.
          New input files can be added to the analysis by dragging vector and scalar files
          from the Outline View, or by opening dialogs with the <guibutton>Add File...</guibutton> or
          <guibutton>Wildcard...</guibutton>
          buttons. If the file name is absolute (starts with '/') it is interpreted relative
          to the workspace root, otherwise it is relative to the folder of the analysis
          file.
        </para>
  
        <picture file="pictures/ANF-InputsPage.png">
          Specifying input files for data analysis
        </picture>
  
        <para>
          The input files are loaded when the analysis file is opened. When the file changed
          on the disk it is reloaded automatically when the workspace is refreshed. (It done
          by Eclipse if "General|Workspace|Refresh automatically" option is turned on in the
          Preferences.) Vector files are not loaded directly, but an index file created and
          the vectors data (name, module, statistics...) are loaded from the index file.
          The index files are generated during the simulation, but can be safely deleted
          without loss of information. If the index file is missing or the vector file was
          modified then the IDE rebuilds the index in the background.
        </para>
        
        <tip>The Progress View displays the progress of the indexing process.</tip>
        
        <para>
          The lower half shows what files actually matched the input specification, and what
          runs they contain. Note that OMNeT++ 4.0 result files contain a unique run ID and
          several metadata annotations in addition to the actual recorded data. The third
          tree organizes simulation runs runs according to their
          experiment-measurement-replication labels.
        </para>
  
        <para>
          The underlying assumption is that users will organize their simulation-based
          research into various /experiments/. An experiment will consist of several
          /measurements/, which are typically (but not necessarily) simulations done with
          the same model but with different parameter settings; that is, the user will
          explore the parameter space with several simulation runs. And, to gain statistical
          confidence in the results, each measurement will be possibly repeated several
          times, with different random number seeds. It is easy to set up such scenarios
          with the improved ini files of OMNeT++ 4.0, and then the
          experiment-measurement-replication labels will be assigned more-or-less
          automatically -- please refer to the chapter "Configuring simulations TBD check"
          in the manual) for more discussion.
        </para>

      </sect3>

      <para>
        The second page of the Analysis editor displays results (vectors, scalars and
        histograms) from all files in tables, and lets the user browse them. Results can
        be sorted and filtered. Simple filtering is possible with combo boxes, or when
        that's not enough, the user can write arbitrarily complex filters using a generic
        pattern matching expression language. Selected or filtered data can be immediately
        plotted, or remembered in named datasets for further processing.
      </para>
      
      <tip>
        In the advanced filter text field there is a Contest Assist available. Press
        Ctrl+Space to get a list of suggestions appropriate at the cursor position.
      </tip>
      
      <picture file="pictures/ANF-BrowseDataPage.png">
        Browsing vector and scalar data generated by the simulation
      </picture>

      <para>
        To select the table columns to be displayed, open <guimenuitem>Choose table column...</guimenuitem>
        from the context menu. The settings are persisted and applied in each subsequently opened editor.
        The table rows can be sorted by clicking on the column in the table header.
      </para>
      
      <para>
        Selected data items can be displayed on a chart by selecting <guimenuitem>Plot</guimenuitem>
        from the context menu. The chart is not added to the analysis file, so you can explore the
        data by opening the chart this way and closing the chart page without making the editor dirty.
        If you want to save such a temporary chart in the analysis, choose
        <guimenuitem>Convert to dataset...</guimenuitem> from the context menu of the chart. (Also
        available from the toolbar.)
      </para>
      
      <para>
        The selected vector's data can also be displayed in a tabular form. Open the
        Output Vector view (<guimenuitem>Window|Show View|Output Vector</guimenuitem>) and select
        the vector to be displayed from the table.
      </para>
      
    </sect2>
    
    <sect2>
    
      <title>Datasets</title>
      

      <sect3>
        <title>Overview</title>
        
        <para>
          The third page displays the datasets and charts created during the analysis.
          Datasets are filtered and processed input data. Each dataset contains a list of
          processing steps.  
        </para>
        
        <tip>
          You can browse the dataset's content after the selected processing applied in
          the Dataset View.
        </tip>
        
      <picture file="pictures/ANF-DatasetsPage.png">Defining datasets to be analyzed</picture>
        
      </sect3>
      
      <sect3>
        <title>Editing datasets</title>
        
        <para>
          Usual tree editing operations work on the Dataset tree. New elements can be
          added by dragging elements from the toolbar on the right of the page to the
          appropriate place of the tree. Alternatively you can select the parent node and
          press the button on the toolbar. Existing element can be edited by selecting the
          element and editing its properties on the property sheet or opening an item specific
          edit dialog by choosing <guimenuitem>Properties...</guimenuitem> from the context menu.
        </para>
        
        <tip>
          Datasets can be opened on a separate page by double clicking on them. It is more
          comfortable to edit the tree on this page.
        </tip>
  
        <para>
          Filters can be applied to the data by adding Apply/Compute items to the dataset.
          The data items to which the filter should be applied can be selected by adding
          Select/Deselect children to the processing node. By default the filter applied
          to each data item. The difference between Apply and Compute is that Apply will
          remove its input from the dataset, while Compute keeps the original data too.
        </para>
        
        <para>
          Processing steps enclosed into a Group node has effect only in the group. This
          was you can create branches in the dataset.
        </para>
        
        <para>
          Charts can be inserted to display data. The data items to be displayed can be
          selected by adding Select/Deselect children to the chart node. By default the
          chart displays all items. There are lots of customization can be applied to
          charts including setting titles, colors, adding legends, grid lines, etc. See
          the next section for details.
        </para>
        
      </sect3>
      
      <sect3>
        <title>Export</title>
        
        <para>
          The dataset's content at the selected item can be saved into CSV, Octave
          text or Matlab script files.
        </para>
        
        <para>
          Scalars can be processed before written to the file. TODO: details.
        </para>
        
        <formalpara>
          <title>CSV</title>
          <para>
            The CSV file contains an optional header followed by vector's data or
            groups of scalars. If multiple vectors are exported, each vector is written
            into a separate file.
          </para>
        </formalpara>
        
        <formalpara>
          <title>Matlab</title>
          <para>
            The data is exported as a Matlab script file. It can be loaded into Matlab/Octave
            with the source() function. TODO: format 
          </para>
        </formalpara>
        
        <formalpara>
          <title>Octave</title>
          <para>
            The data is exported as an Octave text file. This format can be loaded into the
            <ulink url="http:://www.r-project.org">R</ulink>
            statistical data analysis tool as well. Vectors are saved as structures
            containing two array fields for the x and y values. Scalars are saved as
            structures containing an array for each each column of their tables.
          </para>
        </formalpara>
        
        <note><para>Histograms can not be exported yet.</para></note>
        
      </sect3>
      
      <sect3>
        <title>Chart sheets</title>
        
        <para>
          The lower part of the Dataset page shows the chart sheets.
          A chart sheet is a logical grouping of charts that can be 
          displayed on one page. The chart sheet page can be opened 
          by double clicking on the chart sheet node in the dataset 
          tree.          
        </para>
        
        <picture name="ANF-ChartSheetPage.png"/>
        
        <para>
          There is a chart sheet named "Default sheet".
          New charts automatically added to the default chart sheet.
          New chart sheet can be created by pressing the
          <icon name="ChartSheet.gif"/> button.
          Charts can be moved between chart sheets by drag and drop.
        </para>
        
      </sect3>
      
    </sect2>
    
    <sect2>
      <title>Charts</title>
      
      <sect3>
        <title>Overview</title>
        
        <para>
          Charts can be saved into the analysis file. The result analysis tool supports
          bar charts, line charts, histogram charts and scatter charts. Charts are
          interactive, they can be zoomed, scrolled, and a tooltip gives information about
          the data items.
        </para>
        
        <para>
          Charts can be customized. Titles, legend, grid, background, etc. 
        </para>
      </sect3>
      
      <sect3>
        <title>Creating charts</title>
        
        <para>TODO</para>
        
      </sect3>
      
      <sect3>
        <title>Editing charts</title>
        
        <para>
          You can open a dialog for editing charts from the context menu. The dialog is
          divided into several pages. The pages can be opened directly from the context menu.
          When you select a line and choose <guimenuitem>Lines...</guimenuitem> from the menu,
          you can edit the properties of the selected line.
        </para>

        <para>
          You can also use the Properties view to edit the chart.
        </para>
        
        <para>
          TODO: list of common properties
        </para>
        
      </sect3>
      
      <sect3><title>Zooming and panning</title>
        <para>
          Charts has two mouse mode. In Pan mode the charts can be srolled by dragging it or
          using the mouse wheel. In Zoom mode the chart can be zoomed in/out be clicking with the
          mouse, using the mouse wheel or selecting a rectangular area. The toolbar icons
          <icon name="hand.gif"/> and <icon name="zoom.png"/>
          switch between Pan and Zoom mode.
        </para>
      </sect3>
      
      <sect3><title>Tooltip</title>
        <para>
          When the mouse is hovered over a data point the appearing tooltip shows line labels
          and the values of the points near to the cursor. The names of all lines can be
          displayed by hovering over the
          <icon name="legend.gif"/> button.
        </para>  
      </sect3>
      
      <sect3><title>Copy to clipboard</title>
        <para>
          The chart can be copied to the clipboard as a bitmap image by selecting
          <guimenuitem>Copy to Clipboard</guimenuitem> from the context menu.
          The bitmap has the same size as the chart on the screen.
        </para>
      </sect3>
      
      <sect3><title>Bar charts</title>
        <para>
          Bar charts are displaying scalar data as grouped vertical bars. The value of a
          bar can be an averaged value of scalars.
        </para>
        <picture file="pictures/ANF-ScalarChart.png"/>
        <para>
          The scalar chart's content can be specified on the Content tab of their
          Edit dialog. By default the scalars are grouped by their module name and
          averaged by replications.
        </para>
        <picture file="pictures/ANF-ScalarChartEditDialog.png"/>
      </sect3>
      
      <sect3>
        <title>Line charts</title>
        <para>
          Line charts can be used to display output vectors in a graphical format.
        </para>
        <picture file="pictures/ANF-VectorChart.png"/>
        <para>
          Line names identifies lines on the legend, property sheets and edit dialogs.
          They are formed automatically from the file, run, module name, vector name, and
          experiment/measurement/replication of the vector omitting those fields that does
          not change in the dataset. Line names can be manually set on the Main page of
          the Properties dialog. These macros can be used to access attributes of the
          vectors: {file}, {run}, {module}, {name}, {experiment}, {measurement},
          {replication}. There is a content assist to help entering these names.
        </para>
        <para>
          The following properties can be set for each line separately:
          <variablelist>
            <varlistentry><term>Display line</term>
              <listitem><para>
                Lines can be hidden by setting this property to false. (Default is true.)
              </para></listitem>
            </varlistentry>
            <varlistentry><term>Color</term>
              <listitem><para>The color of the line and symbols.</para></listitem>
            </varlistentry>
            <varlistentry><term>Symbol type</term>
              <listitem><para>
                The symbol displayed at the data points: cross, diamond, dot, plus, square, triangle, none.
              </para></listitem>
            </varlistentry>
            <varlistentry><term>Symbol size</term>
              <listitem><para>
                The size of the symbol displayed at the data points. (Default is 4.)
              </para></listitem>
            </varlistentry>
            <varlistentry><term>Line type</term>
              <listitem><para>
                The line connecting the data points: linear, pins, dots, sample hold, backward sample
                hold, none. (Default line type are set according to the interpolation mode of the
                vector.)
              </para></listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
          Filtering operations can be applied to the dataset of chart by selecting
          <guimenuitem>Apply</guimenuitem> or <guimenuitem>Compute</guimenuitem> from the 
          context menu.
        </para>
        <para>
          Line charts are synchronized with Output Vector and Dataset views.
          Select a data point and see that in the Output Vector and Dataset view
          the data point and the vector containing it is selected.
        </para>
      </sect3>
      
      <sect3>
        <title>Histogram charts</title>
        <para>Histogram charts can display data of histograms. They support three view mode:
        <variablelist>
          <varlistentry><term>Count</term>
            <listitem><para>The chart shows the recorded counts of data points in each cell.</para></listitem>
          </varlistentry>
          <varlistentry><term>Probability density</term>
            <listitem><para>
              The chart shows the probability density function computed from the histogram data.
            </para></listitem>
          </varlistentry>
          <varlistentry><term>Cumulative density</term>
            <listitem><para>
              The chart shows the cumulative density function computed from the histogram data.
            </para></listitem>
          </varlistentry>
        </variablelist>
        </para>
        <picture file="pictures/ANF-HistogramChart.png"/>
        <tip>
          <para>
            When drawing several histograms to one chart, set the "Bar type" property to
            Outline. Thus the histograms do not cover each other.
          </para>
        </tip>
        
      </sect3>
      
      <sect3>
        <title>Scatter charts</title>
        <para>
          Scatter charts can be created from both scalar and vector data.
        </para>
        <formalpara><title>Scalars</title>
          <para>
            A scalar is chosen for the X coordinate of points.
            The y coordinates are get from the other scalars that created in the same run.
          </para>
        </formalpara>
        <formalpara><title>Vectors</title>
          <para>
            A vector is chosen for the X coordinate of points. The y coordinates are get
            from the other vectors that created in the same run. The vector values having
            the same time are paired to give a point on the scatter chart.
          </para>
        </formalpara>
        <para>TODO: describe iso lines</para>
      </sect3>
    
    </sect2>
  
  </sect1>

  <sect1>
    <title>Associated Views</title>
    
    <sect2>
      <title>Outline View</title>
      <picture file="pictures/ANF-OutlineView.png">Outline View of the analysis</picture>
      <para>
        The Outline View allows an overview of the current analysis. Clicking on an
        element will select the corresponding element in the current editor. Tree editing
        operations also work in this view.
      </para>
    </sect2>
  
    <sect2>
      <title>Properties View</title>
      <picture file="pictures/ANF-PropertiesView.png">Properties View showing chart properties</picture>
      <para>
        The properties view displays the properties of the selected dataset, processing node
        and chart. Font and color properties can be edited as text or by opening dialogs.
        Text fields that have a bulb on the left side have a context assist. 
        Press <keycap>Ctrl+Space</keycap> to activate.   
      </para>
    </sect2>
    
    <sect2>
      <title>Output Vector View</title>
      <picture file="pictures/ANF-OutputVectorView.png"/>
      <para>
        The Output Vector View shows the content of the selected vector. It displays the
        serial number, simulation time and value of the data points. When event numbers
        are recorded during the simulation, they are also displayed. Large output files
        are handled efficiently, only the visible part of the vector is read from the
        disk. Vectors that are the result of some computation are saved into temporary
        files.
      </para>
      <para>
        To navigate to a specific line use the scroll bar or the menu of the view:
        <picture file="pictures/ANF-OutputVectorViewMenu.png"/>
      </para>
    </sect2>
  
    <sect2>
      <title>Dataset View</title>
      <para>
        The Dataset View displays the dataset's content at the selected dataset item. It is
        divided into three table similar to that are on the Browse Data page. The tables can be
        selected by the
        <icon name="ShowScalars.gif"/><icon name="ShowVectors.gif"/><icon name="ShowHistograms.gif"/>
         icons. There is also a tool button (<icon name="filter.png"/>) to show or hide the filter.
      </para>
      <picture file="pictures/ANF-DatasetView.png">Dataset View</picture>
    </sect2>
    
  </sect1>
  
  <sect1>
    <title>Tools</title>
    
    <para>
      You can work with scalar and vector files with the command line tool
      <application>scavetool</application>. It let you index vector files, apply processing operations,
      and save the result in several formats. If you start it without arguments it will print its usage
      to the console.
    </para>
    <!--
    <xi:include href="chart-properties.xml" parse="xml" xpointer="xpointer(//para[@id='chart-properties'])"/>
    <xi:include href="chart-properties.xml" parse="xml" xpointer="xpointer(//para[@id='linechart-properties'])"/>
    -->
  </sect1>

</chapter>
