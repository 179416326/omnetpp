== Mac OS X 

=== Supported Releases

This chapter provides additional information for installing @OMNETPP@ on
Mac OS X.

The following releases are covered:

* Mac OS X 10.6 ('Snow Leopard')
* Mac OS X 10.7 ('Lion')

They were tested on the following architectures:

* Intel 32/64-bit

=== Installing the Prerequisite Packages

Mac OS X 10.6 (Snow Leopard)

 * Install Xcode 3.2.x on your machine. It can be downloaded from
   http://developer.apple.com/xcode/.

Mac OS X 10.7 (Lion)

 * Install Xcode 4.3 or later on your machine. It can be downloaded from the App Store.
 * You must activate command line support by starting XCode and installing 
   'Command Line Tools' from 'Xcode > Preferences > Downloads > Components'.
 * Install the Java Runtime from http://support.apple.com/kb/DL1421 , because
   OS X Lion does not provide it by default.


Installing additional packages will enable more functionality in @OMNETPP@; see
the 'Additional packages' section at the end of this chapter.


=== Downloading and Unpacking @OMNETPP@

Download @OMNETPP@ from {DOWNLOADSITE}. Make sure you select to download
the generic archive, `@omnetpp@-@version@-src.tgz`.

Copy the archive to the directory where you want to install it. This is usually
your home directory, `/Users/<you>`. Open a terminal, and extract the archive
using the following command:

    $ tar zxvf @omnetpp@-@version@-src.tgz

A subdirectory called `@omnetpp@-@version@` will be created, containing the simulator
files.

Alternatively, you can also unpack the archive using Finder.

[NOTE]
===============================================================
The Terminal can be found in the Applications / Utilities
folder.
// do NOT make this a single line, or asciidoc goes berzerk!
===============================================================


=== Environment Variables

@OMNETPP@ needs its `bin/` directory to be in the path. To add `bin/` to
`PATH` temporarily (in the current shell only), change into the @OMNETPP@
directory and source the `setenv` script:

  $ cd @omnetpp@-@version@
  $ . setenv

To set the environment variables permanently, edit `.bashrc` in your home
directory. Use your favourite text editor to edit `.bashrc`, for example TextEdit:

  $ touch ~/.bashrc
  $ open -e ~/.bashrc

[NOTE]
===============================================================
`touch` is needed because `open -e` only opens existing files. Alternatively,
you can use the terminal-based 'pico' editor (`pico ~/.bashrc`)
===============================================================

Add the following line at the end of the file, then save it:

  export PATH=$PATH:$HOME/@omnetpp@-@version@/bin

You need to close and re-open the terminal for the changes to take effect.

Alternatively, you can put the above line into `~/.bash_profile`, but then
you need to log out and log in again for the changes to take effect.

[NOTE]
===============================================================
If you use a shell other than the default one, 'bash', consult the man page
of that shell to find out which startup file to edit, and how to set and
export variables.
===============================================================


=== Configuring and Building @OMNETPP@

Check `configure.user` to make sure it contains the settings you need.
In most cases you don't need to change anything in it.


In the top-level @OMNETPP@ directory, type:

  $ ./configure

The `configure` script detects installed software and configuration of your
system. It writes the results into the `Makefile.inc` file, which will be
read by the makefiles during the build process.

Normally, the `configure` script needs to be running under the graphical
environment in order to test for `wish`, the Tcl/Tk shell. If you are
logged in via an ssh session or you want to compile @OMNETPP@ without Tcl/Tk,
use the command

  $ NO_TCL=1 ./configure

instead of plain `./configure`.

[NOTE]
===============================================================
If there is an error during `configure`, the output may give hints about what
went wrong. Scroll up to see the messages. (You may need to increase
the scrollback buffer size of the terminal and re-run `./configure`.) The script
also writes a very detailed log of its operation into `config.log` to help track
down errors. Since `config.log` is very long, it is recommended that you open
it in an editor and search for phrases like 'error' or the name of the package
associated with the problem.
===============================================================

[NOTE]
===============================================================
@OMNETPP@ builds without the BLT Tcl/Tk extension, because BLT is
not available for the native (Aqua) version of Tcl/Tk.

As an alternative to the Aqua version of Tcl/Tk, you may also use
the X11 version from the MacPorts repository (http://macports.org).
The MacPorts version does not have the look and feel of OS X applications,
but it may provide better performance with animations.
To select the MacPorts version of Tk, you will need to adjust the
Tcl/Tk settings in @OMNETPP@'s `configure.user` file and re-run the
`./configure`. Please note that we do not provide support for
using the MacPorts version of Tcl/Tk.
===============================================================


When `./configure` has finished, you can compile @OMNETPP@.
Type in the terminal:

  $ make

[TIP]
===============================================================
To take advantage of multiple processor cores, add the `-j2` option to the
`make` command line.
===============================================================

[NOTE]
===============================================================
The build process will not write anything outside its directory,
so no special privileges are needed.
===============================================================

[TIP]
===============================================================
The make command will seemingly compile everything twice. This is because
both debug and optimized versions of the libraries are built.
If you only want to build one set of the libraries, specify
`MODE=debug` or `MODE=release`:

  $ make MODE=release
===============================================================


=== Verifying the Installation

You can now verify that the sample simulations run correctly. For example,
the dyna simulation is started by entering the following commands:

    $ cd samples/dyna
    $ ./dyna

By default, the samples will run using the Tcl/Tk environment. You should see
nice gui windows and dialogs.


=== Starting the IDE

@OMNETPP@ comes with an Eclipse-based Simulation IDE. Mac OS X 10.6 already has
Java installed, so you do not need to install it. On Mac OS X 10.7 (Lion), the
Java Runtime must be installed (see prerequisites) before you can use the
IDE. Start the IDE by typing:

    $ @omnetpp@

If you would like to be able to launch the IDE via Applications,
the Dock or a desktop shortcut, do the following: open the `@omnetpp@-@version@`
folder in Finder, go into the `ide` subfolder, create an alias for the @omnetpp@
program there (right-click, 'Make Alias'), and drag the new alias into the
Applications folder, onto the Dock, or onto the desktop.

Alternatively, run one or both of the commands below:

  $ make install-menu-item
  $ make install-desktop-icon

which will do roughly the same.


=== Using the IDE

When you try to build a project in the IDE, you may get the following warning message:

[quote]
_____________________________________________________________________
Toolchain "..." is not supported on this platform or installation. Please go to the
Project menu, and activate a different build configuration. (You may need to switch
to the C/C++ perspective first, so that the required menu items appear in the Project menu.)
_____________________________________________________________________

If you encounter this message, choose 'Project > Properties > C/C++ Build >
Tool Chain Editor > Current toolchain > GCC for @OMNETPP@'.

The IDE is documented in detail in the 'User Guide'.

=== Reconfiguring the Libraries

If you need to recompile the @OMNETPP@ components with different flags (e.g.
different optimization), then change the top-level @OMNETPP@ directory, edit
`configure.user` accordingly, then type:

    $ ./configure
    $ make clean
    $ make

TIP: To take advantage of multiple processor cores, add the `-j2` option to the
`make` command line.

If you want to recompile just a single library, then change to the directory
of the library (e.g. `cd src/sim`) and type:

    $ make clean
    $ make

By default, libraries are compiled in both debug and release mode. If you want
to make release or debug builds only, use:

    $ make MODE=release

or

    $ make MODE=debug

By default, shared libraries will be created. If you want to build static
libraries, set `SHARED_LIBS=no` in `configure.user` and re-configure your
project.

[NOTE]
===============================================================
The built libraries and programs are immediately copied
to the `lib/` and `bin/` subdirectories.
===============================================================

[NOTE]
===============================================================
The Tcl/Tk environment uses the native Aqua version of Tcl/Tk, so you
will see native widgets. However, due to problems in the Tk/Aqua port,
you may experience minor UI quirks. We are aware of these problems,
and are working on the solution.
===============================================================


=== Additional Packages

==== OpenMPI

 * OpenMPI is already bundled with OS X 10.6, so you do not need to
   manually install it.
 * OS X 10.7 does not come with OpenMPI, so you must install it manually.
   Download it from http://open-mpi.org and follow the installation instructions.
   Alternatively, you can install it from the MacPorts repo by typing
   `sudo port install openmpi`. In this case, you have to manually set
   the MPI_CFLAGS and MPI_LIBS variables in `configure.user` and re-run
   `./configure`. Please note that we do not provide support
   for OpenMPI installed from the MacPorts repository.

[NOTE]
===============================================================
MacPorts is a repository of several open source packages for
Mac OS X. Using MacPorts packages may save you some manual work.
You can install MacPorts from http://www.macports.org.
===============================================================

==== GraphViz

GraphViz is needed if you want to have diagrams in HTML documentation
that you generate from NED files in the IDE ('Generate NED Documentation...'
item in the project context menu).

Download and install the GraphViz OS X binaries from http://www.pixelglow.com/graphviz/download/.
Download the latest, version 2.x package; at the time of writing,
the link is at the top of the page.

Alternatively, you can install it from the MacPorts project by typing
`sudo port install graphviz`.

After installation, make sure that the `dot` program is available
from the command line. Open a terminal, and type

  $ dot -V

Note the capital 'V'. The command should normally work out of the box.
If you get the '"command not found"' error, you need to put `dot` into the path.
Find the `dot` program in the GraphViz installation directory, and
soft link it into `/usr/local/bin` (`sudo ln -s <path>/dot /usr/local/bin`).

==== Doxygen

Doxygen is needed if you want to generate documentation for C++ code,
as part of the HTML documentation that you generate from NED files in the IDE
('Generate NED Documentation...' item in the project context menu).

Download the Doxygen OS X binaries from the Doxygen web site's download page,
http://www.stack.nl/~dimitri/doxygen/download.html, and install it.

Alternatively, you can install it from the MacPorts project by typing
`sudo port install doxygen`.

After installation, ensure that the `doxygen` program is available
from the command line. Open a terminal, and type

  $ doxygen

If you get the '"command not found"' error, you need to put `doxygen` into the path.
Enter into a terminal:

  $ cd /Applications/Doxygen.app/Contents/Resources/
  $ sudo ln -s doxygen doxytags /usr/local/bin

==== Akaroa

Akaroa 2.7.9, which is the latest version at the time of writing, does not
support Mac OS X. You may try to port it using the porting guide from the
Akaroa distribution.

ifdef::OMNEST[]

==== SystemC

SystemC integration is not available on Mac OS X, because the bundled
SystemC reference implementation does not support Mac OS X 10.7.

endif::OMNEST[]

