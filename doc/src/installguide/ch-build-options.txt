== Build Options

=== Configure.user Options

The `configure.user` file contains several options that can be used to fine-tune
the simulation libraries.

You always need to re-run the `configure` script in the installation
root after changing the `configure.user` file.

  $ ./configure

After this step, you have to remove all previous libraries and recompile @OMNETPP@:

  $ make cleanall
  $ make

Options:

`USE_NAMESPACE=no`::
  Turning on this option will place all @OMNETPP@ APIs into the `omnetpp` namespace 
  to prevent name collisions with other libraries. After that, models must be updated
  to either import the namespace or use qualified names. To compile unmodified models, 
  use -DAUTOIMPORT_NAMESPACE in the compiler flags (CFLAGS).

`PREFER_CLANG=no`::
  If both `gcc` and `clang` are installed on your system, setting this variable to `yes` 
  will force the configure script to use `clang` as C++ compiler.

`USE_CXX11=yes`::
  By default @OMNETPP@ is configured to use C++11 language features. This can be disabled if
  your model is not yet compatible with C++11. Future @OMNETPP@ versions may require C++11, so
  it is strongly recommended to update your models as soon as possible.

ifdef::OMNEST[]
`SYSTEMC=no`::
  Use this variable to enable integration whith the bundled SystemC reference implementation.
endif::OMNEST[]

`<COMPONENTNAME>_CFLAGS`, `<COMPONENTNAME>_LIBS`::
  The `configure.user` file contains variables for defining the compile and link options
  needed by various external libraries. By default, the `configure` command detects these
  automatically, but you may override the auto detection by specifying the values by hand.
  (e.g. `<COMP>_CFLAGS=-I/path/to/comp/includedir` and `<COMP>_LIBS=-L/path/to/comp/libdir -lnameoflib`.)

`WITH_PARSIM=no`::
  Use this variable to explicitly disable parallel simulation support in @OMNETPP@.

`WITH_NETBUILDER=no`::
  This option allows you to leave out the NED language parser and
  the network builder. (This is needed only if you are building your network with
  C++ API calls and you do not use the built-in NED language parser at all.)

`NO_TCL=yes`::
  This will prevent the build system to link with Tcl/Tk libraries. Use this option
  if your platform does not have a suitable Tcl/Tk package and you will run the simulation
  only in command line mode. (i.e. You want to run @OMNETPP@ in a remote terminal session.)

`EMBED_TCL_CODE=no`::
  Tcl/Tk is a script language and the source of the graphical
  runtime environment is stored as `.tcl` files in the `src/tkenv` directory.
  By default, these files are not used directly, but are embedded as string literals
  in the executable file. Setting `EMBED_TCL_CODE=yes` allows you to move the
  @OMNETPP@ installation without caring about the location of the `.tcl` files.
  If you want to make changes to the Tcl code, you better switch off the embedding with
  the `EMBED_TCL_CODE=no` option. This way you can make changes to the `.tcl`
  files and see the changes immediately without recompiling the @OMNETPP@ libraries.

`CFLAGS_[RELEASE/DEBUG]`::
  To change the compiler command line options the build process is using, you
  should specify them in the `CFLAGS_RELEASE` and `CFLAGS_DEBUG` variables.
  By default, the flags required for debugging or optimization are detected
  automatically by the `configure` script. If you set them manually, you
  should specify all options you need. It is recommended to check what options are
  detected automatically (check the `Makefile.inc` after running `configure` and
  look for the `CFLAGS_[RELEASE/DEBUG]` variables.) and add/modify
  those options manually in the `configure.user` file.

`LDFLAGS`::
  Linker command line options can be explicitly set using this variable.
  It is recommended to check what options are detected automatically
  (check the `Makefile.inc` after running `configure` and
  look for the `LDFLAGS` variable.) and add/modify those options manually in
  the `configure.user` file.

`SHARED_LIBS`::
  This variable controls whether the @OMNETPP@ build process will create
  static or dynamic libraries. By default, the @OMNETPP@ runtime is built as a set of shared libraries.
  If you want to build a single executable from your simulation, specify `SHARED_LIBS=no`
  in `configure.user` to create static @OMNETPP@ libraries and then reconfigure (`./configure`)
  and recompile @OMNETPP@ (`make cleanall; make`). Once the @OMNETPP@ static libraries are 
  correctly built, your own project have to be rebuilt, too. You will get a single, statically 
  linked executable, which requires only the NED and INI files to run.

WARNING: It is important to completely delete the @OMNETPP@ libraries (`make cleanall`)
and then rebuild them, otherwise it cannot be guaranteed that the created simulations
are linked against the correct libraries.

The following symbols can be defined for the compiler if you need backward compatibility
with some older @OMNETPP@ 3.x features. They should be specified on the
compiler command line using the `-DSYMBOLNAME` syntax. You can add these options to the
`CFLAGS_RELEASE` or `CFLAGS_DEBUG` variables (e.g. `CFLAGS_RELEASE='-O2 -DNDEBUG=1 -DSYMBOLNAME'`).

`USE_DOUBLE_SIMTIME`::
  @OMNETPP@ 3.x used `double` as the type for simulation time. In @OMNETPP@ 4.0
  and later, the simulation time is a fixed-point number based on a 64-bit integer..
  If you want to work with `double` simulation time for some reason (e.g. during
  porting an @OMNETPP@ 3.x model), define the `USE_DOUBLE_SIMTIME` symbol for the compiler.

`WITHOUT_CPACKET`::
  In @OMNETPP@ 3.x, methods and data related to the modeling of network packets
  were included in the `cMessage` class. For these parameters, @OMNETPP@ 4.x has
  a new class called `cPacket` (derived from cMessage). If you want get back
  the old behavior (i.e. having a single `cMessage` class only), define the
  `WITHOUT_CPACKET` symbol.

=== Moving the Installation

When you build @OMNETPP@ on your machine, several directory names are compiled
into the binaries. This makes it easier to set up @OMNETPP@ in the first place,
but if you rename the installation directory or move it to another location in
the file system, the built-in paths become invalid and the correct paths have
to be supplied via environment variables.

The following environment variables are affected (in addition to `PATH`, which
also needs to be adjusted):

`OMNETPP_IMAGE_PATH`::
  This variable contains the list of directories where Tkenv looks for icons.
  Set it to point to the `images/` subdirectory of your @OMNETPP@ installation.

`OMNETPP_TKENV_DIR`::
  This variable points to the directory that contains the Tcl script parts
  of Tkenv, which is by default the `src/tkenv/` subdirectory
  of your @OMNETPP@ installation. Normally you don't need to set this variable,
  because the Tkenv shared library contains all Tcl code compiled in as
  string literals. However, if you compile @OMNETPP@ with the `EMBED_TCL_CODE=no`
  setting and then you move the installation, then you need to set
  `OMNETPP_TKENV_DIR`, otherwise Tkenv won't start.

`LD_LIBRARY_PATH`::
  This variable contains the list of additional directories where shared
  libraries are looked for. Initially, `LD_LIBRARY_PATH` is not needed
  because shared libraries are located via the 'rpath' mechanism. When you
  move the installation, you need to add the `lib/` subdirectory
  of your @OMNETPP@ installation to `LD_LIBRARY_PATH`.

NOTE: On Mac OS X, `DYLD_LIBRARY_PATH` is used instead of `LD_LIBRARY_PATH`.
On Windows, the `PATH` variable must contain the directory where shared
libraries (DLLs) are present.

=== Using Different Compilers

By default, the configure script detects the following compilers automatically in the path:

* Intel compiler (icc, icpc)
* GNU C/C++ (gcc, g++)
* Clang (clang, clang++)
* Sun Studio (cc, cxx)
* IBM compiler (xlc, xlC)

If you want to use compilers other than the above ones, you should
specify the compiler name in the `CC` and `CXX` variables, and re-run the
configuration script.

NOTE: Different compilers may have different command line options. If you use a compiler
  other than the default `gcc`, you may have to revise the `CFLAGS_[RELEASE/DEBUG]` and
  `LDFLAGS` variables.

ifdef::OMNEST[]

=== Using Microsoft Visual C++

If you are using the Microsoft Visual C++ compiler on Windows,
the build procedure is slightly different than the one used on Unix platforms.

The major differences are:

 * The file `configuser.vc` must be used to specify your build options instead
   of `configure.user`
 * There is no automatic configuration (`./configure`) for Visual C++ builds. You must
   review and specify each options in `configuser.vc` before compiling @OMNETPP@.
 * The build process is initiated with the command `nmake -f Makefile.vc` instead of `make`.

endif::OMNEST[]

