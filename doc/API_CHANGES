
Upgrading your sources from OMNeT++ 2.0b2 or earlier to 2.0b3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jan 18, 2000

There were some incompatible changes in the simulation library.
See src/sim/ChangeLog for more info about them (rationale, details...)
Read on to learn what you should do to upgrade your code...

Find/replace (case sensitive, whole words only):
  isA --> className  (cObject method)
  isbad --> hasBitError  (cMessage method)
  isgood --> !hasbitError  (cMessage method)
  setError --> setBitError (cMessage method)
  insertHead --> insert (cQueue method)
  peekTail --> tail (cQueue method)
  peekHead --> head (cQueue method)
  get --> remove  (cQueue method -- be sure to leave alone other get()'s!)
  getTail --> pop

cQueue::getHead() was removed, you must rewrite the code manually:
  q.getHead() --> q.remove(q.head())

If you used cPar::setValue():
  You must manually remove the first argument (the type char), and 
  change the function name to setStringValue(..), setLongValue(..), 
  setBoolValue(..), etc.

If you used cPar's indirection functions:
  redirection handling functions were changed to: setRedirection(cPar*),
  isRedirected(), cPar* redirection(), cancelRedirection().
  You have to update the code.

You might rewrite your code to use the new convenience functions:
  cMessage::hasPar(char*), cModule::hasPar(char*), cModule::hasGate(char*,int)

If you used cPar constructors which assigned an initial value:
  These constructors were removed. Rewrite the code to use setXXXValue() or
  assignment. For example:
          cPar address("address") = "152.66.77.88";
  Existing client code like
          msg->addPar( *new cPar("dest", 'L', dest );
  can be rewritten as:
          msg->addPar( *new cPar("dest") = dest );
  or better as:
           msg->addPar("dest") = dest;

Math expressions using cPar now need explicit casts:
  Expressions like
     msg->par("count")+1
  which used to compile now cause error ("too many possible conversions")
  and must be disambiguated by adding explicit casts like this:
     (int)msg->par("count")+1.

cArray functions now take and return cObject _pointers_ instead of references.

Remember to re-generate the *_n.cc files from the .ned files!
  Type make clean; make ...


Apologies for the API changes...

--Andras
