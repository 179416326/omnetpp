
Upgrading your sources from OMNeT++ 2.0b2 or earlier to 2.0b3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

See src/sim/ChangeLog to read about why the changes were necessary...

Find/replace (case sensitive, whole words only):
  isA --> className  (cObject method)
  isbad --> hasBitError  (cMessage method)
  isgood --> !hasbitError  (cMessage method)
  setError --> setBitError (cMessage method)
  insertHead --> insert (cQueue method)
  peekTail --> tail (cQueue method)
  peekHead --> head (cQueue method)
  get --> remove  (cQueue method -- be sure to leave alone other get()'s!)
  getTail --> pop

cQueue::getHead() was removed, you must rewrite the code manually:
  q.getHead() --> q.remove(q.head())

If you used cPar::setValue():
  You must manually change them to setStringValue(..), setLongValue(..),
  setBoolValue(..), etc.

If you used cPar's indirection functions:
  redirection handling functions were changed to: setRedirection(cPar*),
  isRedirected(), cPar* redirection(), cancelRedirection().
  You have to update the code.

You might rewrite your code to use new convenience functions:
  cMessage::hasPar(char*), cModule::hasPar(char*), cModule::hasGate(char*,int)

If you used cPar constructors which assign an initial value:
  These constructors were removed. Rewrite the code to use setXXXValue() or
  assignment. For example:
          cPar address("address") = "152.66.77.88";
  But not like this (see next item):
          cPar address = "152.66.77.88";  // WRONG!
  Existing client code like
          msg->addPar( *new cPar("dest", 'L', dest );
  can be rewritten like
          msg->addPar( *new cPar("dest") = dest );
  or better like
           msg->addPar("dest") = dest;

cPar caveat discovered!
  Beware of constructs like
      cPar p = "foo";  // probably wrong!
  It does NOT compile as you would expect!!! It doesn't compile as
      cPar p;
      p="foo";
  but rather as
      cPar p("foo");
  That is, "foo" becomes the object's NAME instead of its value!
  This is one of the quirks of C++...  The solution is to use explicit parens
  to denote the constructor call:
      cPar p() = "foo";  // good!
  This is a hint that it might be ALWAYS a good idea to write empty parens
  in constructor calls (like 'new cMessage()' instead of 'new cMessage') to
  avoid such surprises. Java does that too.


You must also re-generate the *_n.cc files from the .ned files!
(e.g.: make clean; make)


HOPE THE API CHANGES DON'T CAUSE TOO MUCH INCONVENIENCE. I believe the changes
are not too serious and make the library better. I don't plan to make any
further incompatible changes in the future...

--Andras
