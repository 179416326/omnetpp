NED RULES
=========

This doc summarizes NED language rules that do not follow automatically
from the language syntax (lexer rules and grammar).


NED type resolution
===================
Described in NED-package-structure.txt


Inheritance rules
=================
A simple module may only extend a simple module.
A compound module may only extend a compound module.
A channel may only extend a channel.
A module interface may only extend a module interface (or several module interfaces).
A channel interface may only extend a channel interface (or several channel interfaces).

A "network" is a shorthand for a compound module with the @isNetwork
property set, so the same rules apply to it as to compound module.

Inheritance may:
- add new properties, parameters, gates, inner types, submodules, connections
- modify inherited properties, and properties of inherited parameters and gates
- it may NOT modify inherited submodules, connections and inner types

See other rules for specifics.


Rules for interfaces
====================
An interface (module interface or channel interface) may NOT contain
parameter assignment or parameter default value assignment. An interface
may NOT contain inner types (rationale: what use would they be?).

A module type that implements ("like") a module interface is required
to have at least the parameters and the gates defined in the interface,
with the same types.

Regarding properties, parameter properties and gate properties defined
in the interface: the module is required to have those properties,
with at least the same values. It may have additional properties,
and properties may add more keys and values (see property inheritance.)

Similar rules apply to channel types.


Rules for @isNetwork
====================
The @isNetwork property is only accepted on simple modules and
compound modules. The value may be empty, true or false:
  @isNetwork;
  @isNetwork();
  @isNetwork(true);
  @isNetwork(false);
The empty value corresponds to @isNetwork(true).

The @isNetwork property does NOT get inherited, that is, a subclass
of a module with @isNetwork set does NOT automatically become a network.
The @isNetwork property needs to be explicitly added to the subclass
to make it a network.

Rationale: subclassing may add gates, whereas networks cannot have gates.


Rules for parameter assignments
===============================
Default values for parameters may be overridden in subclasses.
Parameter (non-default) assignments may NOT be overridden in subclasses.


Rules for gate vector sizes
===========================
Gate vector sizes may NOT be overridden in subclasses.


Rules for property inheritance
==============================
Generally, properties may be modified via inheritance. Inheritance may:
- add new keys
- add/overwrite values for existing keys
- remove a value from an existing key (by using the special value '-')


Rules for @unit()
=========================
A parameter may have a @unit property to associate it with a physical unit.
The @unit property should contain one string value for the default key.
Examples:
  @unit("s")
  @unit(s)
  @unit("second")
  @unit(second)

When present, values assigned to the parameter must be in the
same or in a compatible (that is, convertible) unit.
Examples:
  double a @unit(s) = 5s;  // OK
  double a @unit(s) = 5;   // error: should be 5s
  double a @unit(s) = 5kg; // error: incompatible unit

@unit behavior for non-numeric parameters (string, XML) is unspecified
(may be ignored or may be an error).

The @unit property of a parameter may NOT be modified via inheritance.

Example:
  simple A {
      double p @unit(s);
  }
  simple B extends A {
      p @unit(mW);  // illegal: cannot override @unit
  }


Rules for @class and @namespace
===============================
@namespace property may be added to the package.ned file
@class

- @unit and expression evaluation wrt units
- rules for resolving an identifier in an expression


