Compatibility Notes
===================

This file summarizes the changes in OMNeT++ across releases that affect
backwards compatibility, to help you port models to more recent versions
of OMNeT++. New features are not listed only changes in existing features.

Legend:
(!!!) incompatible change
 (!)  incompatible but minor change (change on a rarely used feature)
 (x)  method/class became deprecated (possibly with a better replacement feature
      becoming available), or a method/class was renamed and a corresponding 
      compatibility #define was added ('#define oldname newname')
 (-)  deprecated method/class or compatibility #define removed
 (o)  feature became obsolete

TBD!!!!!!!!!!!

Changes in version 2.3b1 (Jan 13, 2003)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- because of the introduction of C++ exception handling, methods like end(), 
endSimulation() and deleteModule() as well as any runtime error cause
handleMessage() to exit immediately. (In earlier versions, handleMessage() 
went through in any case.)

- rarely-used methods cSimpleModule::error(), opp_error() and opp_warning()
are deprecated; they will be removed at some point in the future.

- redefining className() in your classes is now redundant (because the 
simulation kernel is now compiled with C++ RTTI turned on, and so 
cObject::className() can do the job).

- several smaller auxiliary classes were made inner classes to their 'main'
  classes. (Examples: cQueueIterator --> cQueue::Iterator, sTopoNode -->
  cTopology::Node, etc; full list in include/ChangeLog.) Compatibility typedefs
  exist for old names.

- refactoring on dynamic module creation: instead of modtype->buildInside(mod),
  one should now write mod->buildInside(), which is more natural.
  (Former syntax still works -- a cModuleType::buildInside() is still provided
  for backward compatibility). buildInside() delegates task to doBuildInside()
  (a new method), so it's doBuildInside() which should be redefined in
  subclasses, and also nedc generates now doBuildInside() code.

- container objects are now more consistent in what they do when the requested
  object doesn't exist:
  * Convention 1: methods returning an object reference (e.g. cPar&) now
    always throw an exception if the object is not found. (Until now, some
    methods issued a warning and returned null reference, i.e. *(cPar*)NULL).
  * Convention 2: methods returning a pointer (e.g. cGate*) return NULL
    pointer if the object is not found. (Until now, some methods issued
    a warning and returned NULL pointer.)
  These conventions necessitated the following changes:
  * par() of cModule and cMessage now throws an exception if parameter was not
    found. (Check for existence of a parameter before accessing it can now be
    replaced with try..catch if you want!)
  * cModule: cGate *gate() methods no longer issue a warning if the
    gate is not found, just return NULL.
  * cArray::remove(cObject *) and cQueue::remove(cObject *) methods
    now return NULL instead of the original pointer if the object was
    not found.

- cSimulation changes:
  * lastModuleIndex() renamed to lastModuleId();
  * operator[] deprecated (use module(int) method instead)
  * del() renamed to deleteModule(); add() renamed to addModule()

- channels are now represented by real objects (subclassed from cChannel) 
  rather than parameters in cGate. Channels can be assigned to connections 
  via cGate's setChannel() method; at the same time, DEPRECATED cGate's 
  setDelay(), setError(), setDatarate(), setLink() methods (these attributes 
  should be set on the channel object).

- cSubModIterator: operator[] deprecated (use operator()(int) method instead)

- For further, more internal changes and for more details on the above changes
  see include/ChangeLog and src/sim/ChangeLog.

- cGate: added isConnectedOutside() and isConnectedInside() utility methods;
added connectTo() method, and DEPRECATED setFrom() and setTo()

- cMessage: added convenience methods for attaching objects to a message:
addObject(), getObject(), hasObject(), removeObject(). 

- changed MSVC flags!!!
   Tested with MSVC 6.0 and Cygwin/gcc-2.95.3-5. With MSVC, one needs
   to compile every source using /GR, otherwise Tkenv crashes (RTTI
   exception)!

Cmdenv:
- obsoleted omnetpp.ini entries: display-update=, verbose-simulation=.

- introduced express-mode=yes/no (default: no) switch, with meaning similar
  to Tkenv (non-express mode: detailed information printed; express mode:
  only periodic status updates)

- in normal mode (express-mode=no), the following ini file entries are
  taken into account:
  * module-messages=yes/no (default: yes)
       printing module ev<< output on/off (as before)
  * event-banners=yes/no (default: yes)
       printing event banners on/off; replaces verbose-simulation=

- in express mode, following entries are used:
  * status-frequency=<integer> (default: 100000)
        print status update every n events (on today's computers, and for a 
        typical simulation model, this will produce an update perhaps in every 
        few seconds)
  * performance-display=yes/no (default: yes)
        print detailed (2-line) performance status

Tkenv:
- with "ring" layout, changed display order of modules from clockwise to the
  more natural counter-clockwise

Envir:
- filemgrs.cc: added fname-append-host=true/false ini file setting.
  When turned on, appends the host name to the names of the output
  files (output vector, output scalar, snapshot files). This is
  useful when the simulation is run on multiple machines concurrently
  (parallel independent runs (Akaroa) or parallel/distributed simulation),
  and all running instances write to the same directory (e.g. shared
  via NFS mount). [Idea from Steffen Sroka's Akaroa extension]

	* added akoutvectormgr.h/cc: integrated Steffen Sroka's Akaroa
	extension that supports multiple independent replicated simulation runs.
	Akaroa can be activated by specifying
	  [General]
	  outputvectormanager-class=AkOutputVectorManager
	in the ini file. By default, all output vectors are under Akaroa
	control; the <modulename>.<vectorname>.akaroa=false setting can be used
	to make Akaroa ignore specific vectors.
	For more info see the Akaroa home page and the OMNeT++ documentation.


Changes in version 2.0b3 (Jan 18, 2000)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In OMNeT++ 2.0b3, some changes were made to the simulation library which
are not compatible with previous versions. These changes are believed to
improve the quality of the simulation library, and I apologize for the 
inconvenience...

You can check src/sim/ChangeLog for more explanation on these changes;
otherwise, just read on to learn what you should do to upgrade your existing
code.

Find/replace (case sensitive, whole words only):
  isA --> className  (cObject method)
  isbad --> hasBitError  (cMessage method)
  isgood --> !hasbitError  (cMessage method)
  setError --> setBitError (cMessage method)
  insertHead --> insert (cQueue method)
  peekTail --> tail (cQueue method)
  peekHead --> head (cQueue method)
  get --> remove  (cQueue method -- be sure to leave alone other get()'s!)
  getTail --> pop

cQueue::getHead() was removed, you must rewrite the code manually:
  q.getHead() --> q.remove(q.head())

If you used cPar::setValue():
  You must manually remove the first argument (the type char), and 
  change the function name to setStringValue(..), setLongValue(..), 
  setBoolValue(..), etc.

If you used cPar's indirection functions:
  redirection handling functions were changed to: setRedirection(cPar*),
  isRedirected(), cPar* redirection(), cancelRedirection().
  You have to update the code.

You might rewrite your code to use the new convenience functions:
  cMessage::hasPar(char*), cModule::hasPar(char*), cModule::hasGate(char*,int)

If you used cPar constructors which assigned an initial value:
  These constructors were removed. Rewrite the code to use setXXXValue() or
  assignment. For example:
          cPar address("address") = "152.66.77.88";
  Existing client code like
          msg->addPar( *new cPar("dest", 'L', dest );
  can be rewritten as:
          msg->addPar( *new cPar("dest") = dest );
  or better as:
           msg->addPar("dest") = dest;

Math expressions using cPar now need explicit casts:
  Expressions like
     msg->par("count")+1
  which used to compile now cause error ("too many possible conversions")
  and must be disambiguated by adding explicit casts like this:
     (int)msg->par("count")+1.

cArray functions now take and return cObject _pointers_ instead of references.

Remember to re-generate the *_n.cc files from the .ned files!
  Type make clean; make ...


--Andras
